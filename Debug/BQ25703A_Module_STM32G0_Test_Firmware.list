
BQ25703A_Module_STM32G0_Test_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048d0  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08004990  08004990  00014990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004a44  08004a44  00014a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004a4c  08004a4c  00014a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004a50  08004a50  00014a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  08004a54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000f60  20000010  08004a64  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000f70  08004a64  00020f70  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001e1a5  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004071  00000000  00000000  0003e1dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00010728  00000000  00000000  0004224e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001360  00000000  00000000  00052978  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001a70  00000000  00000000  00053cd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000b207  00000000  00000000  00055748  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000070cb  00000000  00000000  0006094f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00067a1a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003bfc  00000000  00000000  00067a98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004978 	.word	0x08004978

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08004978 	.word	0x08004978

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__gnu_thumb1_case_uhi>:
 800011c:	b403      	push	{r0, r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0040      	lsls	r0, r0, #1
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	5a09      	ldrh	r1, [r1, r0]
 8000128:	0049      	lsls	r1, r1, #1
 800012a:	448e      	add	lr, r1
 800012c:	bc03      	pop	{r0, r1}
 800012e:	4770      	bx	lr

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	; 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f8f0 	bl	8000418 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__divsi3>:
 8000244:	4603      	mov	r3, r0
 8000246:	430b      	orrs	r3, r1
 8000248:	d47f      	bmi.n	800034a <__divsi3+0x106>
 800024a:	2200      	movs	r2, #0
 800024c:	0843      	lsrs	r3, r0, #1
 800024e:	428b      	cmp	r3, r1
 8000250:	d374      	bcc.n	800033c <__divsi3+0xf8>
 8000252:	0903      	lsrs	r3, r0, #4
 8000254:	428b      	cmp	r3, r1
 8000256:	d35f      	bcc.n	8000318 <__divsi3+0xd4>
 8000258:	0a03      	lsrs	r3, r0, #8
 800025a:	428b      	cmp	r3, r1
 800025c:	d344      	bcc.n	80002e8 <__divsi3+0xa4>
 800025e:	0b03      	lsrs	r3, r0, #12
 8000260:	428b      	cmp	r3, r1
 8000262:	d328      	bcc.n	80002b6 <__divsi3+0x72>
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d30d      	bcc.n	8000286 <__divsi3+0x42>
 800026a:	22ff      	movs	r2, #255	; 0xff
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	ba12      	rev	r2, r2
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d302      	bcc.n	800027c <__divsi3+0x38>
 8000276:	1212      	asrs	r2, r2, #8
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	d065      	beq.n	8000348 <__divsi3+0x104>
 800027c:	0b03      	lsrs	r3, r0, #12
 800027e:	428b      	cmp	r3, r1
 8000280:	d319      	bcc.n	80002b6 <__divsi3+0x72>
 8000282:	e000      	b.n	8000286 <__divsi3+0x42>
 8000284:	0a09      	lsrs	r1, r1, #8
 8000286:	0bc3      	lsrs	r3, r0, #15
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x4c>
 800028c:	03cb      	lsls	r3, r1, #15
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b83      	lsrs	r3, r0, #14
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x58>
 8000298:	038b      	lsls	r3, r1, #14
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b43      	lsrs	r3, r0, #13
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x64>
 80002a4:	034b      	lsls	r3, r1, #13
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b03      	lsrs	r3, r0, #12
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x70>
 80002b0:	030b      	lsls	r3, r1, #12
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0ac3      	lsrs	r3, r0, #11
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x7c>
 80002bc:	02cb      	lsls	r3, r1, #11
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a83      	lsrs	r3, r0, #10
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x88>
 80002c8:	028b      	lsls	r3, r1, #10
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a43      	lsrs	r3, r0, #9
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x94>
 80002d4:	024b      	lsls	r3, r1, #9
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a03      	lsrs	r3, r0, #8
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0xa0>
 80002e0:	020b      	lsls	r3, r1, #8
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	d2cd      	bcs.n	8000284 <__divsi3+0x40>
 80002e8:	09c3      	lsrs	r3, r0, #7
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xae>
 80002ee:	01cb      	lsls	r3, r1, #7
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0983      	lsrs	r3, r0, #6
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xba>
 80002fa:	018b      	lsls	r3, r1, #6
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0943      	lsrs	r3, r0, #5
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xc6>
 8000306:	014b      	lsls	r3, r1, #5
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0903      	lsrs	r3, r0, #4
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xd2>
 8000312:	010b      	lsls	r3, r1, #4
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	08c3      	lsrs	r3, r0, #3
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xde>
 800031e:	00cb      	lsls	r3, r1, #3
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0883      	lsrs	r3, r0, #2
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xea>
 800032a:	008b      	lsls	r3, r1, #2
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0843      	lsrs	r3, r0, #1
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xf6>
 8000336:	004b      	lsls	r3, r1, #1
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	1a41      	subs	r1, r0, r1
 800033e:	d200      	bcs.n	8000342 <__divsi3+0xfe>
 8000340:	4601      	mov	r1, r0
 8000342:	4152      	adcs	r2, r2
 8000344:	4610      	mov	r0, r2
 8000346:	4770      	bx	lr
 8000348:	e05d      	b.n	8000406 <__divsi3+0x1c2>
 800034a:	0fca      	lsrs	r2, r1, #31
 800034c:	d000      	beq.n	8000350 <__divsi3+0x10c>
 800034e:	4249      	negs	r1, r1
 8000350:	1003      	asrs	r3, r0, #32
 8000352:	d300      	bcc.n	8000356 <__divsi3+0x112>
 8000354:	4240      	negs	r0, r0
 8000356:	4053      	eors	r3, r2
 8000358:	2200      	movs	r2, #0
 800035a:	469c      	mov	ip, r3
 800035c:	0903      	lsrs	r3, r0, #4
 800035e:	428b      	cmp	r3, r1
 8000360:	d32d      	bcc.n	80003be <__divsi3+0x17a>
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d312      	bcc.n	800038e <__divsi3+0x14a>
 8000368:	22fc      	movs	r2, #252	; 0xfc
 800036a:	0189      	lsls	r1, r1, #6
 800036c:	ba12      	rev	r2, r2
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d30c      	bcc.n	800038e <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d308      	bcc.n	800038e <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d304      	bcc.n	800038e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	d03a      	beq.n	80003fe <__divsi3+0x1ba>
 8000388:	1192      	asrs	r2, r2, #6
 800038a:	e000      	b.n	800038e <__divsi3+0x14a>
 800038c:	0989      	lsrs	r1, r1, #6
 800038e:	09c3      	lsrs	r3, r0, #7
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x154>
 8000394:	01cb      	lsls	r3, r1, #7
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0983      	lsrs	r3, r0, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x160>
 80003a0:	018b      	lsls	r3, r1, #6
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0943      	lsrs	r3, r0, #5
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x16c>
 80003ac:	014b      	lsls	r3, r1, #5
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0903      	lsrs	r3, r0, #4
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x178>
 80003b8:	010b      	lsls	r3, r1, #4
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	08c3      	lsrs	r3, r0, #3
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x184>
 80003c4:	00cb      	lsls	r3, r1, #3
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0883      	lsrs	r3, r0, #2
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x190>
 80003d0:	008b      	lsls	r3, r1, #2
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	d2d9      	bcs.n	800038c <__divsi3+0x148>
 80003d8:	0843      	lsrs	r3, r0, #1
 80003da:	428b      	cmp	r3, r1
 80003dc:	d301      	bcc.n	80003e2 <__divsi3+0x19e>
 80003de:	004b      	lsls	r3, r1, #1
 80003e0:	1ac0      	subs	r0, r0, r3
 80003e2:	4152      	adcs	r2, r2
 80003e4:	1a41      	subs	r1, r0, r1
 80003e6:	d200      	bcs.n	80003ea <__divsi3+0x1a6>
 80003e8:	4601      	mov	r1, r0
 80003ea:	4663      	mov	r3, ip
 80003ec:	4152      	adcs	r2, r2
 80003ee:	105b      	asrs	r3, r3, #1
 80003f0:	4610      	mov	r0, r2
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x1b4>
 80003f4:	4240      	negs	r0, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d500      	bpl.n	80003fc <__divsi3+0x1b8>
 80003fa:	4249      	negs	r1, r1
 80003fc:	4770      	bx	lr
 80003fe:	4663      	mov	r3, ip
 8000400:	105b      	asrs	r3, r3, #1
 8000402:	d300      	bcc.n	8000406 <__divsi3+0x1c2>
 8000404:	4240      	negs	r0, r0
 8000406:	b501      	push	{r0, lr}
 8000408:	2000      	movs	r0, #0
 800040a:	f000 f805 	bl	8000418 <__aeabi_idiv0>
 800040e:	bd02      	pop	{r1, pc}

08000410 <__aeabi_idivmod>:
 8000410:	2900      	cmp	r1, #0
 8000412:	d0f8      	beq.n	8000406 <__divsi3+0x1c2>
 8000414:	e716      	b.n	8000244 <__divsi3>
 8000416:	4770      	bx	lr

08000418 <__aeabi_idiv0>:
 8000418:	4770      	bx	lr
 800041a:	46c0      	nop			; (mov r8, r8)

0800041c <__aeabi_uldivmod>:
 800041c:	2b00      	cmp	r3, #0
 800041e:	d111      	bne.n	8000444 <__aeabi_uldivmod+0x28>
 8000420:	2a00      	cmp	r2, #0
 8000422:	d10f      	bne.n	8000444 <__aeabi_uldivmod+0x28>
 8000424:	2900      	cmp	r1, #0
 8000426:	d100      	bne.n	800042a <__aeabi_uldivmod+0xe>
 8000428:	2800      	cmp	r0, #0
 800042a:	d002      	beq.n	8000432 <__aeabi_uldivmod+0x16>
 800042c:	2100      	movs	r1, #0
 800042e:	43c9      	mvns	r1, r1
 8000430:	1c08      	adds	r0, r1, #0
 8000432:	b407      	push	{r0, r1, r2}
 8000434:	4802      	ldr	r0, [pc, #8]	; (8000440 <__aeabi_uldivmod+0x24>)
 8000436:	a102      	add	r1, pc, #8	; (adr r1, 8000440 <__aeabi_uldivmod+0x24>)
 8000438:	1840      	adds	r0, r0, r1
 800043a:	9002      	str	r0, [sp, #8]
 800043c:	bd03      	pop	{r0, r1, pc}
 800043e:	46c0      	nop			; (mov r8, r8)
 8000440:	ffffffd9 	.word	0xffffffd9
 8000444:	b403      	push	{r0, r1}
 8000446:	4668      	mov	r0, sp
 8000448:	b501      	push	{r0, lr}
 800044a:	9802      	ldr	r0, [sp, #8]
 800044c:	f000 f806 	bl	800045c <__udivmoddi4>
 8000450:	9b01      	ldr	r3, [sp, #4]
 8000452:	469e      	mov	lr, r3
 8000454:	b002      	add	sp, #8
 8000456:	bc0c      	pop	{r2, r3}
 8000458:	4770      	bx	lr
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__udivmoddi4>:
 800045c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045e:	4657      	mov	r7, sl
 8000460:	464e      	mov	r6, r9
 8000462:	4645      	mov	r5, r8
 8000464:	46de      	mov	lr, fp
 8000466:	b5e0      	push	{r5, r6, r7, lr}
 8000468:	0004      	movs	r4, r0
 800046a:	b083      	sub	sp, #12
 800046c:	000d      	movs	r5, r1
 800046e:	4692      	mov	sl, r2
 8000470:	4699      	mov	r9, r3
 8000472:	428b      	cmp	r3, r1
 8000474:	d82f      	bhi.n	80004d6 <__udivmoddi4+0x7a>
 8000476:	d02c      	beq.n	80004d2 <__udivmoddi4+0x76>
 8000478:	4649      	mov	r1, r9
 800047a:	4650      	mov	r0, sl
 800047c:	f000 f8ae 	bl	80005dc <__clzdi2>
 8000480:	0029      	movs	r1, r5
 8000482:	0006      	movs	r6, r0
 8000484:	0020      	movs	r0, r4
 8000486:	f000 f8a9 	bl	80005dc <__clzdi2>
 800048a:	1a33      	subs	r3, r6, r0
 800048c:	4698      	mov	r8, r3
 800048e:	3b20      	subs	r3, #32
 8000490:	469b      	mov	fp, r3
 8000492:	d500      	bpl.n	8000496 <__udivmoddi4+0x3a>
 8000494:	e074      	b.n	8000580 <__udivmoddi4+0x124>
 8000496:	4653      	mov	r3, sl
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	001f      	movs	r7, r3
 800049e:	4653      	mov	r3, sl
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	001e      	movs	r6, r3
 80004a6:	42af      	cmp	r7, r5
 80004a8:	d829      	bhi.n	80004fe <__udivmoddi4+0xa2>
 80004aa:	d026      	beq.n	80004fa <__udivmoddi4+0x9e>
 80004ac:	465b      	mov	r3, fp
 80004ae:	1ba4      	subs	r4, r4, r6
 80004b0:	41bd      	sbcs	r5, r7
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	da00      	bge.n	80004b8 <__udivmoddi4+0x5c>
 80004b6:	e079      	b.n	80005ac <__udivmoddi4+0x150>
 80004b8:	2200      	movs	r2, #0
 80004ba:	2300      	movs	r3, #0
 80004bc:	9200      	str	r2, [sp, #0]
 80004be:	9301      	str	r3, [sp, #4]
 80004c0:	2301      	movs	r3, #1
 80004c2:	465a      	mov	r2, fp
 80004c4:	4093      	lsls	r3, r2
 80004c6:	9301      	str	r3, [sp, #4]
 80004c8:	2301      	movs	r3, #1
 80004ca:	4642      	mov	r2, r8
 80004cc:	4093      	lsls	r3, r2
 80004ce:	9300      	str	r3, [sp, #0]
 80004d0:	e019      	b.n	8000506 <__udivmoddi4+0xaa>
 80004d2:	4282      	cmp	r2, r0
 80004d4:	d9d0      	bls.n	8000478 <__udivmoddi4+0x1c>
 80004d6:	2200      	movs	r2, #0
 80004d8:	2300      	movs	r3, #0
 80004da:	9200      	str	r2, [sp, #0]
 80004dc:	9301      	str	r3, [sp, #4]
 80004de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d001      	beq.n	80004e8 <__udivmoddi4+0x8c>
 80004e4:	601c      	str	r4, [r3, #0]
 80004e6:	605d      	str	r5, [r3, #4]
 80004e8:	9800      	ldr	r0, [sp, #0]
 80004ea:	9901      	ldr	r1, [sp, #4]
 80004ec:	b003      	add	sp, #12
 80004ee:	bc3c      	pop	{r2, r3, r4, r5}
 80004f0:	4690      	mov	r8, r2
 80004f2:	4699      	mov	r9, r3
 80004f4:	46a2      	mov	sl, r4
 80004f6:	46ab      	mov	fp, r5
 80004f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004fa:	42a3      	cmp	r3, r4
 80004fc:	d9d6      	bls.n	80004ac <__udivmoddi4+0x50>
 80004fe:	2200      	movs	r2, #0
 8000500:	2300      	movs	r3, #0
 8000502:	9200      	str	r2, [sp, #0]
 8000504:	9301      	str	r3, [sp, #4]
 8000506:	4643      	mov	r3, r8
 8000508:	2b00      	cmp	r3, #0
 800050a:	d0e8      	beq.n	80004de <__udivmoddi4+0x82>
 800050c:	07fb      	lsls	r3, r7, #31
 800050e:	0872      	lsrs	r2, r6, #1
 8000510:	431a      	orrs	r2, r3
 8000512:	4646      	mov	r6, r8
 8000514:	087b      	lsrs	r3, r7, #1
 8000516:	e00e      	b.n	8000536 <__udivmoddi4+0xda>
 8000518:	42ab      	cmp	r3, r5
 800051a:	d101      	bne.n	8000520 <__udivmoddi4+0xc4>
 800051c:	42a2      	cmp	r2, r4
 800051e:	d80c      	bhi.n	800053a <__udivmoddi4+0xde>
 8000520:	1aa4      	subs	r4, r4, r2
 8000522:	419d      	sbcs	r5, r3
 8000524:	2001      	movs	r0, #1
 8000526:	1924      	adds	r4, r4, r4
 8000528:	416d      	adcs	r5, r5
 800052a:	2100      	movs	r1, #0
 800052c:	3e01      	subs	r6, #1
 800052e:	1824      	adds	r4, r4, r0
 8000530:	414d      	adcs	r5, r1
 8000532:	2e00      	cmp	r6, #0
 8000534:	d006      	beq.n	8000544 <__udivmoddi4+0xe8>
 8000536:	42ab      	cmp	r3, r5
 8000538:	d9ee      	bls.n	8000518 <__udivmoddi4+0xbc>
 800053a:	3e01      	subs	r6, #1
 800053c:	1924      	adds	r4, r4, r4
 800053e:	416d      	adcs	r5, r5
 8000540:	2e00      	cmp	r6, #0
 8000542:	d1f8      	bne.n	8000536 <__udivmoddi4+0xda>
 8000544:	465b      	mov	r3, fp
 8000546:	9800      	ldr	r0, [sp, #0]
 8000548:	9901      	ldr	r1, [sp, #4]
 800054a:	1900      	adds	r0, r0, r4
 800054c:	4169      	adcs	r1, r5
 800054e:	2b00      	cmp	r3, #0
 8000550:	db22      	blt.n	8000598 <__udivmoddi4+0x13c>
 8000552:	002b      	movs	r3, r5
 8000554:	465a      	mov	r2, fp
 8000556:	40d3      	lsrs	r3, r2
 8000558:	002a      	movs	r2, r5
 800055a:	4644      	mov	r4, r8
 800055c:	40e2      	lsrs	r2, r4
 800055e:	001c      	movs	r4, r3
 8000560:	465b      	mov	r3, fp
 8000562:	0015      	movs	r5, r2
 8000564:	2b00      	cmp	r3, #0
 8000566:	db2c      	blt.n	80005c2 <__udivmoddi4+0x166>
 8000568:	0026      	movs	r6, r4
 800056a:	409e      	lsls	r6, r3
 800056c:	0033      	movs	r3, r6
 800056e:	0026      	movs	r6, r4
 8000570:	4647      	mov	r7, r8
 8000572:	40be      	lsls	r6, r7
 8000574:	0032      	movs	r2, r6
 8000576:	1a80      	subs	r0, r0, r2
 8000578:	4199      	sbcs	r1, r3
 800057a:	9000      	str	r0, [sp, #0]
 800057c:	9101      	str	r1, [sp, #4]
 800057e:	e7ae      	b.n	80004de <__udivmoddi4+0x82>
 8000580:	4642      	mov	r2, r8
 8000582:	2320      	movs	r3, #32
 8000584:	1a9b      	subs	r3, r3, r2
 8000586:	4652      	mov	r2, sl
 8000588:	40da      	lsrs	r2, r3
 800058a:	4641      	mov	r1, r8
 800058c:	0013      	movs	r3, r2
 800058e:	464a      	mov	r2, r9
 8000590:	408a      	lsls	r2, r1
 8000592:	0017      	movs	r7, r2
 8000594:	431f      	orrs	r7, r3
 8000596:	e782      	b.n	800049e <__udivmoddi4+0x42>
 8000598:	4642      	mov	r2, r8
 800059a:	2320      	movs	r3, #32
 800059c:	1a9b      	subs	r3, r3, r2
 800059e:	002a      	movs	r2, r5
 80005a0:	4646      	mov	r6, r8
 80005a2:	409a      	lsls	r2, r3
 80005a4:	0023      	movs	r3, r4
 80005a6:	40f3      	lsrs	r3, r6
 80005a8:	4313      	orrs	r3, r2
 80005aa:	e7d5      	b.n	8000558 <__udivmoddi4+0xfc>
 80005ac:	4642      	mov	r2, r8
 80005ae:	2320      	movs	r3, #32
 80005b0:	2100      	movs	r1, #0
 80005b2:	1a9b      	subs	r3, r3, r2
 80005b4:	2200      	movs	r2, #0
 80005b6:	9100      	str	r1, [sp, #0]
 80005b8:	9201      	str	r2, [sp, #4]
 80005ba:	2201      	movs	r2, #1
 80005bc:	40da      	lsrs	r2, r3
 80005be:	9201      	str	r2, [sp, #4]
 80005c0:	e782      	b.n	80004c8 <__udivmoddi4+0x6c>
 80005c2:	4642      	mov	r2, r8
 80005c4:	2320      	movs	r3, #32
 80005c6:	0026      	movs	r6, r4
 80005c8:	1a9b      	subs	r3, r3, r2
 80005ca:	40de      	lsrs	r6, r3
 80005cc:	002f      	movs	r7, r5
 80005ce:	46b4      	mov	ip, r6
 80005d0:	4097      	lsls	r7, r2
 80005d2:	4666      	mov	r6, ip
 80005d4:	003b      	movs	r3, r7
 80005d6:	4333      	orrs	r3, r6
 80005d8:	e7c9      	b.n	800056e <__udivmoddi4+0x112>
 80005da:	46c0      	nop			; (mov r8, r8)

080005dc <__clzdi2>:
 80005dc:	b510      	push	{r4, lr}
 80005de:	2900      	cmp	r1, #0
 80005e0:	d103      	bne.n	80005ea <__clzdi2+0xe>
 80005e2:	f000 f807 	bl	80005f4 <__clzsi2>
 80005e6:	3020      	adds	r0, #32
 80005e8:	e002      	b.n	80005f0 <__clzdi2+0x14>
 80005ea:	1c08      	adds	r0, r1, #0
 80005ec:	f000 f802 	bl	80005f4 <__clzsi2>
 80005f0:	bd10      	pop	{r4, pc}
 80005f2:	46c0      	nop			; (mov r8, r8)

080005f4 <__clzsi2>:
 80005f4:	211c      	movs	r1, #28
 80005f6:	2301      	movs	r3, #1
 80005f8:	041b      	lsls	r3, r3, #16
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0xe>
 80005fe:	0c00      	lsrs	r0, r0, #16
 8000600:	3910      	subs	r1, #16
 8000602:	0a1b      	lsrs	r3, r3, #8
 8000604:	4298      	cmp	r0, r3
 8000606:	d301      	bcc.n	800060c <__clzsi2+0x18>
 8000608:	0a00      	lsrs	r0, r0, #8
 800060a:	3908      	subs	r1, #8
 800060c:	091b      	lsrs	r3, r3, #4
 800060e:	4298      	cmp	r0, r3
 8000610:	d301      	bcc.n	8000616 <__clzsi2+0x22>
 8000612:	0900      	lsrs	r0, r0, #4
 8000614:	3904      	subs	r1, #4
 8000616:	a202      	add	r2, pc, #8	; (adr r2, 8000620 <__clzsi2+0x2c>)
 8000618:	5c10      	ldrb	r0, [r2, r0]
 800061a:	1840      	adds	r0, r0, r1
 800061c:	4770      	bx	lr
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	02020304 	.word	0x02020304
 8000624:	01010101 	.word	0x01010101
	...

08000630 <HAL_Init>:
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000630:	2380      	movs	r3, #128	; 0x80
 8000632:	4a08      	ldr	r2, [pc, #32]	; (8000654 <HAL_Init+0x24>)
 8000634:	005b      	lsls	r3, r3, #1
 8000636:	6811      	ldr	r1, [r2, #0]
{
 8000638:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800063a:	430b      	orrs	r3, r1
 800063c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800063e:	2000      	movs	r0, #0
 8000640:	f004 f8d0 	bl	80047e4 <HAL_InitTick>
 8000644:	1e04      	subs	r4, r0, #0
 8000646:	d103      	bne.n	8000650 <HAL_Init+0x20>
    status = HAL_ERROR;
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000648:	f004 f80a 	bl	8004660 <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 800064c:	0020      	movs	r0, r4
 800064e:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000650:	2401      	movs	r4, #1
 8000652:	e7fb      	b.n	800064c <HAL_Init+0x1c>
 8000654:	40022000 	.word	0x40022000

08000658 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000658:	4a03      	ldr	r2, [pc, #12]	; (8000668 <HAL_IncTick+0x10>)
 800065a:	4904      	ldr	r1, [pc, #16]	; (800066c <HAL_IncTick+0x14>)
 800065c:	6813      	ldr	r3, [r2, #0]
 800065e:	6809      	ldr	r1, [r1, #0]
 8000660:	185b      	adds	r3, r3, r1
 8000662:	6013      	str	r3, [r2, #0]
}
 8000664:	4770      	bx	lr
 8000666:	46c0      	nop			; (mov r8, r8)
 8000668:	20000d70 	.word	0x20000d70
 800066c:	20000000 	.word	0x20000000

08000670 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000670:	4b01      	ldr	r3, [pc, #4]	; (8000678 <HAL_GetTick+0x8>)
 8000672:	6818      	ldr	r0, [r3, #0]
}
 8000674:	4770      	bx	lr
 8000676:	46c0      	nop			; (mov r8, r8)
 8000678:	20000d70 	.word	0x20000d70

0800067c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800067c:	b570      	push	{r4, r5, r6, lr}
 800067e:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000680:	2800      	cmp	r0, #0
 8000682:	da14      	bge.n	80006ae <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000684:	230f      	movs	r3, #15
 8000686:	b2c0      	uxtb	r0, r0
 8000688:	4003      	ands	r3, r0
 800068a:	3b08      	subs	r3, #8
 800068c:	4a11      	ldr	r2, [pc, #68]	; (80006d4 <HAL_NVIC_SetPriority+0x58>)
 800068e:	089b      	lsrs	r3, r3, #2
 8000690:	009b      	lsls	r3, r3, #2
 8000692:	189b      	adds	r3, r3, r2
 8000694:	2203      	movs	r2, #3
 8000696:	4010      	ands	r0, r2
 8000698:	4090      	lsls	r0, r2
 800069a:	32fc      	adds	r2, #252	; 0xfc
 800069c:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800069e:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006a0:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80006a2:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006a4:	69dc      	ldr	r4, [r3, #28]
 80006a6:	43ac      	bics	r4, r5
 80006a8:	4321      	orrs	r1, r4
 80006aa:	61d9      	str	r1, [r3, #28]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80006ac:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006ae:	2503      	movs	r5, #3
 80006b0:	0883      	lsrs	r3, r0, #2
 80006b2:	4028      	ands	r0, r5
 80006b4:	40a8      	lsls	r0, r5
 80006b6:	35fc      	adds	r5, #252	; 0xfc
 80006b8:	002e      	movs	r6, r5
 80006ba:	4a07      	ldr	r2, [pc, #28]	; (80006d8 <HAL_NVIC_SetPriority+0x5c>)
 80006bc:	009b      	lsls	r3, r3, #2
 80006be:	189b      	adds	r3, r3, r2
 80006c0:	22c0      	movs	r2, #192	; 0xc0
 80006c2:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80006c4:	4029      	ands	r1, r5
 80006c6:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006c8:	0092      	lsls	r2, r2, #2
 80006ca:	589c      	ldr	r4, [r3, r2]
 80006cc:	43b4      	bics	r4, r6
 80006ce:	4321      	orrs	r1, r4
 80006d0:	5099      	str	r1, [r3, r2]
 80006d2:	e7eb      	b.n	80006ac <HAL_NVIC_SetPriority+0x30>
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	e000e100 	.word	0xe000e100

080006dc <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80006dc:	231f      	movs	r3, #31
 80006de:	4018      	ands	r0, r3
 80006e0:	3b1e      	subs	r3, #30
 80006e2:	4083      	lsls	r3, r0
 80006e4:	4a01      	ldr	r2, [pc, #4]	; (80006ec <HAL_NVIC_EnableIRQ+0x10>)
 80006e6:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80006e8:	4770      	bx	lr
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	e000e100 	.word	0xe000e100

080006f0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80006f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80006f2:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80006f4:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 80006f6:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80006f8:	6d04      	ldr	r4, [r0, #80]	; 0x50
 80006fa:	2c00      	cmp	r4, #0
 80006fc:	d002      	beq.n	8000704 <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80006fe:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8000700:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8000702:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8000704:	251c      	movs	r5, #28
 8000706:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8000708:	4e08      	ldr	r6, [pc, #32]	; (800072c <DMA_SetConfig+0x3c>)
 800070a:	4025      	ands	r5, r4
 800070c:	2401      	movs	r4, #1
 800070e:	40ac      	lsls	r4, r5
 8000710:	6877      	ldr	r7, [r6, #4]
 8000712:	433c      	orrs	r4, r7
 8000714:	6074      	str	r4, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000716:	6804      	ldr	r4, [r0, #0]
 8000718:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800071a:	6883      	ldr	r3, [r0, #8]
 800071c:	2b10      	cmp	r3, #16
 800071e:	d102      	bne.n	8000726 <DMA_SetConfig+0x36>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000720:	60a2      	str	r2, [r4, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000722:	60e1      	str	r1, [r4, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000724:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = SrcAddress;
 8000726:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 8000728:	60e2      	str	r2, [r4, #12]
}
 800072a:	e7fb      	b.n	8000724 <DMA_SetConfig+0x34>
 800072c:	40020000 	.word	0x40020000

08000730 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8000730:	b510      	push	{r4, lr}
 8000732:	0004      	movs	r4, r0
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8000734:	7800      	ldrb	r0, [r0, #0]
 8000736:	2114      	movs	r1, #20
 8000738:	3808      	subs	r0, #8
 800073a:	f7ff fcf9 	bl	8000130 <__udivsi3>
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800073e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000740:	4a06      	ldr	r2, [pc, #24]	; (800075c <DMA_CalcDMAMUXChannelBaseAndMask+0x2c>)
 8000742:	089b      	lsrs	r3, r3, #2
 8000744:	189b      	adds	r3, r3, r2
 8000746:	009b      	lsls	r3, r3, #2
 8000748:	6463      	str	r3, [r4, #68]	; 0x44
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800074a:	4b05      	ldr	r3, [pc, #20]	; (8000760 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>)
 800074c:	64a3      	str	r3, [r4, #72]	; 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 800074e:	231c      	movs	r3, #28
 8000750:	4018      	ands	r0, r3
 8000752:	3b1b      	subs	r3, #27
 8000754:	4083      	lsls	r3, r0
 8000756:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 8000758:	bd10      	pop	{r4, pc}
 800075a:	46c0      	nop			; (mov r8, r8)
 800075c:	10008200 	.word	0x10008200
 8000760:	40020880 	.word	0x40020880

08000764 <HAL_DMA_Init>:
{
 8000764:	b570      	push	{r4, r5, r6, lr}
 8000766:	0004      	movs	r4, r0
    return HAL_ERROR;
 8000768:	2001      	movs	r0, #1
  if (hdma == NULL)
 800076a:	2c00      	cmp	r4, #0
 800076c:	d048      	beq.n	8000800 <HAL_DMA_Init+0x9c>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800076e:	6825      	ldr	r5, [r4, #0]
 8000770:	4b26      	ldr	r3, [pc, #152]	; (800080c <HAL_DMA_Init+0xa8>)
 8000772:	2114      	movs	r1, #20
 8000774:	18e8      	adds	r0, r5, r3
 8000776:	f7ff fcdb 	bl	8000130 <__udivsi3>
  hdma->State = HAL_DMA_STATE_BUSY;
 800077a:	2302      	movs	r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800077c:	0080      	lsls	r0, r0, #2
  hdma->State = HAL_DMA_STATE_BUSY;
 800077e:	1da6      	adds	r6, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000780:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8000782:	77f3      	strb	r3, [r6, #31]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000784:	682b      	ldr	r3, [r5, #0]
 8000786:	4a22      	ldr	r2, [pc, #136]	; (8000810 <HAL_DMA_Init+0xac>)
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000788:	68e1      	ldr	r1, [r4, #12]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800078a:	4013      	ands	r3, r2
 800078c:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800078e:	68a3      	ldr	r3, [r4, #8]
 8000790:	682a      	ldr	r2, [r5, #0]
 8000792:	430b      	orrs	r3, r1
 8000794:	6921      	ldr	r1, [r4, #16]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000796:	0020      	movs	r0, r4
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000798:	430b      	orrs	r3, r1
 800079a:	6961      	ldr	r1, [r4, #20]
 800079c:	430b      	orrs	r3, r1
 800079e:	69a1      	ldr	r1, [r4, #24]
 80007a0:	430b      	orrs	r3, r1
 80007a2:	69e1      	ldr	r1, [r4, #28]
 80007a4:	430b      	orrs	r3, r1
 80007a6:	6a21      	ldr	r1, [r4, #32]
 80007a8:	430b      	orrs	r3, r1
 80007aa:	4313      	orrs	r3, r2
 80007ac:	602b      	str	r3, [r5, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80007ae:	f7ff ffbf 	bl	8000730 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80007b2:	2380      	movs	r3, #128	; 0x80
 80007b4:	68a2      	ldr	r2, [r4, #8]
 80007b6:	01db      	lsls	r3, r3, #7
 80007b8:	429a      	cmp	r2, r3
 80007ba:	d101      	bne.n	80007c0 <HAL_DMA_Init+0x5c>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80007bc:	2300      	movs	r3, #0
 80007be:	6063      	str	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80007c0:	6862      	ldr	r2, [r4, #4]
 80007c2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80007c4:	b2d3      	uxtb	r3, r2
 80007c6:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80007c8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80007ca:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80007cc:	3a01      	subs	r2, #1
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80007ce:	6048      	str	r0, [r1, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80007d0:	2a03      	cmp	r2, #3
 80007d2:	d816      	bhi.n	8000802 <HAL_DMA_Init+0x9e>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80007d4:	4a0f      	ldr	r2, [pc, #60]	; (8000814 <HAL_DMA_Init+0xb0>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80007d6:	4810      	ldr	r0, [pc, #64]	; (8000818 <HAL_DMA_Init+0xb4>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80007d8:	1899      	adds	r1, r3, r2

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80007da:	2203      	movs	r2, #3
 80007dc:	3b01      	subs	r3, #1
 80007de:	4013      	ands	r3, r2
 80007e0:	3a02      	subs	r2, #2
 80007e2:	409a      	lsls	r2, r3
 80007e4:	65a2      	str	r2, [r4, #88]	; 0x58
 80007e6:	0013      	movs	r3, r2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80007e8:	2200      	movs	r2, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80007ea:	0089      	lsls	r1, r1, #2
 80007ec:	6521      	str	r1, [r4, #80]	; 0x50
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80007ee:	6560      	str	r0, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80007f0:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80007f2:	6043      	str	r3, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80007f4:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 80007f6:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80007f8:	63e0      	str	r0, [r4, #60]	; 0x3c
  __HAL_UNLOCK(hdma);
 80007fa:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 80007fc:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hdma);
 80007fe:	77e0      	strb	r0, [r4, #31]
}
 8000800:	bd70      	pop	{r4, r5, r6, pc}
    hdma->DMAmuxRequestGen = 0U;
 8000802:	2300      	movs	r3, #0
 8000804:	6523      	str	r3, [r4, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8000806:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000808:	65a3      	str	r3, [r4, #88]	; 0x58
 800080a:	e7f3      	b.n	80007f4 <HAL_DMA_Init+0x90>
 800080c:	bffdfff8 	.word	0xbffdfff8
 8000810:	ffff800f 	.word	0xffff800f
 8000814:	1000823f 	.word	0x1000823f
 8000818:	40020940 	.word	0x40020940

0800081c <HAL_DMA_Start_IT>:
{
 800081c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 800081e:	1d46      	adds	r6, r0, #5
 8000820:	7ff5      	ldrb	r5, [r6, #31]
{
 8000822:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8000824:	2002      	movs	r0, #2
 8000826:	2d01      	cmp	r5, #1
 8000828:	d030      	beq.n	800088c <HAL_DMA_Start_IT+0x70>
 800082a:	2501      	movs	r5, #1
  if (HAL_DMA_STATE_READY == hdma->State)
 800082c:	1da7      	adds	r7, r4, #6
  __HAL_LOCK(hdma);
 800082e:	77f5      	strb	r5, [r6, #31]
  if (HAL_DMA_STATE_READY == hdma->State)
 8000830:	7ffd      	ldrb	r5, [r7, #31]
 8000832:	b2ed      	uxtb	r5, r5
 8000834:	2d01      	cmp	r5, #1
 8000836:	d127      	bne.n	8000888 <HAL_DMA_Start_IT+0x6c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8000838:	77f8      	strb	r0, [r7, #31]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800083a:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 800083c:	6827      	ldr	r7, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800083e:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8000840:	6838      	ldr	r0, [r7, #0]
 8000842:	43a8      	bics	r0, r5
 8000844:	6038      	str	r0, [r7, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000846:	0020      	movs	r0, r4
 8000848:	f7ff ff52 	bl	80006f0 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 800084c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800084e:	6823      	ldr	r3, [r4, #0]
 8000850:	2a00      	cmp	r2, #0
 8000852:	d01c      	beq.n	800088e <HAL_DMA_Start_IT+0x72>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000854:	220e      	movs	r2, #14
 8000856:	6819      	ldr	r1, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000858:	430a      	orrs	r2, r1
 800085a:	601a      	str	r2, [r3, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800085c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800085e:	6811      	ldr	r1, [r2, #0]
 8000860:	03c9      	lsls	r1, r1, #15
 8000862:	d504      	bpl.n	800086e <HAL_DMA_Start_IT+0x52>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8000864:	2180      	movs	r1, #128	; 0x80
 8000866:	6810      	ldr	r0, [r2, #0]
 8000868:	0049      	lsls	r1, r1, #1
 800086a:	4301      	orrs	r1, r0
 800086c:	6011      	str	r1, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 800086e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000870:	2a00      	cmp	r2, #0
 8000872:	d004      	beq.n	800087e <HAL_DMA_Start_IT+0x62>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8000874:	2180      	movs	r1, #128	; 0x80
 8000876:	6810      	ldr	r0, [r2, #0]
 8000878:	0049      	lsls	r1, r1, #1
 800087a:	4301      	orrs	r1, r0
 800087c:	6011      	str	r1, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 800087e:	2201      	movs	r2, #1
  HAL_StatusTypeDef status = HAL_OK;
 8000880:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8000882:	6819      	ldr	r1, [r3, #0]
 8000884:	430a      	orrs	r2, r1
 8000886:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hdma);
 8000888:	2300      	movs	r3, #0
 800088a:	77f3      	strb	r3, [r6, #31]
}
 800088c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800088e:	2104      	movs	r1, #4
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	438a      	bics	r2, r1
 8000894:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000896:	6819      	ldr	r1, [r3, #0]
 8000898:	220a      	movs	r2, #10
 800089a:	e7dd      	b.n	8000858 <HAL_DMA_Start_IT+0x3c>

0800089c <HAL_DMA_Abort_IT>:
{
 800089c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 800089e:	2301      	movs	r3, #1
 80008a0:	1d41      	adds	r1, r0, #5
 80008a2:	77cb      	strb	r3, [r1, #31]
  if (HAL_DMA_STATE_BUSY != hdma->State)
 80008a4:	1d84      	adds	r4, r0, #6
 80008a6:	7fe2      	ldrb	r2, [r4, #31]
 80008a8:	2a02      	cmp	r2, #2
 80008aa:	d003      	beq.n	80008b4 <HAL_DMA_Abort_IT+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008ac:	2204      	movs	r2, #4
 80008ae:	63c2      	str	r2, [r0, #60]	; 0x3c
}
 80008b0:	0018      	movs	r0, r3
 80008b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80008b4:	260e      	movs	r6, #14
 80008b6:	6802      	ldr	r2, [r0, #0]
 80008b8:	6815      	ldr	r5, [r2, #0]
 80008ba:	43b5      	bics	r5, r6
 80008bc:	6015      	str	r5, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80008be:	6815      	ldr	r5, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80008c0:	6c46      	ldr	r6, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE(hdma);
 80008c2:	439d      	bics	r5, r3
 80008c4:	6015      	str	r5, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80008c6:	6832      	ldr	r2, [r6, #0]
 80008c8:	4d11      	ldr	r5, [pc, #68]	; (8000910 <HAL_DMA_Abort_IT+0x74>)
 80008ca:	402a      	ands	r2, r5
 80008cc:	6032      	str	r2, [r6, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 80008ce:	221c      	movs	r2, #28
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80008d0:	46ac      	mov	ip, r5
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 80008d2:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80008d4:	4e0f      	ldr	r6, [pc, #60]	; (8000914 <HAL_DMA_Abort_IT+0x78>)
 80008d6:	402a      	ands	r2, r5
 80008d8:	4093      	lsls	r3, r2
 80008da:	6877      	ldr	r7, [r6, #4]
 80008dc:	433b      	orrs	r3, r7
 80008de:	6073      	str	r3, [r6, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80008e0:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80008e2:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80008e4:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80008e6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d006      	beq.n	80008fa <HAL_DMA_Abort_IT+0x5e>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80008ec:	4665      	mov	r5, ip
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	402a      	ands	r2, r5
 80008f2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80008f4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80008f6:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80008f8:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80008fa:	2301      	movs	r3, #1
 80008fc:	77e3      	strb	r3, [r4, #31]
    __HAL_UNLOCK(hdma);
 80008fe:	2400      	movs	r4, #0
    if (hdma->XferAbortCallback != NULL)
 8000900:	6b82      	ldr	r2, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8000902:	77cc      	strb	r4, [r1, #31]
  HAL_StatusTypeDef status = HAL_OK;
 8000904:	0013      	movs	r3, r2
    if (hdma->XferAbortCallback != NULL)
 8000906:	42a2      	cmp	r2, r4
 8000908:	d0d2      	beq.n	80008b0 <HAL_DMA_Abort_IT+0x14>
      hdma->XferAbortCallback(hdma);
 800090a:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 800090c:	0023      	movs	r3, r4
 800090e:	e7cf      	b.n	80008b0 <HAL_DMA_Abort_IT+0x14>
 8000910:	fffffeff 	.word	0xfffffeff
 8000914:	40020000 	.word	0x40020000

08000918 <HAL_DMA_IRQHandler>:
{
 8000918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800091a:	211c      	movs	r1, #28
 800091c:	2704      	movs	r7, #4
 800091e:	6c04      	ldr	r4, [r0, #64]	; 0x40
  uint32_t flag_it = DMA1->ISR;
 8000920:	4b26      	ldr	r3, [pc, #152]	; (80009bc <HAL_DMA_IRQHandler+0xa4>)
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000922:	4021      	ands	r1, r4
 8000924:	003c      	movs	r4, r7
 8000926:	408c      	lsls	r4, r1
  uint32_t flag_it = DMA1->ISR;
 8000928:	681e      	ldr	r6, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800092a:	6802      	ldr	r2, [r0, #0]
 800092c:	6815      	ldr	r5, [r2, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800092e:	4234      	tst	r4, r6
 8000930:	d00f      	beq.n	8000952 <HAL_DMA_IRQHandler+0x3a>
 8000932:	423d      	tst	r5, r7
 8000934:	d00d      	beq.n	8000952 <HAL_DMA_IRQHandler+0x3a>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000936:	6811      	ldr	r1, [r2, #0]
 8000938:	0689      	lsls	r1, r1, #26
 800093a:	d402      	bmi.n	8000942 <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800093c:	6811      	ldr	r1, [r2, #0]
 800093e:	43b9      	bics	r1, r7
 8000940:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8000942:	685a      	ldr	r2, [r3, #4]
 8000944:	4314      	orrs	r4, r2
 8000946:	605c      	str	r4, [r3, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8000948:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800094a:	2b00      	cmp	r3, #0
 800094c:	d01b      	beq.n	8000986 <HAL_DMA_IRQHandler+0x6e>
      hdma->XferErrorCallback(hdma);
 800094e:	4798      	blx	r3
  return;
 8000950:	e019      	b.n	8000986 <HAL_DMA_IRQHandler+0x6e>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8000952:	2702      	movs	r7, #2
 8000954:	003c      	movs	r4, r7
 8000956:	408c      	lsls	r4, r1
 8000958:	4234      	tst	r4, r6
 800095a:	d015      	beq.n	8000988 <HAL_DMA_IRQHandler+0x70>
 800095c:	423d      	tst	r5, r7
 800095e:	d013      	beq.n	8000988 <HAL_DMA_IRQHandler+0x70>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000960:	6811      	ldr	r1, [r2, #0]
 8000962:	0689      	lsls	r1, r1, #26
 8000964:	d406      	bmi.n	8000974 <HAL_DMA_IRQHandler+0x5c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000966:	250a      	movs	r5, #10
 8000968:	6811      	ldr	r1, [r2, #0]
 800096a:	43a9      	bics	r1, r5
 800096c:	6011      	str	r1, [r2, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800096e:	2101      	movs	r1, #1
 8000970:	1d82      	adds	r2, r0, #6
 8000972:	77d1      	strb	r1, [r2, #31]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 8000974:	685a      	ldr	r2, [r3, #4]
 8000976:	4314      	orrs	r4, r2
    __HAL_UNLOCK(hdma);
 8000978:	2200      	movs	r2, #0
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 800097a:	605c      	str	r4, [r3, #4]
    __HAL_UNLOCK(hdma);
 800097c:	1d43      	adds	r3, r0, #5
 800097e:	77da      	strb	r2, [r3, #31]
    if (hdma->XferCpltCallback != NULL)
 8000980:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8000982:	4293      	cmp	r3, r2
 8000984:	d1e3      	bne.n	800094e <HAL_DMA_IRQHandler+0x36>
}
 8000986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8000988:	2408      	movs	r4, #8
 800098a:	0027      	movs	r7, r4
 800098c:	408f      	lsls	r7, r1
 800098e:	423e      	tst	r6, r7
 8000990:	d0f9      	beq.n	8000986 <HAL_DMA_IRQHandler+0x6e>
 8000992:	4225      	tst	r5, r4
 8000994:	d0f7      	beq.n	8000986 <HAL_DMA_IRQHandler+0x6e>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000996:	250e      	movs	r5, #14
 8000998:	6814      	ldr	r4, [r2, #0]
 800099a:	43ac      	bics	r4, r5
 800099c:	6014      	str	r4, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex& 0x1cU)));
 800099e:	2201      	movs	r2, #1
 80009a0:	0015      	movs	r5, r2
 80009a2:	408d      	lsls	r5, r1
 80009a4:	0029      	movs	r1, r5
 80009a6:	685c      	ldr	r4, [r3, #4]
 80009a8:	4321      	orrs	r1, r4
 80009aa:	6059      	str	r1, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80009ac:	1d83      	adds	r3, r0, #6
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80009ae:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80009b0:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 80009b2:	2200      	movs	r2, #0
 80009b4:	1d43      	adds	r3, r0, #5
 80009b6:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 80009b8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80009ba:	e7e2      	b.n	8000982 <HAL_DMA_IRQHandler+0x6a>
 80009bc:	40020000 	.word	0x40020000

080009c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009c2:	680b      	ldr	r3, [r1, #0]
{
 80009c4:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009c6:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00u;
 80009c8:	2300      	movs	r3, #0
{
 80009ca:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009cc:	9a02      	ldr	r2, [sp, #8]
 80009ce:	40da      	lsrs	r2, r3
 80009d0:	d101      	bne.n	80009d6 <HAL_GPIO_Init+0x16>
      }
    }

    position++;
  }
}
 80009d2:	b005      	add	sp, #20
 80009d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009d6:	2201      	movs	r2, #1
 80009d8:	409a      	lsls	r2, r3
 80009da:	9203      	str	r2, [sp, #12]
 80009dc:	9903      	ldr	r1, [sp, #12]
 80009de:	9a02      	ldr	r2, [sp, #8]
 80009e0:	400a      	ands	r2, r1
 80009e2:	9200      	str	r2, [sp, #0]
    if (iocurrent != 0x00u)
 80009e4:	d100      	bne.n	80009e8 <HAL_GPIO_Init+0x28>
 80009e6:	e085      	b.n	8000af4 <HAL_GPIO_Init+0x134>
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009e8:	9a01      	ldr	r2, [sp, #4]
 80009ea:	2110      	movs	r1, #16
 80009ec:	6852      	ldr	r2, [r2, #4]
 80009ee:	0016      	movs	r6, r2
 80009f0:	438e      	bics	r6, r1
 80009f2:	2e02      	cmp	r6, #2
 80009f4:	d10e      	bne.n	8000a14 <HAL_GPIO_Init+0x54>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009f6:	2507      	movs	r5, #7
 80009f8:	401d      	ands	r5, r3
 80009fa:	00ad      	lsls	r5, r5, #2
 80009fc:	3901      	subs	r1, #1
 80009fe:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3u];
 8000a00:	08dc      	lsrs	r4, r3, #3
 8000a02:	00a4      	lsls	r4, r4, #2
 8000a04:	1904      	adds	r4, r0, r4
 8000a06:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a08:	438f      	bics	r7, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a0a:	9901      	ldr	r1, [sp, #4]
 8000a0c:	6909      	ldr	r1, [r1, #16]
 8000a0e:	40a9      	lsls	r1, r5
 8000a10:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3u] = temp;
 8000a12:	6227      	str	r7, [r4, #32]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a14:	2403      	movs	r4, #3
 8000a16:	005f      	lsls	r7, r3, #1
 8000a18:	40bc      	lsls	r4, r7
 8000a1a:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 8000a1c:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a1e:	3e01      	subs	r6, #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a20:	4025      	ands	r5, r4
 8000a22:	46ac      	mov	ip, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a24:	2503      	movs	r5, #3
 8000a26:	4015      	ands	r5, r2
 8000a28:	40bd      	lsls	r5, r7
 8000a2a:	4661      	mov	r1, ip
 8000a2c:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 8000a2e:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a30:	2e01      	cmp	r6, #1
 8000a32:	d80f      	bhi.n	8000a54 <HAL_GPIO_Init+0x94>
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a34:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR;
 8000a36:	6886      	ldr	r6, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a38:	68cd      	ldr	r5, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000a3a:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a3c:	40bd      	lsls	r5, r7
 8000a3e:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8000a40:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8000a42:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a44:	9903      	ldr	r1, [sp, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000a46:	0915      	lsrs	r5, r2, #4
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a48:	438e      	bics	r6, r1
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	400d      	ands	r5, r1
 8000a4e:	409d      	lsls	r5, r3
 8000a50:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8000a52:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 8000a54:	68c5      	ldr	r5, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a56:	9901      	ldr	r1, [sp, #4]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000a58:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a5a:	688d      	ldr	r5, [r1, #8]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a5c:	2180      	movs	r1, #128	; 0x80
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a5e:	40bd      	lsls	r5, r7
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a60:	0549      	lsls	r1, r1, #21
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a62:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8000a64:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a66:	420a      	tst	r2, r1
 8000a68:	d044      	beq.n	8000af4 <HAL_GPIO_Init+0x134>
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000a6a:	2603      	movs	r6, #3
 8000a6c:	240f      	movs	r4, #15
 8000a6e:	4922      	ldr	r1, [pc, #136]	; (8000af8 <HAL_GPIO_Init+0x138>)
        temp = EXTI->EXTICR[position >> 2u];
 8000a70:	089d      	lsrs	r5, r3, #2
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000a72:	401e      	ands	r6, r3
 8000a74:	00ad      	lsls	r5, r5, #2
 8000a76:	00f6      	lsls	r6, r6, #3
 8000a78:	186d      	adds	r5, r5, r1
 8000a7a:	40b4      	lsls	r4, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000a7c:	21a0      	movs	r1, #160	; 0xa0
        temp = EXTI->EXTICR[position >> 2u];
 8000a7e:	6e2f      	ldr	r7, [r5, #96]	; 0x60
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000a80:	05c9      	lsls	r1, r1, #23
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000a82:	43a7      	bics	r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000a84:	2400      	movs	r4, #0
 8000a86:	4288      	cmp	r0, r1
 8000a88:	d00c      	beq.n	8000aa4 <HAL_GPIO_Init+0xe4>
 8000a8a:	491c      	ldr	r1, [pc, #112]	; (8000afc <HAL_GPIO_Init+0x13c>)
 8000a8c:	3401      	adds	r4, #1
 8000a8e:	4288      	cmp	r0, r1
 8000a90:	d008      	beq.n	8000aa4 <HAL_GPIO_Init+0xe4>
 8000a92:	491b      	ldr	r1, [pc, #108]	; (8000b00 <HAL_GPIO_Init+0x140>)
 8000a94:	3401      	adds	r4, #1
 8000a96:	4288      	cmp	r0, r1
 8000a98:	d004      	beq.n	8000aa4 <HAL_GPIO_Init+0xe4>
 8000a9a:	491a      	ldr	r1, [pc, #104]	; (8000b04 <HAL_GPIO_Init+0x144>)
 8000a9c:	3403      	adds	r4, #3
 8000a9e:	4288      	cmp	r0, r1
 8000aa0:	d100      	bne.n	8000aa4 <HAL_GPIO_Init+0xe4>
 8000aa2:	3c02      	subs	r4, #2
 8000aa4:	40b4      	lsls	r4, r6
        temp &= ~(iocurrent);
 8000aa6:	9900      	ldr	r1, [sp, #0]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000aa8:	433c      	orrs	r4, r7
          temp |= iocurrent;
 8000aaa:	000e      	movs	r6, r1
        EXTI->EXTICR[position >> 2u] = temp;
 8000aac:	662c      	str	r4, [r5, #96]	; 0x60
        temp = EXTI->IMR1;
 8000aae:	4c16      	ldr	r4, [pc, #88]	; (8000b08 <HAL_GPIO_Init+0x148>)
        temp &= ~(iocurrent);
 8000ab0:	43cd      	mvns	r5, r1
        temp = EXTI->IMR1;
 8000ab2:	6fe7      	ldr	r7, [r4, #124]	; 0x7c
          temp |= iocurrent;
 8000ab4:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ab6:	03d1      	lsls	r1, r2, #15
 8000ab8:	d401      	bmi.n	8000abe <HAL_GPIO_Init+0xfe>
        temp &= ~(iocurrent);
 8000aba:	003e      	movs	r6, r7
 8000abc:	402e      	ands	r6, r5
        EXTI->IMR1 = temp;
 8000abe:	67e6      	str	r6, [r4, #124]	; 0x7c
        temp = EXTI->EMR1;
 8000ac0:	4e12      	ldr	r6, [pc, #72]	; (8000b0c <HAL_GPIO_Init+0x14c>)
          temp |= iocurrent;
 8000ac2:	9f00      	ldr	r7, [sp, #0]
        temp = EXTI->EMR1;
 8000ac4:	6ff4      	ldr	r4, [r6, #124]	; 0x7c
          temp |= iocurrent;
 8000ac6:	4327      	orrs	r7, r4
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ac8:	0391      	lsls	r1, r2, #14
 8000aca:	d401      	bmi.n	8000ad0 <HAL_GPIO_Init+0x110>
        temp &= ~(iocurrent);
 8000acc:	402c      	ands	r4, r5
 8000ace:	0027      	movs	r7, r4
        EXTI->EMR1 = temp;
 8000ad0:	4c09      	ldr	r4, [pc, #36]	; (8000af8 <HAL_GPIO_Init+0x138>)
 8000ad2:	67f7      	str	r7, [r6, #124]	; 0x7c
        temp = EXTI->RTSR1;
 8000ad4:	6827      	ldr	r7, [r4, #0]
          temp |= iocurrent;
 8000ad6:	9e00      	ldr	r6, [sp, #0]
 8000ad8:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ada:	02d1      	lsls	r1, r2, #11
 8000adc:	d401      	bmi.n	8000ae2 <HAL_GPIO_Init+0x122>
        temp &= ~(iocurrent);
 8000ade:	003e      	movs	r6, r7
 8000ae0:	402e      	ands	r6, r5
        EXTI->RTSR1 = temp;
 8000ae2:	6026      	str	r6, [r4, #0]
        temp = EXTI->FTSR1;
 8000ae4:	6866      	ldr	r6, [r4, #4]
          temp |= iocurrent;
 8000ae6:	9f00      	ldr	r7, [sp, #0]
 8000ae8:	4337      	orrs	r7, r6
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000aea:	0292      	lsls	r2, r2, #10
 8000aec:	d401      	bmi.n	8000af2 <HAL_GPIO_Init+0x132>
        temp &= ~(iocurrent);
 8000aee:	402e      	ands	r6, r5
 8000af0:	0037      	movs	r7, r6
        EXTI->FTSR1 = temp;
 8000af2:	6067      	str	r7, [r4, #4]
    position++;
 8000af4:	3301      	adds	r3, #1
 8000af6:	e769      	b.n	80009cc <HAL_GPIO_Init+0xc>
 8000af8:	40021800 	.word	0x40021800
 8000afc:	50000400 	.word	0x50000400
 8000b00:	50000800 	.word	0x50000800
 8000b04:	50000c00 	.word	0x50000c00
 8000b08:	40021804 	.word	0x40021804
 8000b0c:	40021808 	.word	0x40021808

08000b10 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b10:	2a00      	cmp	r2, #0
 8000b12:	d001      	beq.n	8000b18 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b14:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b16:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b18:	6281      	str	r1, [r0, #40]	; 0x28
}
 8000b1a:	e7fc      	b.n	8000b16 <HAL_GPIO_WritePin+0x6>

08000b1c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000b1c:	6803      	ldr	r3, [r0, #0]
 8000b1e:	699a      	ldr	r2, [r3, #24]
 8000b20:	0792      	lsls	r2, r2, #30
 8000b22:	d501      	bpl.n	8000b28 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8000b24:	2200      	movs	r2, #0
 8000b26:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	6999      	ldr	r1, [r3, #24]
 8000b2c:	4211      	tst	r1, r2
 8000b2e:	d102      	bne.n	8000b36 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000b30:	6999      	ldr	r1, [r3, #24]
 8000b32:	430a      	orrs	r2, r1
 8000b34:	619a      	str	r2, [r3, #24]
  }
}
 8000b36:	4770      	bx	lr

08000b38 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8000b38:	b570      	push	{r4, r5, r6, lr}
 8000b3a:	9e04      	ldr	r6, [sp, #16]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8000b3c:	0589      	lsls	r1, r1, #22
 8000b3e:	4333      	orrs	r3, r6
 8000b40:	0d89      	lsrs	r1, r1, #22
 8000b42:	4319      	orrs	r1, r3
 8000b44:	2380      	movs	r3, #128	; 0x80
 8000b46:	6804      	ldr	r4, [r0, #0]
 8000b48:	00db      	lsls	r3, r3, #3
 8000b4a:	0d70      	lsrs	r0, r6, #21
 8000b4c:	4018      	ands	r0, r3
 8000b4e:	4b04      	ldr	r3, [pc, #16]	; (8000b60 <I2C_TransferConfig+0x28>)
 8000b50:	6865      	ldr	r5, [r4, #4]
 8000b52:	0412      	lsls	r2, r2, #16
 8000b54:	4318      	orrs	r0, r3
 8000b56:	4385      	bics	r5, r0
 8000b58:	4311      	orrs	r1, r2
 8000b5a:	4329      	orrs	r1, r5
 8000b5c:	6061      	str	r1, [r4, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8000b5e:	bd70      	pop	{r4, r5, r6, pc}
 8000b60:	03ff63ff 	.word	0x03ff63ff

08000b64 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8000b64:	b510      	push	{r4, lr}
  uint32_t tmpisr = 0U;

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8000b66:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000b68:	4c16      	ldr	r4, [pc, #88]	; (8000bc4 <I2C_Enable_IRQ+0x60>)
 8000b6a:	2204      	movs	r2, #4
 8000b6c:	42a3      	cmp	r3, r4
 8000b6e:	d002      	beq.n	8000b76 <I2C_Enable_IRQ+0x12>
 8000b70:	4c15      	ldr	r4, [pc, #84]	; (8000bc8 <I2C_Enable_IRQ+0x64>)
 8000b72:	42a3      	cmp	r3, r4
 8000b74:	d114      	bne.n	8000ba0 <I2C_Enable_IRQ+0x3c>
  uint32_t tmpisr = 0U;
 8000b76:	2300      	movs	r3, #0
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8000b78:	4211      	tst	r1, r2
 8000b7a:	d000      	beq.n	8000b7e <I2C_Enable_IRQ+0x1a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000b7c:	33b8      	adds	r3, #184	; 0xb8
    }

    if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8000b7e:	2211      	movs	r2, #17
 8000b80:	400a      	ands	r2, r1
 8000b82:	2a11      	cmp	r2, #17
 8000b84:	d101      	bne.n	8000b8a <I2C_Enable_IRQ+0x26>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8000b86:	327f      	adds	r2, #127	; 0x7f
 8000b88:	4313      	orrs	r3, r2
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8000b8a:	2212      	movs	r2, #18
 8000b8c:	4011      	ands	r1, r2
 8000b8e:	4291      	cmp	r1, r2
 8000b90:	d101      	bne.n	8000b96 <I2C_Enable_IRQ+0x32>
    }

    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8000b92:	324e      	adds	r2, #78	; 0x4e
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8000b94:	4313      	orrs	r3, r2
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8000b96:	6802      	ldr	r2, [r0, #0]
 8000b98:	6811      	ldr	r1, [r2, #0]
 8000b9a:	430b      	orrs	r3, r1
 8000b9c:	6013      	str	r3, [r2, #0]
}
 8000b9e:	bd10      	pop	{r4, pc}
  uint32_t tmpisr = 0U;
 8000ba0:	2300      	movs	r3, #0
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8000ba2:	4211      	tst	r1, r2
 8000ba4:	d000      	beq.n	8000ba8 <I2C_Enable_IRQ+0x44>
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000ba6:	33b8      	adds	r3, #184	; 0xb8
    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8000ba8:	07ca      	lsls	r2, r1, #31
 8000baa:	d501      	bpl.n	8000bb0 <I2C_Enable_IRQ+0x4c>
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8000bac:	22f2      	movs	r2, #242	; 0xf2
 8000bae:	4313      	orrs	r3, r2
    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8000bb0:	078a      	lsls	r2, r1, #30
 8000bb2:	d501      	bpl.n	8000bb8 <I2C_Enable_IRQ+0x54>
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8000bb4:	22f4      	movs	r2, #244	; 0xf4
 8000bb6:	4313      	orrs	r3, r2
    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8000bb8:	2212      	movs	r2, #18
 8000bba:	4011      	ands	r1, r2
 8000bbc:	4291      	cmp	r1, r2
 8000bbe:	d1ea      	bne.n	8000b96 <I2C_Enable_IRQ+0x32>
      tmpisr |= I2C_IT_STOPI;
 8000bc0:	320e      	adds	r2, #14
 8000bc2:	e7e7      	b.n	8000b94 <I2C_Enable_IRQ+0x30>
 8000bc4:	080016c1 	.word	0x080016c1
 8000bc8:	080015e1 	.word	0x080015e1

08000bcc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8000bcc:	b510      	push	{r4, lr}
  uint32_t tmpisr = 0U;
 8000bce:	2300      	movs	r3, #0

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8000bd0:	07ca      	lsls	r2, r1, #31
 8000bd2:	d508      	bpl.n	8000be6 <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8000bd4:	0003      	movs	r3, r0
 8000bd6:	3341      	adds	r3, #65	; 0x41
 8000bd8:	781a      	ldrb	r2, [r3, #0]
 8000bda:	2328      	movs	r3, #40	; 0x28
 8000bdc:	401a      	ands	r2, r3
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8000bde:	331a      	adds	r3, #26
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8000be0:	2a28      	cmp	r2, #40	; 0x28
 8000be2:	d000      	beq.n	8000be6 <I2C_Disable_IRQ+0x1a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000be4:	33b0      	adds	r3, #176	; 0xb0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8000be6:	078a      	lsls	r2, r1, #30
 8000be8:	d508      	bpl.n	8000bfc <I2C_Disable_IRQ+0x30>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8000bea:	0002      	movs	r2, r0
 8000bec:	2428      	movs	r4, #40	; 0x28
 8000bee:	3241      	adds	r2, #65	; 0x41
 8000bf0:	7812      	ldrb	r2, [r2, #0]
 8000bf2:	4022      	ands	r2, r4
 8000bf4:	42a2      	cmp	r2, r4
 8000bf6:	d116      	bne.n	8000c26 <I2C_Disable_IRQ+0x5a>
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8000bf8:	2244      	movs	r2, #68	; 0x44
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000bfa:	4313      	orrs	r3, r2
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8000bfc:	074a      	lsls	r2, r1, #29
 8000bfe:	d501      	bpl.n	8000c04 <I2C_Disable_IRQ+0x38>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000c00:	22b8      	movs	r2, #184	; 0xb8
 8000c02:	4313      	orrs	r3, r2
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8000c04:	2211      	movs	r2, #17
 8000c06:	400a      	ands	r2, r1
 8000c08:	2a11      	cmp	r2, #17
 8000c0a:	d101      	bne.n	8000c10 <I2C_Disable_IRQ+0x44>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8000c0c:	327f      	adds	r2, #127	; 0x7f
 8000c0e:	4313      	orrs	r3, r2
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8000c10:	2212      	movs	r2, #18
 8000c12:	4011      	ands	r1, r2
 8000c14:	4291      	cmp	r1, r2
 8000c16:	d101      	bne.n	8000c1c <I2C_Disable_IRQ+0x50>
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8000c18:	324e      	adds	r2, #78	; 0x4e
 8000c1a:	4313      	orrs	r3, r2
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8000c1c:	6801      	ldr	r1, [r0, #0]
 8000c1e:	680a      	ldr	r2, [r1, #0]
 8000c20:	439a      	bics	r2, r3
 8000c22:	600a      	str	r2, [r1, #0]
}
 8000c24:	bd10      	pop	{r4, pc}
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000c26:	22f4      	movs	r2, #244	; 0xf4
 8000c28:	e7e7      	b.n	8000bfa <I2C_Disable_IRQ+0x2e>
	...

08000c2c <HAL_I2C_Init>:
{
 8000c2c:	b570      	push	{r4, r5, r6, lr}
 8000c2e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8000c30:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8000c32:	2c00      	cmp	r4, #0
 8000c34:	d03f      	beq.n	8000cb6 <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000c36:	0025      	movs	r5, r4
 8000c38:	3541      	adds	r5, #65	; 0x41
 8000c3a:	782b      	ldrb	r3, [r5, #0]
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d105      	bne.n	8000c4e <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 8000c42:	0022      	movs	r2, r4
 8000c44:	3240      	adds	r2, #64	; 0x40
 8000c46:	7013      	strb	r3, [r2, #0]
    HAL_I2C_MspInit(hi2c);
 8000c48:	0020      	movs	r0, r4
 8000c4a:	f003 fd25 	bl	8004698 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000c4e:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8000c50:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000c52:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8000c54:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000c56:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	68a6      	ldr	r6, [r4, #8]
 8000c5c:	438a      	bics	r2, r1
 8000c5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000c60:	6861      	ldr	r1, [r4, #4]
 8000c62:	4a1a      	ldr	r2, [pc, #104]	; (8000ccc <HAL_I2C_Init+0xa0>)
 8000c64:	400a      	ands	r2, r1
 8000c66:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000c68:	6899      	ldr	r1, [r3, #8]
 8000c6a:	4a19      	ldr	r2, [pc, #100]	; (8000cd0 <HAL_I2C_Init+0xa4>)
 8000c6c:	4011      	ands	r1, r2
 8000c6e:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000c70:	2801      	cmp	r0, #1
 8000c72:	d121      	bne.n	8000cb8 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000c74:	2180      	movs	r1, #128	; 0x80
 8000c76:	0209      	lsls	r1, r1, #8
 8000c78:	4331      	orrs	r1, r6
 8000c7a:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000c7c:	6858      	ldr	r0, [r3, #4]
 8000c7e:	4915      	ldr	r1, [pc, #84]	; (8000cd4 <HAL_I2C_Init+0xa8>)
 8000c80:	4301      	orrs	r1, r0
 8000c82:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000c84:	68d9      	ldr	r1, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c86:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000c88:	400a      	ands	r2, r1
 8000c8a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000c8c:	6961      	ldr	r1, [r4, #20]
 8000c8e:	6922      	ldr	r2, [r4, #16]
 8000c90:	430a      	orrs	r2, r1
 8000c92:	69a1      	ldr	r1, [r4, #24]
 8000c94:	0209      	lsls	r1, r1, #8
 8000c96:	430a      	orrs	r2, r1
 8000c98:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000c9a:	6a21      	ldr	r1, [r4, #32]
 8000c9c:	69e2      	ldr	r2, [r4, #28]
 8000c9e:	430a      	orrs	r2, r1
 8000ca0:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	6819      	ldr	r1, [r3, #0]
 8000ca6:	430a      	orrs	r2, r1
 8000ca8:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8000caa:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000cac:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000cae:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000cb0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000cb2:	3442      	adds	r4, #66	; 0x42
 8000cb4:	7020      	strb	r0, [r4, #0]
}
 8000cb6:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000cb8:	2184      	movs	r1, #132	; 0x84
 8000cba:	0209      	lsls	r1, r1, #8
 8000cbc:	4331      	orrs	r1, r6
 8000cbe:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000cc0:	2802      	cmp	r0, #2
 8000cc2:	d1db      	bne.n	8000c7c <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000cc4:	2180      	movs	r1, #128	; 0x80
 8000cc6:	0109      	lsls	r1, r1, #4
 8000cc8:	6059      	str	r1, [r3, #4]
 8000cca:	e7d7      	b.n	8000c7c <HAL_I2C_Init+0x50>
 8000ccc:	f0ffffff 	.word	0xf0ffffff
 8000cd0:	ffff7fff 	.word	0xffff7fff
 8000cd4:	02008000 	.word	0x02008000

08000cd8 <HAL_I2C_Master_Transmit_DMA>:
{
 8000cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cda:	b087      	sub	sp, #28
 8000cdc:	0004      	movs	r4, r0
 8000cde:	9105      	str	r1, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ce0:	3041      	adds	r0, #65	; 0x41
{
 8000ce2:	4694      	mov	ip, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ce4:	7802      	ldrb	r2, [r0, #0]
    return HAL_BUSY;
 8000ce6:	2502      	movs	r5, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ce8:	2a20      	cmp	r2, #32
 8000cea:	d153      	bne.n	8000d94 <HAL_I2C_Master_Transmit_DMA+0xbc>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8000cec:	2180      	movs	r1, #128	; 0x80
 8000cee:	6822      	ldr	r2, [r4, #0]
 8000cf0:	0209      	lsls	r1, r1, #8
 8000cf2:	6996      	ldr	r6, [r2, #24]
 8000cf4:	4031      	ands	r1, r6
 8000cf6:	d14d      	bne.n	8000d94 <HAL_I2C_Master_Transmit_DMA+0xbc>
    __HAL_LOCK(hi2c);
 8000cf8:	0026      	movs	r6, r4
 8000cfa:	3640      	adds	r6, #64	; 0x40
 8000cfc:	7837      	ldrb	r7, [r6, #0]
 8000cfe:	2f01      	cmp	r7, #1
 8000d00:	d048      	beq.n	8000d94 <HAL_I2C_Master_Transmit_DMA+0xbc>
 8000d02:	3d01      	subs	r5, #1
 8000d04:	7035      	strb	r5, [r6, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000d06:	3520      	adds	r5, #32
 8000d08:	7005      	strb	r5, [r0, #0]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000d0a:	3001      	adds	r0, #1
 8000d0c:	9003      	str	r0, [sp, #12]
 8000d0e:	2010      	movs	r0, #16
 8000d10:	9d03      	ldr	r5, [sp, #12]
 8000d12:	7028      	strb	r0, [r5, #0]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000d14:	6461      	str	r1, [r4, #68]	; 0x44
    hi2c->pBuffPtr    = pData;
 8000d16:	4661      	mov	r1, ip
    hi2c->XferCount   = Size;
 8000d18:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000d1a:	4b37      	ldr	r3, [pc, #220]	; (8000df8 <HAL_I2C_Master_Transmit_DMA+0x120>)
    hi2c->pBuffPtr    = pData;
 8000d1c:	6261      	str	r1, [r4, #36]	; 0x24
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000d1e:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8000d20:	4b36      	ldr	r3, [pc, #216]	; (8000dfc <HAL_I2C_Master_Transmit_DMA+0x124>)
 8000d22:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000d24:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000d26:	2bff      	cmp	r3, #255	; 0xff
 8000d28:	d937      	bls.n	8000d9a <HAL_I2C_Master_Transmit_DMA+0xc2>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000d2a:	23ff      	movs	r3, #255	; 0xff
 8000d2c:	8523      	strh	r3, [r4, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8000d2e:	2380      	movs	r3, #128	; 0x80
 8000d30:	045b      	lsls	r3, r3, #17
 8000d32:	0027      	movs	r7, r4
    if (hi2c->XferSize > 0U)
 8000d34:	8d25      	ldrh	r5, [r4, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8000d36:	9304      	str	r3, [sp, #16]
 8000d38:	3740      	adds	r7, #64	; 0x40
    if (hi2c->XferSize > 0U)
 8000d3a:	2d00      	cmp	r5, #0
 8000d3c:	d04b      	beq.n	8000dd6 <HAL_I2C_Master_Transmit_DMA+0xfe>
      if (hi2c->hdmatx != NULL)
 8000d3e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000d40:	2800      	cmp	r0, #0
 8000d42:	d02f      	beq.n	8000da4 <HAL_I2C_Master_Transmit_DMA+0xcc>
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8000d44:	2600      	movs	r6, #0
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8000d46:	4b2e      	ldr	r3, [pc, #184]	; (8000e00 <HAL_I2C_Master_Transmit_DMA+0x128>)
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8000d48:	6306      	str	r6, [r0, #48]	; 0x30
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8000d4a:	62c3      	str	r3, [r0, #44]	; 0x2c
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8000d4c:	4b2d      	ldr	r3, [pc, #180]	; (8000e04 <HAL_I2C_Master_Transmit_DMA+0x12c>)
        hi2c->hdmatx->XferAbortCallback = NULL;
 8000d4e:	6386      	str	r6, [r0, #56]	; 0x38
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8000d50:	6343      	str	r3, [r0, #52]	; 0x34
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8000d52:	3228      	adds	r2, #40	; 0x28
 8000d54:	002b      	movs	r3, r5
 8000d56:	4661      	mov	r1, ip
 8000d58:	f7ff fd60 	bl	800081c <HAL_DMA_Start_IT>
 8000d5c:	0005      	movs	r5, r0
      if (dmaxferstatus == HAL_OK)
 8000d5e:	42b0      	cmp	r0, r6
 8000d60:	d12d      	bne.n	8000dbe <HAL_I2C_Master_Transmit_DMA+0xe6>
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8000d62:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8000d64:	4b28      	ldr	r3, [pc, #160]	; (8000e08 <HAL_I2C_Master_Transmit_DMA+0x130>)
 8000d66:	b2d2      	uxtb	r2, r2
 8000d68:	9300      	str	r3, [sp, #0]
 8000d6a:	9905      	ldr	r1, [sp, #20]
 8000d6c:	9b04      	ldr	r3, [sp, #16]
 8000d6e:	0020      	movs	r0, r4
 8000d70:	f7ff fee2 	bl	8000b38 <I2C_TransferConfig>
        hi2c->XferCount -= hi2c->XferSize;
 8000d74:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000d76:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8000d78:	2111      	movs	r1, #17
        hi2c->XferCount -= hi2c->XferSize;
 8000d7a:	1a9b      	subs	r3, r3, r2
 8000d7c:	b29b      	uxth	r3, r3
 8000d7e:	8563      	strh	r3, [r4, #42]	; 0x2a
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8000d80:	0020      	movs	r0, r4
        __HAL_UNLOCK(hi2c);
 8000d82:	703d      	strb	r5, [r7, #0]
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8000d84:	f7ff feee 	bl	8000b64 <I2C_Enable_IRQ>
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8000d88:	2380      	movs	r3, #128	; 0x80
 8000d8a:	6822      	ldr	r2, [r4, #0]
 8000d8c:	01db      	lsls	r3, r3, #7
 8000d8e:	6811      	ldr	r1, [r2, #0]
 8000d90:	430b      	orrs	r3, r1
 8000d92:	6013      	str	r3, [r2, #0]
}
 8000d94:	0028      	movs	r0, r5
 8000d96:	b007      	add	sp, #28
 8000d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hi2c->XferSize = hi2c->XferCount;
 8000d9a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000d9c:	8523      	strh	r3, [r4, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8000d9e:	2380      	movs	r3, #128	; 0x80
 8000da0:	049b      	lsls	r3, r3, #18
 8000da2:	e7c6      	b.n	8000d32 <HAL_I2C_Master_Transmit_DMA+0x5a>
        hi2c->State     = HAL_I2C_STATE_READY;
 8000da4:	0023      	movs	r3, r4
 8000da6:	2220      	movs	r2, #32
 8000da8:	3341      	adds	r3, #65	; 0x41
 8000daa:	701a      	strb	r2, [r3, #0]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8000dac:	9b03      	ldr	r3, [sp, #12]
 8000dae:	7018      	strb	r0, [r3, #0]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8000db0:	2380      	movs	r3, #128	; 0x80
 8000db2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000db4:	4313      	orrs	r3, r2
 8000db6:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8000db8:	7038      	strb	r0, [r7, #0]
        return HAL_ERROR;
 8000dba:	2501      	movs	r5, #1
 8000dbc:	e7ea      	b.n	8000d94 <HAL_I2C_Master_Transmit_DMA+0xbc>
        hi2c->State     = HAL_I2C_STATE_READY;
 8000dbe:	0023      	movs	r3, r4
 8000dc0:	2220      	movs	r2, #32
 8000dc2:	3341      	adds	r3, #65	; 0x41
 8000dc4:	701a      	strb	r2, [r3, #0]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8000dc6:	9b03      	ldr	r3, [sp, #12]
 8000dc8:	701e      	strb	r6, [r3, #0]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8000dca:	2310      	movs	r3, #16
 8000dcc:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8000dd2:	703e      	strb	r6, [r7, #0]
 8000dd4:	e7f1      	b.n	8000dba <HAL_I2C_Master_Transmit_DMA+0xe2>
      hi2c->XferISR = I2C_Master_ISR_IT;
 8000dd6:	4b0d      	ldr	r3, [pc, #52]	; (8000e0c <HAL_I2C_Master_Transmit_DMA+0x134>)
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8000dd8:	9905      	ldr	r1, [sp, #20]
      hi2c->XferISR = I2C_Master_ISR_IT;
 8000dda:	6363      	str	r3, [r4, #52]	; 0x34
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8000ddc:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <HAL_I2C_Master_Transmit_DMA+0x130>)
 8000dde:	0020      	movs	r0, r4
 8000de0:	9300      	str	r3, [sp, #0]
 8000de2:	2380      	movs	r3, #128	; 0x80
 8000de4:	002a      	movs	r2, r5
 8000de6:	049b      	lsls	r3, r3, #18
 8000de8:	f7ff fea6 	bl	8000b38 <I2C_TransferConfig>
      __HAL_UNLOCK(hi2c);
 8000dec:	703d      	strb	r5, [r7, #0]
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8000dee:	2101      	movs	r1, #1
 8000df0:	0020      	movs	r0, r4
 8000df2:	f7ff feb7 	bl	8000b64 <I2C_Enable_IRQ>
 8000df6:	e7cd      	b.n	8000d94 <HAL_I2C_Master_Transmit_DMA+0xbc>
 8000df8:	ffff0000 	.word	0xffff0000
 8000dfc:	080016c1 	.word	0x080016c1
 8000e00:	080017e9 	.word	0x080017e9
 8000e04:	080017d1 	.word	0x080017d1
 8000e08:	80002000 	.word	0x80002000
 8000e0c:	080014b5 	.word	0x080014b5

08000e10 <HAL_I2C_Master_Receive_DMA>:
{
 8000e10:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e12:	0006      	movs	r6, r0
{
 8000e14:	b087      	sub	sp, #28
 8000e16:	9105      	str	r1, [sp, #20]
 8000e18:	9304      	str	r3, [sp, #16]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e1a:	3641      	adds	r6, #65	; 0x41
 8000e1c:	7831      	ldrb	r1, [r6, #0]
{
 8000e1e:	0004      	movs	r4, r0
    return HAL_BUSY;
 8000e20:	2502      	movs	r5, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e22:	2920      	cmp	r1, #32
 8000e24:	d154      	bne.n	8000ed0 <HAL_I2C_Master_Receive_DMA+0xc0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8000e26:	6801      	ldr	r1, [r0, #0]
 8000e28:	2080      	movs	r0, #128	; 0x80
 8000e2a:	698f      	ldr	r7, [r1, #24]
 8000e2c:	0200      	lsls	r0, r0, #8
 8000e2e:	4038      	ands	r0, r7
 8000e30:	d14e      	bne.n	8000ed0 <HAL_I2C_Master_Receive_DMA+0xc0>
    __HAL_LOCK(hi2c);
 8000e32:	0027      	movs	r7, r4
 8000e34:	3740      	adds	r7, #64	; 0x40
 8000e36:	783b      	ldrb	r3, [r7, #0]
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d049      	beq.n	8000ed0 <HAL_I2C_Master_Receive_DMA+0xc0>
 8000e3c:	3d01      	subs	r5, #1
 8000e3e:	703d      	strb	r5, [r7, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8000e40:	3521      	adds	r5, #33	; 0x21
 8000e42:	7035      	strb	r5, [r6, #0]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000e44:	0025      	movs	r5, r4
 8000e46:	3542      	adds	r5, #66	; 0x42
 8000e48:	9503      	str	r5, [sp, #12]
 8000e4a:	2510      	movs	r5, #16
 8000e4c:	9b03      	ldr	r3, [sp, #12]
 8000e4e:	701d      	strb	r5, [r3, #0]
    hi2c->XferCount   = Size;
 8000e50:	466b      	mov	r3, sp
 8000e52:	8a1b      	ldrh	r3, [r3, #16]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000e54:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount   = Size;
 8000e56:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000e58:	4b36      	ldr	r3, [pc, #216]	; (8000f34 <HAL_I2C_Master_Receive_DMA+0x124>)
    hi2c->pBuffPtr    = pData;
 8000e5a:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000e5c:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8000e5e:	4b36      	ldr	r3, [pc, #216]	; (8000f38 <HAL_I2C_Master_Receive_DMA+0x128>)
 8000e60:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000e62:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000e64:	2bff      	cmp	r3, #255	; 0xff
 8000e66:	d936      	bls.n	8000ed6 <HAL_I2C_Master_Receive_DMA+0xc6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000e68:	23ff      	movs	r3, #255	; 0xff
 8000e6a:	8523      	strh	r3, [r4, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8000e6c:	2380      	movs	r3, #128	; 0x80
 8000e6e:	045b      	lsls	r3, r3, #17
 8000e70:	0027      	movs	r7, r4
    if (hi2c->XferSize > 0U)
 8000e72:	8d25      	ldrh	r5, [r4, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8000e74:	9304      	str	r3, [sp, #16]
 8000e76:	3740      	adds	r7, #64	; 0x40
    if (hi2c->XferSize > 0U)
 8000e78:	2d00      	cmp	r5, #0
 8000e7a:	d04a      	beq.n	8000f12 <HAL_I2C_Master_Receive_DMA+0x102>
      if (hi2c->hdmarx != NULL)
 8000e7c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8000e7e:	2800      	cmp	r0, #0
 8000e80:	d02e      	beq.n	8000ee0 <HAL_I2C_Master_Receive_DMA+0xd0>
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8000e82:	2600      	movs	r6, #0
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8000e84:	4b2d      	ldr	r3, [pc, #180]	; (8000f3c <HAL_I2C_Master_Receive_DMA+0x12c>)
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8000e86:	6306      	str	r6, [r0, #48]	; 0x30
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8000e88:	62c3      	str	r3, [r0, #44]	; 0x2c
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8000e8a:	4b2d      	ldr	r3, [pc, #180]	; (8000f40 <HAL_I2C_Master_Receive_DMA+0x130>)
        hi2c->hdmarx->XferAbortCallback = NULL;
 8000e8c:	6386      	str	r6, [r0, #56]	; 0x38
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8000e8e:	6343      	str	r3, [r0, #52]	; 0x34
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 8000e90:	3124      	adds	r1, #36	; 0x24
 8000e92:	002b      	movs	r3, r5
 8000e94:	f7ff fcc2 	bl	800081c <HAL_DMA_Start_IT>
 8000e98:	0005      	movs	r5, r0
      if (dmaxferstatus == HAL_OK)
 8000e9a:	42b0      	cmp	r0, r6
 8000e9c:	d12d      	bne.n	8000efa <HAL_I2C_Master_Receive_DMA+0xea>
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8000e9e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8000ea0:	4b28      	ldr	r3, [pc, #160]	; (8000f44 <HAL_I2C_Master_Receive_DMA+0x134>)
 8000ea2:	b2d2      	uxtb	r2, r2
 8000ea4:	9300      	str	r3, [sp, #0]
 8000ea6:	9905      	ldr	r1, [sp, #20]
 8000ea8:	9b04      	ldr	r3, [sp, #16]
 8000eaa:	0020      	movs	r0, r4
 8000eac:	f7ff fe44 	bl	8000b38 <I2C_TransferConfig>
        hi2c->XferCount -= hi2c->XferSize;
 8000eb0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000eb2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8000eb4:	2111      	movs	r1, #17
        hi2c->XferCount -= hi2c->XferSize;
 8000eb6:	1a9b      	subs	r3, r3, r2
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	8563      	strh	r3, [r4, #42]	; 0x2a
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8000ebc:	0020      	movs	r0, r4
        __HAL_UNLOCK(hi2c);
 8000ebe:	703d      	strb	r5, [r7, #0]
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8000ec0:	f7ff fe50 	bl	8000b64 <I2C_Enable_IRQ>
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8000ec4:	2380      	movs	r3, #128	; 0x80
 8000ec6:	6822      	ldr	r2, [r4, #0]
 8000ec8:	021b      	lsls	r3, r3, #8
 8000eca:	6811      	ldr	r1, [r2, #0]
 8000ecc:	430b      	orrs	r3, r1
 8000ece:	6013      	str	r3, [r2, #0]
}
 8000ed0:	0028      	movs	r0, r5
 8000ed2:	b007      	add	sp, #28
 8000ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hi2c->XferSize = hi2c->XferCount;
 8000ed6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000ed8:	8523      	strh	r3, [r4, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8000eda:	2380      	movs	r3, #128	; 0x80
 8000edc:	049b      	lsls	r3, r3, #18
 8000ede:	e7c7      	b.n	8000e70 <HAL_I2C_Master_Receive_DMA+0x60>
        hi2c->State     = HAL_I2C_STATE_READY;
 8000ee0:	0023      	movs	r3, r4
 8000ee2:	2220      	movs	r2, #32
 8000ee4:	3341      	adds	r3, #65	; 0x41
 8000ee6:	701a      	strb	r2, [r3, #0]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8000ee8:	9b03      	ldr	r3, [sp, #12]
 8000eea:	7018      	strb	r0, [r3, #0]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8000eec:	2380      	movs	r3, #128	; 0x80
 8000eee:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8000ef4:	7038      	strb	r0, [r7, #0]
        return HAL_ERROR;
 8000ef6:	2501      	movs	r5, #1
 8000ef8:	e7ea      	b.n	8000ed0 <HAL_I2C_Master_Receive_DMA+0xc0>
        hi2c->State     = HAL_I2C_STATE_READY;
 8000efa:	0023      	movs	r3, r4
 8000efc:	2220      	movs	r2, #32
 8000efe:	3341      	adds	r3, #65	; 0x41
 8000f00:	701a      	strb	r2, [r3, #0]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8000f02:	9b03      	ldr	r3, [sp, #12]
 8000f04:	701e      	strb	r6, [r3, #0]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8000f06:	2310      	movs	r3, #16
 8000f08:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8000f0e:	703e      	strb	r6, [r7, #0]
 8000f10:	e7f1      	b.n	8000ef6 <HAL_I2C_Master_Receive_DMA+0xe6>
      hi2c->XferISR = I2C_Master_ISR_IT;
 8000f12:	4b0d      	ldr	r3, [pc, #52]	; (8000f48 <HAL_I2C_Master_Receive_DMA+0x138>)
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8000f14:	9905      	ldr	r1, [sp, #20]
      hi2c->XferISR = I2C_Master_ISR_IT;
 8000f16:	6363      	str	r3, [r4, #52]	; 0x34
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8000f18:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <HAL_I2C_Master_Receive_DMA+0x134>)
 8000f1a:	0020      	movs	r0, r4
 8000f1c:	9300      	str	r3, [sp, #0]
 8000f1e:	2380      	movs	r3, #128	; 0x80
 8000f20:	002a      	movs	r2, r5
 8000f22:	049b      	lsls	r3, r3, #18
 8000f24:	f7ff fe08 	bl	8000b38 <I2C_TransferConfig>
      __HAL_UNLOCK(hi2c);
 8000f28:	703d      	strb	r5, [r7, #0]
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8000f2a:	2101      	movs	r1, #1
 8000f2c:	0020      	movs	r0, r4
 8000f2e:	f7ff fe19 	bl	8000b64 <I2C_Enable_IRQ>
 8000f32:	e7cd      	b.n	8000ed0 <HAL_I2C_Master_Receive_DMA+0xc0>
 8000f34:	ffff0000 	.word	0xffff0000
 8000f38:	080016c1 	.word	0x080016c1
 8000f3c:	08001839 	.word	0x08001839
 8000f40:	080017d1 	.word	0x080017d1
 8000f44:	80002400 	.word	0x80002400
 8000f48:	080014b5 	.word	0x080014b5

08000f4c <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8000f4c:	6803      	ldr	r3, [r0, #0]
{
 8000f4e:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8000f50:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8000f52:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8000f54:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d000      	beq.n	8000f5c <HAL_I2C_EV_IRQHandler+0x10>
    hi2c->XferISR(hi2c, itflags, itsources);
 8000f5a:	4798      	blx	r3
}
 8000f5c:	bd10      	pop	{r4, pc}

08000f5e <HAL_I2C_MasterTxCpltCallback>:
 8000f5e:	4770      	bx	lr

08000f60 <HAL_I2C_MasterRxCpltCallback>:
 8000f60:	4770      	bx	lr

08000f62 <I2C_ITMasterSeqCplt>:
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f62:	0003      	movs	r3, r0
{
 8000f64:	b570      	push	{r4, r5, r6, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f66:	2500      	movs	r5, #0
 8000f68:	2220      	movs	r2, #32
 8000f6a:	0006      	movs	r6, r0
 8000f6c:	3342      	adds	r3, #66	; 0x42
 8000f6e:	701d      	strb	r5, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8000f70:	3b01      	subs	r3, #1
 8000f72:	7819      	ldrb	r1, [r3, #0]
{
 8000f74:	0004      	movs	r4, r0
 8000f76:	3640      	adds	r6, #64	; 0x40
    hi2c->State         = HAL_I2C_STATE_READY;
 8000f78:	701a      	strb	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8000f7a:	2921      	cmp	r1, #33	; 0x21
 8000f7c:	d10a      	bne.n	8000f94 <I2C_ITMasterSeqCplt+0x32>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8000f7e:	2311      	movs	r3, #17
    hi2c->XferISR       = NULL;
 8000f80:	6345      	str	r5, [r0, #52]	; 0x34
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8000f82:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8000f84:	3920      	subs	r1, #32
 8000f86:	f7ff fe21 	bl	8000bcc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8000f8a:	7035      	strb	r5, [r6, #0]
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8000f8c:	0020      	movs	r0, r4
 8000f8e:	f7ff ffe6 	bl	8000f5e <HAL_I2C_MasterTxCpltCallback>
}
 8000f92:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8000f94:	2312      	movs	r3, #18
    hi2c->XferISR       = NULL;
 8000f96:	6345      	str	r5, [r0, #52]	; 0x34
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8000f98:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8000f9a:	2102      	movs	r1, #2
 8000f9c:	f7ff fe16 	bl	8000bcc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8000fa0:	7035      	strb	r5, [r6, #0]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8000fa2:	0020      	movs	r0, r4
 8000fa4:	f7ff ffdc 	bl	8000f60 <HAL_I2C_MasterRxCpltCallback>
}
 8000fa8:	e7f3      	b.n	8000f92 <I2C_ITMasterSeqCplt+0x30>

08000faa <HAL_I2C_SlaveTxCpltCallback>:
 8000faa:	4770      	bx	lr

08000fac <HAL_I2C_SlaveRxCpltCallback>:
 8000fac:	4770      	bx	lr

08000fae <I2C_ITSlaveSeqCplt>:
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fae:	0003      	movs	r3, r0
{
 8000fb0:	b570      	push	{r4, r5, r6, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fb2:	2500      	movs	r5, #0
 8000fb4:	3342      	adds	r3, #66	; 0x42
 8000fb6:	701d      	strb	r5, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8000fb8:	3b01      	subs	r3, #1
 8000fba:	781a      	ldrb	r2, [r3, #0]
{
 8000fbc:	0004      	movs	r4, r0
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8000fbe:	2a29      	cmp	r2, #41	; 0x29
 8000fc0:	d10d      	bne.n	8000fde <I2C_ITSlaveSeqCplt+0x30>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8000fc2:	3a01      	subs	r2, #1
 8000fc4:	701a      	strb	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8000fc6:	2321      	movs	r3, #33	; 0x21
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8000fc8:	2101      	movs	r1, #1
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8000fca:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8000fcc:	f7ff fdfe 	bl	8000bcc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8000fd0:	0023      	movs	r3, r4
 8000fd2:	3340      	adds	r3, #64	; 0x40
 8000fd4:	701d      	strb	r5, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8000fd6:	0020      	movs	r0, r4
 8000fd8:	f7ff ffe7 	bl	8000faa <HAL_I2C_SlaveTxCpltCallback>
}
 8000fdc:	bd70      	pop	{r4, r5, r6, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8000fde:	781a      	ldrb	r2, [r3, #0]
 8000fe0:	2a2a      	cmp	r2, #42	; 0x2a
 8000fe2:	d1fb      	bne.n	8000fdc <I2C_ITSlaveSeqCplt+0x2e>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8000fe4:	3a02      	subs	r2, #2
 8000fe6:	701a      	strb	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8000fe8:	2322      	movs	r3, #34	; 0x22
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8000fea:	2102      	movs	r1, #2
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8000fec:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8000fee:	f7ff fded 	bl	8000bcc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8000ff2:	0023      	movs	r3, r4
 8000ff4:	3340      	adds	r3, #64	; 0x40
 8000ff6:	701d      	strb	r5, [r3, #0]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8000ff8:	0020      	movs	r0, r4
 8000ffa:	f7ff ffd7 	bl	8000fac <HAL_I2C_SlaveRxCpltCallback>
}
 8000ffe:	e7ed      	b.n	8000fdc <I2C_ITSlaveSeqCplt+0x2e>

08001000 <HAL_I2C_AddrCallback>:
}
 8001000:	4770      	bx	lr

08001002 <I2C_ITAddrCplt.isra.8>:
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001002:	0003      	movs	r3, r0
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8001004:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001006:	3341      	adds	r3, #65	; 0x41
 8001008:	781a      	ldrb	r2, [r3, #0]
 800100a:	2328      	movs	r3, #40	; 0x28
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 800100c:	0004      	movs	r4, r0
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800100e:	401a      	ands	r2, r3
 8001010:	6803      	ldr	r3, [r0, #0]
 8001012:	2a28      	cmp	r2, #40	; 0x28
 8001014:	d137      	bne.n	8001086 <I2C_ITAddrCplt.isra.8+0x84>
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001016:	27fe      	movs	r7, #254	; 0xfe
    transferdirection = I2C_GET_DIR(hi2c);
 8001018:	699d      	ldr	r5, [r3, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800101a:	699e      	ldr	r6, [r3, #24]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800101c:	689a      	ldr	r2, [r3, #8]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800101e:	68d9      	ldr	r1, [r3, #12]
    transferdirection = I2C_GET_DIR(hi2c);
 8001020:	03ed      	lsls	r5, r5, #15
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001022:	9101      	str	r1, [sp, #4]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001024:	68c1      	ldr	r1, [r0, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001026:	0c36      	lsrs	r6, r6, #16
    transferdirection = I2C_GET_DIR(hi2c);
 8001028:	0fed      	lsrs	r5, r5, #31
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800102a:	403e      	ands	r6, r7
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800102c:	2902      	cmp	r1, #2
 800102e:	d121      	bne.n	8001074 <I2C_ITAddrCplt.isra.8+0x72>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001030:	0592      	lsls	r2, r2, #22
 8001032:	0d92      	lsrs	r2, r2, #22
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8001034:	09d1      	lsrs	r1, r2, #7
 8001036:	404e      	eors	r6, r1
 8001038:	2106      	movs	r1, #6
 800103a:	400e      	ands	r6, r1
 800103c:	d110      	bne.n	8001060 <I2C_ITAddrCplt.isra.8+0x5e>
        hi2c->AddrEventCount++;
 800103e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001040:	3101      	adds	r1, #1
 8001042:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8001044:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001046:	2902      	cmp	r1, #2
 8001048:	d109      	bne.n	800105e <I2C_ITAddrCplt.isra.8+0x5c>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800104a:	3106      	adds	r1, #6
          hi2c->AddrEventCount = 0U;
 800104c:	6486      	str	r6, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800104e:	61d9      	str	r1, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8001050:	0003      	movs	r3, r0
 8001052:	3340      	adds	r3, #64	; 0x40
 8001054:	701e      	strb	r6, [r3, #0]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001056:	0029      	movs	r1, r5
 8001058:	0020      	movs	r0, r4
 800105a:	f7ff ffd1 	bl	8001000 <HAL_I2C_AddrCallback>
}
 800105e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001060:	2104      	movs	r1, #4
 8001062:	f7ff fdb3 	bl	8000bcc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001066:	0023      	movs	r3, r4
 8001068:	2200      	movs	r2, #0
 800106a:	3340      	adds	r3, #64	; 0x40
 800106c:	701a      	strb	r2, [r3, #0]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800106e:	9a01      	ldr	r2, [sp, #4]
 8001070:	403a      	ands	r2, r7
 8001072:	e7f0      	b.n	8001056 <I2C_ITAddrCplt.isra.8+0x54>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001074:	2104      	movs	r1, #4
 8001076:	f7ff fda9 	bl	8000bcc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800107a:	0023      	movs	r3, r4
 800107c:	2200      	movs	r2, #0
 800107e:	3340      	adds	r3, #64	; 0x40
 8001080:	701a      	strb	r2, [r3, #0]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001082:	0032      	movs	r2, r6
 8001084:	e7e7      	b.n	8001056 <I2C_ITAddrCplt.isra.8+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001086:	2208      	movs	r2, #8
 8001088:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800108a:	2300      	movs	r3, #0
 800108c:	3440      	adds	r4, #64	; 0x40
 800108e:	7023      	strb	r3, [r4, #0]
 8001090:	e7e5      	b.n	800105e <I2C_ITAddrCplt.isra.8+0x5c>

08001092 <HAL_I2C_ListenCpltCallback>:
 8001092:	4770      	bx	lr

08001094 <I2C_ITListenCplt>:
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001094:	4b18      	ldr	r3, [pc, #96]	; (80010f8 <I2C_ITListenCplt+0x64>)
{
 8001096:	b510      	push	{r4, lr}
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001098:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800109a:	2300      	movs	r3, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800109c:	0002      	movs	r2, r0
  hi2c->PreviousState = I2C_STATE_NONE;
 800109e:	6303      	str	r3, [r0, #48]	; 0x30
{
 80010a0:	0004      	movs	r4, r0
  hi2c->State = HAL_I2C_STATE_READY;
 80010a2:	2020      	movs	r0, #32
 80010a4:	3241      	adds	r2, #65	; 0x41
 80010a6:	7010      	strb	r0, [r2, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80010a8:	7053      	strb	r3, [r2, #1]
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80010aa:	2204      	movs	r2, #4
  hi2c->XferISR = NULL;
 80010ac:	6363      	str	r3, [r4, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80010ae:	4211      	tst	r1, r2
 80010b0:	d012      	beq.n	80010d8 <I2C_ITListenCplt+0x44>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80010b2:	6823      	ldr	r3, [r4, #0]
 80010b4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80010b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b8:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 80010ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80010bc:	3301      	adds	r3, #1
 80010be:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80010c0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d008      	beq.n	80010d8 <I2C_ITListenCplt+0x44>
      hi2c->XferSize--;
 80010c6:	3b01      	subs	r3, #1
 80010c8:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80010ca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80010cc:	3b01      	subs	r3, #1
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80010d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80010d4:	431a      	orrs	r2, r3
 80010d6:	6462      	str	r2, [r4, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80010d8:	2107      	movs	r1, #7
 80010da:	0020      	movs	r0, r4
 80010dc:	f7ff fd76 	bl	8000bcc <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80010e0:	2210      	movs	r2, #16
 80010e2:	6823      	ldr	r3, [r4, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 80010e4:	0020      	movs	r0, r4
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80010e6:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 80010e8:	0023      	movs	r3, r4
 80010ea:	2200      	movs	r2, #0
 80010ec:	3340      	adds	r3, #64	; 0x40
 80010ee:	701a      	strb	r2, [r3, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 80010f0:	f7ff ffcf 	bl	8001092 <HAL_I2C_ListenCpltCallback>
}
 80010f4:	bd10      	pop	{r4, pc}
 80010f6:	46c0      	nop			; (mov r8, r8)
 80010f8:	ffff0000 	.word	0xffff0000

080010fc <HAL_I2C_MemTxCpltCallback>:
 80010fc:	4770      	bx	lr

080010fe <HAL_I2C_MemRxCpltCallback>:
 80010fe:	4770      	bx	lr

08001100 <HAL_I2C_ErrorCallback>:
 8001100:	4770      	bx	lr

08001102 <HAL_I2C_AbortCpltCallback>:
}
 8001102:	4770      	bx	lr

08001104 <I2C_ITError>:
{
 8001104:	b570      	push	{r4, r5, r6, lr}
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001106:	0002      	movs	r2, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001108:	0005      	movs	r5, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800110a:	2600      	movs	r6, #0
 800110c:	3242      	adds	r2, #66	; 0x42
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800110e:	3541      	adds	r5, #65	; 0x41
 8001110:	782b      	ldrb	r3, [r5, #0]
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001112:	7016      	strb	r6, [r2, #0]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001114:	4a2f      	ldr	r2, [pc, #188]	; (80011d4 <I2C_ITError+0xd0>)
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8001116:	3b28      	subs	r3, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001118:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800111a:	8546      	strh	r6, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 800111c:	6c42      	ldr	r2, [r0, #68]	; 0x44
{
 800111e:	0004      	movs	r4, r0
  hi2c->ErrorCode |= ErrorCode;
 8001120:	4311      	orrs	r1, r2
 8001122:	6441      	str	r1, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8001124:	2b02      	cmp	r3, #2
 8001126:	d822      	bhi.n	800116e <I2C_ITError+0x6a>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001128:	2103      	movs	r1, #3
 800112a:	f7ff fd4f 	bl	8000bcc <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800112e:	2328      	movs	r3, #40	; 0x28
 8001130:	702b      	strb	r3, [r5, #0]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8001132:	4b29      	ldr	r3, [pc, #164]	; (80011d8 <I2C_ITError+0xd4>)
    hi2c->PreviousState = I2C_STATE_NONE;
 8001134:	6326      	str	r6, [r4, #48]	; 0x30
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8001136:	2280      	movs	r2, #128	; 0x80
    hi2c->XferISR       = NULL;
 8001138:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800113a:	6823      	ldr	r3, [r4, #0]
 800113c:	01d2      	lsls	r2, r2, #7
 800113e:	6819      	ldr	r1, [r3, #0]
 8001140:	4011      	ands	r1, r2
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001142:	681a      	ldr	r2, [r3, #0]
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8001144:	d01e      	beq.n	8001184 <I2C_ITError+0x80>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001146:	4925      	ldr	r1, [pc, #148]	; (80011dc <I2C_ITError+0xd8>)
    if (hi2c->hdmatx != NULL)
 8001148:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800114a:	400a      	ands	r2, r1
 800114c:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 800114e:	2800      	cmp	r0, #0
 8001150:	d00c      	beq.n	800116c <I2C_ITError+0x68>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001152:	4b23      	ldr	r3, [pc, #140]	; (80011e0 <I2C_ITError+0xdc>)
      __HAL_UNLOCK(hi2c);
 8001154:	2200      	movs	r2, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001156:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8001158:	0023      	movs	r3, r4
 800115a:	3340      	adds	r3, #64	; 0x40
 800115c:	701a      	strb	r2, [r3, #0]
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800115e:	f7ff fb9d 	bl	800089c <HAL_DMA_Abort_IT>
 8001162:	2800      	cmp	r0, #0
 8001164:	d002      	beq.n	800116c <I2C_ITError+0x68>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001166:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001168:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800116a:	4798      	blx	r3
}
 800116c:	bd70      	pop	{r4, r5, r6, pc}
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800116e:	2107      	movs	r1, #7
 8001170:	f7ff fd2c 	bl	8000bcc <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8001174:	782b      	ldrb	r3, [r5, #0]
 8001176:	2b60      	cmp	r3, #96	; 0x60
 8001178:	d001      	beq.n	800117e <I2C_ITError+0x7a>
      hi2c->State         = HAL_I2C_STATE_READY;
 800117a:	2320      	movs	r3, #32
 800117c:	702b      	strb	r3, [r5, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 800117e:	2300      	movs	r3, #0
 8001180:	6323      	str	r3, [r4, #48]	; 0x30
 8001182:	e7d8      	b.n	8001136 <I2C_ITError+0x32>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8001184:	2080      	movs	r0, #128	; 0x80
 8001186:	0200      	lsls	r0, r0, #8
 8001188:	4002      	ands	r2, r0
 800118a:	d011      	beq.n	80011b0 <I2C_ITError+0xac>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	4815      	ldr	r0, [pc, #84]	; (80011e4 <I2C_ITError+0xe0>)
 8001190:	4002      	ands	r2, r0
    if (hi2c->hdmarx != NULL)
 8001192:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001194:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8001196:	2800      	cmp	r0, #0
 8001198:	d0e8      	beq.n	800116c <I2C_ITError+0x68>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800119a:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <I2C_ITError+0xdc>)
 800119c:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 800119e:	0023      	movs	r3, r4
 80011a0:	3340      	adds	r3, #64	; 0x40
 80011a2:	7019      	strb	r1, [r3, #0]
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80011a4:	f7ff fb7a 	bl	800089c <HAL_DMA_Abort_IT>
 80011a8:	2800      	cmp	r0, #0
 80011aa:	d0df      	beq.n	800116c <I2C_ITError+0x68>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80011ac:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80011ae:	e7db      	b.n	8001168 <I2C_ITError+0x64>
 80011b0:	0023      	movs	r3, r4
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80011b2:	7829      	ldrb	r1, [r5, #0]
 80011b4:	3340      	adds	r3, #64	; 0x40
 80011b6:	2960      	cmp	r1, #96	; 0x60
 80011b8:	d106      	bne.n	80011c8 <I2C_ITError+0xc4>
    hi2c->State = HAL_I2C_STATE_READY;
 80011ba:	3940      	subs	r1, #64	; 0x40
 80011bc:	7029      	strb	r1, [r5, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 80011be:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 80011c0:	701a      	strb	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 80011c2:	f7ff ff9e 	bl	8001102 <HAL_I2C_AbortCpltCallback>
 80011c6:	e7d1      	b.n	800116c <I2C_ITError+0x68>
    __HAL_UNLOCK(hi2c);
 80011c8:	701a      	strb	r2, [r3, #0]
    HAL_I2C_ErrorCallback(hi2c);
 80011ca:	0020      	movs	r0, r4
 80011cc:	f7ff ff98 	bl	8001100 <HAL_I2C_ErrorCallback>
}
 80011d0:	e7cc      	b.n	800116c <I2C_ITError+0x68>
 80011d2:	46c0      	nop			; (mov r8, r8)
 80011d4:	ffff0000 	.word	0xffff0000
 80011d8:	080012dd 	.word	0x080012dd
 80011dc:	ffffbfff 	.word	0xffffbfff
 80011e0:	080018e1 	.word	0x080018e1
 80011e4:	ffff7fff 	.word	0xffff7fff

080011e8 <I2C_ITSlaveCplt>:
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80011e8:	2220      	movs	r2, #32
{
 80011ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011ec:	0004      	movs	r4, r0
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80011ee:	2580      	movs	r5, #128	; 0x80
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80011f0:	6803      	ldr	r3, [r0, #0]
{
 80011f2:	000f      	movs	r7, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80011f4:	681e      	ldr	r6, [r3, #0]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80011f6:	2107      	movs	r1, #7
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80011f8:	61da      	str	r2, [r3, #28]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80011fa:	f7ff fce7 	bl	8000bcc <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80011fe:	6823      	ldr	r3, [r4, #0]
 8001200:	022d      	lsls	r5, r5, #8
 8001202:	685a      	ldr	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 8001204:	4933      	ldr	r1, [pc, #204]	; (80012d4 <I2C_ITSlaveCplt+0xec>)
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001206:	432a      	orrs	r2, r5
 8001208:	605a      	str	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 800120a:	685a      	ldr	r2, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 800120c:	0020      	movs	r0, r4
  I2C_RESET_CR2(hi2c);
 800120e:	400a      	ands	r2, r1
 8001210:	605a      	str	r2, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 8001212:	f7ff fc83 	bl	8000b1c <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001216:	0473      	lsls	r3, r6, #17
 8001218:	d538      	bpl.n	800128c <I2C_ITSlaveCplt+0xa4>
    if (hi2c->hdmatx != NULL)
 800121a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    if (hi2c->hdmarx != NULL)
 800121c:	2b00      	cmp	r3, #0
 800121e:	d003      	beq.n	8001228 <I2C_ITSlaveCplt+0x40>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	b29b      	uxth	r3, r3
 8001226:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001228:	2304      	movs	r3, #4
 800122a:	421f      	tst	r7, r3
 800122c:	d010      	beq.n	8001250 <I2C_ITSlaveCplt+0x68>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800122e:	439f      	bics	r7, r3
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001230:	6823      	ldr	r3, [r4, #0]
 8001232:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001236:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr++;
 8001238:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800123a:	3301      	adds	r3, #1
 800123c:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800123e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001240:	2b00      	cmp	r3, #0
 8001242:	d005      	beq.n	8001250 <I2C_ITSlaveCplt+0x68>
      hi2c->XferSize--;
 8001244:	3b01      	subs	r3, #1
 8001246:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001248:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800124a:	3b01      	subs	r3, #1
 800124c:	b29b      	uxth	r3, r3
 800124e:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 8001250:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001252:	2b00      	cmp	r3, #0
 8001254:	d003      	beq.n	800125e <I2C_ITSlaveCplt+0x76>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001256:	2304      	movs	r3, #4
 8001258:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800125a:	4313      	orrs	r3, r2
 800125c:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800125e:	0022      	movs	r2, r4
  hi2c->PreviousState = I2C_STATE_NONE;
 8001260:	2300      	movs	r3, #0
 8001262:	0025      	movs	r5, r4
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001264:	3242      	adds	r2, #66	; 0x42
  hi2c->PreviousState = I2C_STATE_NONE;
 8001266:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001268:	7013      	strb	r3, [r2, #0]
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800126a:	6c66      	ldr	r6, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
 800126c:	6363      	str	r3, [r4, #52]	; 0x34
 800126e:	3541      	adds	r5, #65	; 0x41
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001270:	429e      	cmp	r6, r3
 8001272:	d00f      	beq.n	8001294 <I2C_ITSlaveCplt+0xac>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001274:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001276:	0020      	movs	r0, r4
 8001278:	f7ff ff44 	bl	8001104 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800127c:	782b      	ldrb	r3, [r5, #0]
 800127e:	2b28      	cmp	r3, #40	; 0x28
 8001280:	d103      	bne.n	800128a <I2C_ITSlaveCplt+0xa2>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8001282:	0039      	movs	r1, r7
 8001284:	0020      	movs	r0, r4
 8001286:	f7ff ff05 	bl	8001094 <I2C_ITListenCplt>
}
 800128a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800128c:	422e      	tst	r6, r5
 800128e:	d0cb      	beq.n	8001228 <I2C_ITSlaveCplt+0x40>
    if (hi2c->hdmarx != NULL)
 8001290:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001292:	e7c3      	b.n	800121c <I2C_ITSlaveCplt+0x34>
 8001294:	0027      	movs	r7, r4
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001296:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001298:	4a0f      	ldr	r2, [pc, #60]	; (80012d8 <I2C_ITSlaveCplt+0xf0>)
 800129a:	3740      	adds	r7, #64	; 0x40
 800129c:	4293      	cmp	r3, r2
 800129e:	d00b      	beq.n	80012b8 <I2C_ITSlaveCplt+0xd0>
    I2C_ITSlaveSeqCplt(hi2c);
 80012a0:	0020      	movs	r0, r4
 80012a2:	f7ff fe84 	bl	8000fae <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80012a6:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <I2C_ITSlaveCplt+0xf0>)
    HAL_I2C_ListenCpltCallback(hi2c);
 80012a8:	0020      	movs	r0, r4
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80012aa:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80012ac:	2320      	movs	r3, #32
 80012ae:	702b      	strb	r3, [r5, #0]
    __HAL_UNLOCK(hi2c);
 80012b0:	703e      	strb	r6, [r7, #0]
    HAL_I2C_ListenCpltCallback(hi2c);
 80012b2:	f7ff feee 	bl	8001092 <HAL_I2C_ListenCpltCallback>
 80012b6:	e7e8      	b.n	800128a <I2C_ITSlaveCplt+0xa2>
 80012b8:	2320      	movs	r3, #32
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80012ba:	782a      	ldrb	r2, [r5, #0]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80012bc:	0020      	movs	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 80012be:	702b      	strb	r3, [r5, #0]
    __HAL_UNLOCK(hi2c);
 80012c0:	703e      	strb	r6, [r7, #0]
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80012c2:	2a22      	cmp	r2, #34	; 0x22
 80012c4:	d102      	bne.n	80012cc <I2C_ITSlaveCplt+0xe4>
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80012c6:	f7ff fe71 	bl	8000fac <HAL_I2C_SlaveRxCpltCallback>
 80012ca:	e7de      	b.n	800128a <I2C_ITSlaveCplt+0xa2>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80012cc:	f7ff fe6d 	bl	8000faa <HAL_I2C_SlaveTxCpltCallback>
}
 80012d0:	e7db      	b.n	800128a <I2C_ITSlaveCplt+0xa2>
 80012d2:	46c0      	nop			; (mov r8, r8)
 80012d4:	fe00e800 	.word	0xfe00e800
 80012d8:	ffff0000 	.word	0xffff0000

080012dc <I2C_Slave_ISR_IT>:
{
 80012dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 80012de:	0007      	movs	r7, r0
 80012e0:	3740      	adds	r7, #64	; 0x40
{
 80012e2:	0016      	movs	r6, r2
  __HAL_LOCK(hi2c);
 80012e4:	783a      	ldrb	r2, [r7, #0]
{
 80012e6:	0004      	movs	r4, r0
  uint32_t tmpoptions = hi2c->XferOptions;
 80012e8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
 80012ea:	000d      	movs	r5, r1
  __HAL_LOCK(hi2c);
 80012ec:	2002      	movs	r0, #2
 80012ee:	2a01      	cmp	r2, #1
 80012f0:	d021      	beq.n	8001336 <I2C_Slave_ISR_IT+0x5a>
 80012f2:	2201      	movs	r2, #1
 80012f4:	703a      	strb	r2, [r7, #0]
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80012f6:	320f      	adds	r2, #15
 80012f8:	4211      	tst	r1, r2
 80012fa:	d03b      	beq.n	8001374 <I2C_Slave_ISR_IT+0x98>
 80012fc:	4216      	tst	r6, r2
 80012fe:	d039      	beq.n	8001374 <I2C_Slave_ISR_IT+0x98>
    if (hi2c->XferCount == 0U)
 8001300:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8001302:	2900      	cmp	r1, #0
 8001304:	d128      	bne.n	8001358 <I2C_Slave_ISR_IT+0x7c>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8001306:	0022      	movs	r2, r4
 8001308:	3241      	adds	r2, #65	; 0x41
 800130a:	7811      	ldrb	r1, [r2, #0]
 800130c:	2928      	cmp	r1, #40	; 0x28
 800130e:	d113      	bne.n	8001338 <I2C_Slave_ISR_IT+0x5c>
 8001310:	2180      	movs	r1, #128	; 0x80
 8001312:	0489      	lsls	r1, r1, #18
 8001314:	428b      	cmp	r3, r1
 8001316:	d10f      	bne.n	8001338 <I2C_Slave_ISR_IT+0x5c>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001318:	0029      	movs	r1, r5
 800131a:	0020      	movs	r0, r4
 800131c:	f7ff feba 	bl	8001094 <I2C_ITListenCplt>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001320:	2320      	movs	r3, #32
 8001322:	421d      	tst	r5, r3
 8001324:	d005      	beq.n	8001332 <I2C_Slave_ISR_IT+0x56>
 8001326:	421e      	tst	r6, r3
 8001328:	d003      	beq.n	8001332 <I2C_Slave_ISR_IT+0x56>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800132a:	0029      	movs	r1, r5
 800132c:	0020      	movs	r0, r4
 800132e:	f7ff ff5b 	bl	80011e8 <I2C_ITSlaveCplt>
  __HAL_UNLOCK(hi2c);
 8001332:	2000      	movs	r0, #0
 8001334:	7038      	strb	r0, [r7, #0]
}
 8001336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001338:	2110      	movs	r1, #16
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800133a:	7810      	ldrb	r0, [r2, #0]
 800133c:	6822      	ldr	r2, [r4, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800133e:	61d1      	str	r1, [r2, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001340:	2829      	cmp	r0, #41	; 0x29
 8001342:	d1ed      	bne.n	8001320 <I2C_Slave_ISR_IT+0x44>
 8001344:	482c      	ldr	r0, [pc, #176]	; (80013f8 <I2C_Slave_ISR_IT+0x11c>)
 8001346:	4283      	cmp	r3, r0
 8001348:	d0ea      	beq.n	8001320 <I2C_Slave_ISR_IT+0x44>
        I2C_Flush_TXDR(hi2c);
 800134a:	0020      	movs	r0, r4
 800134c:	f7ff fbe6 	bl	8000b1c <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 8001350:	0020      	movs	r0, r4
 8001352:	f7ff fe2c 	bl	8000fae <I2C_ITSlaveSeqCplt>
 8001356:	e7e3      	b.n	8001320 <I2C_Slave_ISR_IT+0x44>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001358:	6821      	ldr	r1, [r4, #0]
 800135a:	61ca      	str	r2, [r1, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800135c:	2204      	movs	r2, #4
 800135e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001360:	430a      	orrs	r2, r1
 8001362:	6462      	str	r2, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001364:	4a25      	ldr	r2, [pc, #148]	; (80013fc <I2C_Slave_ISR_IT+0x120>)
 8001366:	4213      	tst	r3, r2
 8001368:	d1da      	bne.n	8001320 <I2C_Slave_ISR_IT+0x44>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800136a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800136c:	0020      	movs	r0, r4
 800136e:	f7ff fec9 	bl	8001104 <I2C_ITError>
 8001372:	e7d5      	b.n	8001320 <I2C_Slave_ISR_IT+0x44>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001374:	2204      	movs	r2, #4
 8001376:	4215      	tst	r5, r2
 8001378:	d01a      	beq.n	80013b0 <I2C_Slave_ISR_IT+0xd4>
 800137a:	4216      	tst	r6, r2
 800137c:	d018      	beq.n	80013b0 <I2C_Slave_ISR_IT+0xd4>
    if (hi2c->XferCount > 0U)
 800137e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8001380:	2900      	cmp	r1, #0
 8001382:	d00e      	beq.n	80013a2 <I2C_Slave_ISR_IT+0xc6>
      tmpITFlags &= ~I2C_FLAG_RXNE;
 8001384:	4395      	bics	r5, r2
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001386:	6822      	ldr	r2, [r4, #0]
 8001388:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800138a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800138c:	700a      	strb	r2, [r1, #0]
      hi2c->pBuffPtr++;
 800138e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001390:	3201      	adds	r2, #1
 8001392:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8001394:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001396:	3a01      	subs	r2, #1
 8001398:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800139a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800139c:	3a01      	subs	r2, #1
 800139e:	b292      	uxth	r2, r2
 80013a0:	8562      	strh	r2, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 80013a2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80013a4:	2a00      	cmp	r2, #0
 80013a6:	d1bb      	bne.n	8001320 <I2C_Slave_ISR_IT+0x44>
 80013a8:	4a13      	ldr	r2, [pc, #76]	; (80013f8 <I2C_Slave_ISR_IT+0x11c>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d1d0      	bne.n	8001350 <I2C_Slave_ISR_IT+0x74>
 80013ae:	e7b7      	b.n	8001320 <I2C_Slave_ISR_IT+0x44>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80013b0:	2208      	movs	r2, #8
 80013b2:	4215      	tst	r5, r2
 80013b4:	d005      	beq.n	80013c2 <I2C_Slave_ISR_IT+0xe6>
 80013b6:	4216      	tst	r6, r2
 80013b8:	d003      	beq.n	80013c2 <I2C_Slave_ISR_IT+0xe6>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80013ba:	0020      	movs	r0, r4
 80013bc:	f7ff fe21 	bl	8001002 <I2C_ITAddrCplt.isra.8>
 80013c0:	e7ae      	b.n	8001320 <I2C_Slave_ISR_IT+0x44>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80013c2:	2202      	movs	r2, #2
 80013c4:	4215      	tst	r5, r2
 80013c6:	d0ab      	beq.n	8001320 <I2C_Slave_ISR_IT+0x44>
 80013c8:	4216      	tst	r6, r2
 80013ca:	d0a9      	beq.n	8001320 <I2C_Slave_ISR_IT+0x44>
    if (hi2c->XferCount > 0U)
 80013cc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80013ce:	2a00      	cmp	r2, #0
 80013d0:	d00d      	beq.n	80013ee <I2C_Slave_ISR_IT+0x112>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80013d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80013d4:	6822      	ldr	r2, [r4, #0]
 80013d6:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 80013d8:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80013da:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 80013dc:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80013de:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80013e0:	3b01      	subs	r3, #1
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80013e6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80013e8:	3b01      	subs	r3, #1
 80013ea:	8523      	strh	r3, [r4, #40]	; 0x28
 80013ec:	e798      	b.n	8001320 <I2C_Slave_ISR_IT+0x44>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80013ee:	4a03      	ldr	r2, [pc, #12]	; (80013fc <I2C_Slave_ISR_IT+0x120>)
 80013f0:	4213      	tst	r3, r2
 80013f2:	d000      	beq.n	80013f6 <I2C_Slave_ISR_IT+0x11a>
 80013f4:	e794      	b.n	8001320 <I2C_Slave_ISR_IT+0x44>
 80013f6:	e7ab      	b.n	8001350 <I2C_Slave_ISR_IT+0x74>
 80013f8:	ffff0000 	.word	0xffff0000
 80013fc:	feffffff 	.word	0xfeffffff

08001400 <I2C_ITMasterCplt>:
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001400:	2220      	movs	r2, #32
 8001402:	6803      	ldr	r3, [r0, #0]
{
 8001404:	b510      	push	{r4, lr}
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001406:	61da      	str	r2, [r3, #28]
  I2C_RESET_CR2(hi2c);
 8001408:	685a      	ldr	r2, [r3, #4]
{
 800140a:	0004      	movs	r4, r0
  I2C_RESET_CR2(hi2c);
 800140c:	4827      	ldr	r0, [pc, #156]	; (80014ac <I2C_ITMasterCplt+0xac>)
 800140e:	4002      	ands	r2, r0
 8001410:	605a      	str	r2, [r3, #4]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001412:	2200      	movs	r2, #0
 8001414:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->XferISR       = NULL;
 8001416:	6362      	str	r2, [r4, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001418:	4a25      	ldr	r2, [pc, #148]	; (80014b0 <I2C_ITMasterCplt+0xb0>)
 800141a:	62e2      	str	r2, [r4, #44]	; 0x2c
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET)
 800141c:	2210      	movs	r2, #16
 800141e:	4211      	tst	r1, r2
 8001420:	d004      	beq.n	800142c <I2C_ITMasterCplt+0x2c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001422:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001424:	2304      	movs	r3, #4
 8001426:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001428:	4313      	orrs	r3, r2
 800142a:	6463      	str	r3, [r4, #68]	; 0x44
  I2C_Flush_TXDR(hi2c);
 800142c:	0020      	movs	r0, r4
 800142e:	f7ff fb75 	bl	8000b1c <I2C_Flush_TXDR>
  I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8001432:	2103      	movs	r1, #3
 8001434:	0020      	movs	r0, r4
 8001436:	f7ff fbc9 	bl	8000bcc <I2C_Disable_IRQ>
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800143a:	0022      	movs	r2, r4
 800143c:	3241      	adds	r2, #65	; 0x41
  tmperror = hi2c->ErrorCode;
 800143e:	6c63      	ldr	r3, [r4, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8001440:	7811      	ldrb	r1, [r2, #0]
 8001442:	2960      	cmp	r1, #96	; 0x60
 8001444:	d001      	beq.n	800144a <I2C_ITMasterCplt+0x4a>
 8001446:	2b00      	cmp	r3, #0
 8001448:	d004      	beq.n	8001454 <I2C_ITMasterCplt+0x54>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800144a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800144c:	0020      	movs	r0, r4
 800144e:	f7ff fe59 	bl	8001104 <I2C_ITError>
}
 8001452:	bd10      	pop	{r4, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001454:	7811      	ldrb	r1, [r2, #0]
 8001456:	2921      	cmp	r1, #33	; 0x21
 8001458:	d112      	bne.n	8001480 <I2C_ITMasterCplt+0x80>
    hi2c->State = HAL_I2C_STATE_READY;
 800145a:	3901      	subs	r1, #1
 800145c:	7011      	strb	r1, [r2, #0]
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800145e:	0022      	movs	r2, r4
 8001460:	0021      	movs	r1, r4
 8001462:	3242      	adds	r2, #66	; 0x42
 8001464:	7810      	ldrb	r0, [r2, #0]
 8001466:	3140      	adds	r1, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001468:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 800146a:	700b      	strb	r3, [r1, #0]
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800146c:	2840      	cmp	r0, #64	; 0x40
 800146e:	d103      	bne.n	8001478 <I2C_ITMasterCplt+0x78>
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001470:	0020      	movs	r0, r4
 8001472:	f7ff fe43 	bl	80010fc <HAL_I2C_MemTxCpltCallback>
 8001476:	e7ec      	b.n	8001452 <I2C_ITMasterCplt+0x52>
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001478:	0020      	movs	r0, r4
 800147a:	f7ff fd70 	bl	8000f5e <HAL_I2C_MasterTxCpltCallback>
 800147e:	e7e8      	b.n	8001452 <I2C_ITMasterCplt+0x52>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001480:	7811      	ldrb	r1, [r2, #0]
 8001482:	2922      	cmp	r1, #34	; 0x22
 8001484:	d1e5      	bne.n	8001452 <I2C_ITMasterCplt+0x52>
    hi2c->State = HAL_I2C_STATE_READY;
 8001486:	3902      	subs	r1, #2
 8001488:	7011      	strb	r1, [r2, #0]
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800148a:	0022      	movs	r2, r4
 800148c:	0021      	movs	r1, r4
 800148e:	3242      	adds	r2, #66	; 0x42
 8001490:	7810      	ldrb	r0, [r2, #0]
 8001492:	3140      	adds	r1, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001494:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 8001496:	700b      	strb	r3, [r1, #0]
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001498:	2840      	cmp	r0, #64	; 0x40
 800149a:	d103      	bne.n	80014a4 <I2C_ITMasterCplt+0xa4>
      HAL_I2C_MemRxCpltCallback(hi2c);
 800149c:	0020      	movs	r0, r4
 800149e:	f7ff fe2e 	bl	80010fe <HAL_I2C_MemRxCpltCallback>
 80014a2:	e7d6      	b.n	8001452 <I2C_ITMasterCplt+0x52>
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80014a4:	0020      	movs	r0, r4
 80014a6:	f7ff fd5b 	bl	8000f60 <HAL_I2C_MasterRxCpltCallback>
}
 80014aa:	e7d2      	b.n	8001452 <I2C_ITMasterCplt+0x52>
 80014ac:	fe00e800 	.word	0xfe00e800
 80014b0:	ffff0000 	.word	0xffff0000

080014b4 <I2C_Master_ISR_IT>:
{
 80014b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 80014b6:	0007      	movs	r7, r0
 80014b8:	3740      	adds	r7, #64	; 0x40
 80014ba:	783b      	ldrb	r3, [r7, #0]
{
 80014bc:	0004      	movs	r4, r0
 80014be:	000d      	movs	r5, r1
 80014c0:	0016      	movs	r6, r2
  __HAL_LOCK(hi2c);
 80014c2:	2002      	movs	r0, #2
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d01a      	beq.n	80014fe <I2C_Master_ISR_IT+0x4a>
 80014c8:	2301      	movs	r3, #1
 80014ca:	703b      	strb	r3, [r7, #0]
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80014cc:	330f      	adds	r3, #15
 80014ce:	4219      	tst	r1, r3
 80014d0:	d016      	beq.n	8001500 <I2C_Master_ISR_IT+0x4c>
 80014d2:	421a      	tst	r2, r3
 80014d4:	d014      	beq.n	8001500 <I2C_Master_ISR_IT+0x4c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80014d6:	6822      	ldr	r2, [r4, #0]
    I2C_Flush_TXDR(hi2c);
 80014d8:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80014da:	61d3      	str	r3, [r2, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80014dc:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80014de:	3b0c      	subs	r3, #12
 80014e0:	4313      	orrs	r3, r2
 80014e2:	6463      	str	r3, [r4, #68]	; 0x44
    I2C_Flush_TXDR(hi2c);
 80014e4:	f7ff fb1a 	bl	8000b1c <I2C_Flush_TXDR>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80014e8:	2320      	movs	r3, #32
 80014ea:	421d      	tst	r5, r3
 80014ec:	d005      	beq.n	80014fa <I2C_Master_ISR_IT+0x46>
 80014ee:	421e      	tst	r6, r3
 80014f0:	d003      	beq.n	80014fa <I2C_Master_ISR_IT+0x46>
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80014f2:	0029      	movs	r1, r5
 80014f4:	0020      	movs	r0, r4
 80014f6:	f7ff ff83 	bl	8001400 <I2C_ITMasterCplt>
  __HAL_UNLOCK(hi2c);
 80014fa:	2000      	movs	r0, #0
 80014fc:	7038      	strb	r0, [r7, #0]
}
 80014fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001500:	2304      	movs	r3, #4
 8001502:	421d      	tst	r5, r3
 8001504:	d011      	beq.n	800152a <I2C_Master_ISR_IT+0x76>
 8001506:	421e      	tst	r6, r3
 8001508:	d00f      	beq.n	800152a <I2C_Master_ISR_IT+0x76>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800150a:	439d      	bics	r5, r3
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800150c:	6823      	ldr	r3, [r4, #0]
 800150e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001512:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr++;
 8001514:	6a63      	ldr	r3, [r4, #36]	; 0x24
    hi2c->pBuffPtr++;
 8001516:	3301      	adds	r3, #1
 8001518:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferSize--;
 800151a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800151c:	3b01      	subs	r3, #1
 800151e:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferCount--;
 8001520:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001522:	3b01      	subs	r3, #1
 8001524:	b29b      	uxth	r3, r3
 8001526:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001528:	e7de      	b.n	80014e8 <I2C_Master_ISR_IT+0x34>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800152a:	2302      	movs	r3, #2
 800152c:	421d      	tst	r5, r3
 800152e:	d006      	beq.n	800153e <I2C_Master_ISR_IT+0x8a>
 8001530:	421e      	tst	r6, r3
 8001532:	d004      	beq.n	800153e <I2C_Master_ISR_IT+0x8a>
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001534:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001536:	6822      	ldr	r2, [r4, #0]
 8001538:	7819      	ldrb	r1, [r3, #0]
 800153a:	6291      	str	r1, [r2, #40]	; 0x28
 800153c:	e7eb      	b.n	8001516 <I2C_Master_ISR_IT+0x62>
 800153e:	2340      	movs	r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001540:	062a      	lsls	r2, r5, #24
 8001542:	d533      	bpl.n	80015ac <I2C_Master_ISR_IT+0xf8>
 8001544:	421e      	tst	r6, r3
 8001546:	d031      	beq.n	80015ac <I2C_Master_ISR_IT+0xf8>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001548:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800154a:	6823      	ldr	r3, [r4, #0]
 800154c:	2a00      	cmp	r2, #0
 800154e:	d021      	beq.n	8001594 <I2C_Master_ISR_IT+0xe0>
 8001550:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 8001552:	2800      	cmp	r0, #0
 8001554:	d11e      	bne.n	8001594 <I2C_Master_ISR_IT+0xe0>
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8001556:	6859      	ldr	r1, [r3, #4]
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001558:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800155a:	0589      	lsls	r1, r1, #22
 800155c:	0d89      	lsrs	r1, r1, #22
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800155e:	2bff      	cmp	r3, #255	; 0xff
 8001560:	d908      	bls.n	8001574 <I2C_Master_ISR_IT+0xc0>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001562:	22ff      	movs	r2, #255	; 0xff
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001564:	2380      	movs	r3, #128	; 0x80
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001566:	8522      	strh	r2, [r4, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001568:	9000      	str	r0, [sp, #0]
 800156a:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 800156c:	0020      	movs	r0, r4
 800156e:	f7ff fae3 	bl	8000b38 <I2C_TransferConfig>
 8001572:	e7b9      	b.n	80014e8 <I2C_Master_ISR_IT+0x34>
        hi2c->XferSize = hi2c->XferCount;
 8001574:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001576:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        hi2c->XferSize = hi2c->XferCount;
 8001578:	b292      	uxth	r2, r2
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800157a:	469c      	mov	ip, r3
 800157c:	4b17      	ldr	r3, [pc, #92]	; (80015dc <I2C_Master_ISR_IT+0x128>)
        hi2c->XferSize = hi2c->XferCount;
 800157e:	8522      	strh	r2, [r4, #40]	; 0x28
 8001580:	b2d2      	uxtb	r2, r2
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001582:	459c      	cmp	ip, r3
 8001584:	d002      	beq.n	800158c <I2C_Master_ISR_IT+0xd8>
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 8001586:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001588:	9000      	str	r0, [sp, #0]
 800158a:	e7ef      	b.n	800156c <I2C_Master_ISR_IT+0xb8>
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800158c:	2380      	movs	r3, #128	; 0x80
 800158e:	9000      	str	r0, [sp, #0]
 8001590:	049b      	lsls	r3, r3, #18
 8001592:	e7eb      	b.n	800156c <I2C_Master_ISR_IT+0xb8>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	019b      	lsls	r3, r3, #6
 8001598:	d403      	bmi.n	80015a2 <I2C_Master_ISR_IT+0xee>
        I2C_ITMasterSeqCplt(hi2c);
 800159a:	0020      	movs	r0, r4
 800159c:	f7ff fce1 	bl	8000f62 <I2C_ITMasterSeqCplt>
 80015a0:	e7a2      	b.n	80014e8 <I2C_Master_ISR_IT+0x34>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80015a2:	2140      	movs	r1, #64	; 0x40
 80015a4:	0020      	movs	r0, r4
 80015a6:	f7ff fdad 	bl	8001104 <I2C_ITError>
 80015aa:	e79d      	b.n	80014e8 <I2C_Master_ISR_IT+0x34>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80015ac:	421d      	tst	r5, r3
 80015ae:	d09b      	beq.n	80014e8 <I2C_Master_ISR_IT+0x34>
 80015b0:	421e      	tst	r6, r3
 80015b2:	d100      	bne.n	80015b6 <I2C_Master_ISR_IT+0x102>
 80015b4:	e798      	b.n	80014e8 <I2C_Master_ISR_IT+0x34>
    if (hi2c->XferCount == 0U)
 80015b6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1f2      	bne.n	80015a2 <I2C_Master_ISR_IT+0xee>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80015bc:	6823      	ldr	r3, [r4, #0]
 80015be:	685a      	ldr	r2, [r3, #4]
 80015c0:	0192      	lsls	r2, r2, #6
 80015c2:	d500      	bpl.n	80015c6 <I2C_Master_ISR_IT+0x112>
 80015c4:	e790      	b.n	80014e8 <I2C_Master_ISR_IT+0x34>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80015c6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80015c8:	4a04      	ldr	r2, [pc, #16]	; (80015dc <I2C_Master_ISR_IT+0x128>)
 80015ca:	4291      	cmp	r1, r2
 80015cc:	d1e5      	bne.n	800159a <I2C_Master_ISR_IT+0xe6>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80015ce:	2280      	movs	r2, #128	; 0x80
 80015d0:	6859      	ldr	r1, [r3, #4]
 80015d2:	01d2      	lsls	r2, r2, #7
 80015d4:	430a      	orrs	r2, r1
 80015d6:	605a      	str	r2, [r3, #4]
 80015d8:	e786      	b.n	80014e8 <I2C_Master_ISR_IT+0x34>
 80015da:	46c0      	nop			; (mov r8, r8)
 80015dc:	ffff0000 	.word	0xffff0000

080015e0 <I2C_Slave_ISR_DMA>:
{
 80015e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 80015e2:	0005      	movs	r5, r0
 80015e4:	3540      	adds	r5, #64	; 0x40
 80015e6:	782b      	ldrb	r3, [r5, #0]
{
 80015e8:	0004      	movs	r4, r0
  uint32_t tmpoptions = hi2c->XferOptions;
 80015ea:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 80015ec:	2002      	movs	r0, #2
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d02d      	beq.n	800164e <I2C_Slave_ISR_DMA+0x6e>
 80015f2:	2301      	movs	r3, #1
 80015f4:	702b      	strb	r3, [r5, #0]
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80015f6:	330f      	adds	r3, #15
 80015f8:	4219      	tst	r1, r3
 80015fa:	d04b      	beq.n	8001694 <I2C_Slave_ISR_DMA+0xb4>
 80015fc:	421a      	tst	r2, r3
 80015fe:	d049      	beq.n	8001694 <I2C_Slave_ISR_DMA+0xb4>
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001600:	20c0      	movs	r0, #192	; 0xc0
 8001602:	0200      	lsls	r0, r0, #8
 8001604:	4202      	tst	r2, r0
 8001606:	d042      	beq.n	800168e <I2C_Slave_ISR_DMA+0xae>
      if (hi2c->hdmarx != NULL)
 8001608:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  uint32_t treatdmanack = 0U;
 800160a:	1e03      	subs	r3, r0, #0
      if (hi2c->hdmarx != NULL)
 800160c:	d006      	beq.n	800161c <I2C_Slave_ISR_DMA+0x3c>
  uint32_t treatdmanack = 0U;
 800160e:	2300      	movs	r3, #0
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8001610:	0417      	lsls	r7, r2, #16
 8001612:	d503      	bpl.n	800161c <I2C_Slave_ISR_DMA+0x3c>
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8001614:	6803      	ldr	r3, [r0, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
  uint32_t treatdmanack = 0U;
 8001618:	4258      	negs	r0, r3
 800161a:	4143      	adcs	r3, r0
      if (hi2c->hdmatx != NULL)
 800161c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800161e:	2800      	cmp	r0, #0
 8001620:	d005      	beq.n	800162e <I2C_Slave_ISR_DMA+0x4e>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8001622:	0452      	lsls	r2, r2, #17
 8001624:	d503      	bpl.n	800162e <I2C_Slave_ISR_DMA+0x4e>
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8001626:	6802      	ldr	r2, [r0, #0]
 8001628:	6852      	ldr	r2, [r2, #4]
 800162a:	2a00      	cmp	r2, #0
 800162c:	d001      	beq.n	8001632 <I2C_Slave_ISR_DMA+0x52>
      if (treatdmanack == 1U)
 800162e:	2b01      	cmp	r3, #1
 8001630:	d11e      	bne.n	8001670 <I2C_Slave_ISR_DMA+0x90>
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8001632:	0023      	movs	r3, r4
 8001634:	3341      	adds	r3, #65	; 0x41
 8001636:	781a      	ldrb	r2, [r3, #0]
 8001638:	2a28      	cmp	r2, #40	; 0x28
 800163a:	d109      	bne.n	8001650 <I2C_Slave_ISR_DMA+0x70>
 800163c:	2280      	movs	r2, #128	; 0x80
 800163e:	0492      	lsls	r2, r2, #18
 8001640:	4296      	cmp	r6, r2
 8001642:	d105      	bne.n	8001650 <I2C_Slave_ISR_DMA+0x70>
          I2C_ITListenCplt(hi2c, ITFlags);
 8001644:	0020      	movs	r0, r4
 8001646:	f7ff fd25 	bl	8001094 <I2C_ITListenCplt>
  __HAL_UNLOCK(hi2c);
 800164a:	2000      	movs	r0, #0
 800164c:	7028      	strb	r0, [r5, #0]
}
 800164e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001650:	2210      	movs	r2, #16
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001652:	7819      	ldrb	r1, [r3, #0]
 8001654:	6823      	ldr	r3, [r4, #0]
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001656:	61da      	str	r2, [r3, #28]
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001658:	2929      	cmp	r1, #41	; 0x29
 800165a:	d1f6      	bne.n	800164a <I2C_Slave_ISR_DMA+0x6a>
 800165c:	4916      	ldr	r1, [pc, #88]	; (80016b8 <I2C_Slave_ISR_DMA+0xd8>)
 800165e:	428e      	cmp	r6, r1
 8001660:	d0f3      	beq.n	800164a <I2C_Slave_ISR_DMA+0x6a>
          I2C_Flush_TXDR(hi2c);
 8001662:	0020      	movs	r0, r4
 8001664:	f7ff fa5a 	bl	8000b1c <I2C_Flush_TXDR>
          I2C_ITSlaveSeqCplt(hi2c);
 8001668:	0020      	movs	r0, r4
 800166a:	f7ff fca0 	bl	8000fae <I2C_ITSlaveSeqCplt>
 800166e:	e7ec      	b.n	800164a <I2C_Slave_ISR_DMA+0x6a>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001670:	2210      	movs	r2, #16
 8001672:	6823      	ldr	r3, [r4, #0]
 8001674:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001676:	2304      	movs	r3, #4
 8001678:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800167a:	4313      	orrs	r3, r2
 800167c:	6463      	str	r3, [r4, #68]	; 0x44
        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800167e:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <I2C_Slave_ISR_DMA+0xdc>)
 8001680:	421e      	tst	r6, r3
 8001682:	d1e2      	bne.n	800164a <I2C_Slave_ISR_DMA+0x6a>
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8001684:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001686:	0020      	movs	r0, r4
 8001688:	f7ff fd3c 	bl	8001104 <I2C_ITError>
 800168c:	e7dd      	b.n	800164a <I2C_Slave_ISR_DMA+0x6a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800168e:	6822      	ldr	r2, [r4, #0]
 8001690:	61d3      	str	r3, [r2, #28]
 8001692:	e7da      	b.n	800164a <I2C_Slave_ISR_DMA+0x6a>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001694:	2308      	movs	r3, #8
 8001696:	4219      	tst	r1, r3
 8001698:	d005      	beq.n	80016a6 <I2C_Slave_ISR_DMA+0xc6>
 800169a:	421a      	tst	r2, r3
 800169c:	d003      	beq.n	80016a6 <I2C_Slave_ISR_DMA+0xc6>
    I2C_ITAddrCplt(hi2c, ITFlags);
 800169e:	0020      	movs	r0, r4
 80016a0:	f7ff fcaf 	bl	8001002 <I2C_ITAddrCplt.isra.8>
 80016a4:	e7d1      	b.n	800164a <I2C_Slave_ISR_DMA+0x6a>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80016a6:	2320      	movs	r3, #32
 80016a8:	4219      	tst	r1, r3
 80016aa:	d0ce      	beq.n	800164a <I2C_Slave_ISR_DMA+0x6a>
 80016ac:	421a      	tst	r2, r3
 80016ae:	d0cc      	beq.n	800164a <I2C_Slave_ISR_DMA+0x6a>
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80016b0:	0020      	movs	r0, r4
 80016b2:	f7ff fd99 	bl	80011e8 <I2C_ITSlaveCplt>
 80016b6:	e7c8      	b.n	800164a <I2C_Slave_ISR_DMA+0x6a>
 80016b8:	ffff0000 	.word	0xffff0000
 80016bc:	feffffff 	.word	0xfeffffff

080016c0 <I2C_Master_ISR_DMA>:
{
 80016c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_LOCK(hi2c);
 80016c2:	0005      	movs	r5, r0
 80016c4:	3540      	adds	r5, #64	; 0x40
 80016c6:	782b      	ldrb	r3, [r5, #0]
{
 80016c8:	0004      	movs	r4, r0
  __HAL_LOCK(hi2c);
 80016ca:	2002      	movs	r0, #2
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d015      	beq.n	80016fc <I2C_Master_ISR_DMA+0x3c>
 80016d0:	2301      	movs	r3, #1
 80016d2:	702b      	strb	r3, [r5, #0]
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80016d4:	330f      	adds	r3, #15
 80016d6:	4219      	tst	r1, r3
 80016d8:	d011      	beq.n	80016fe <I2C_Master_ISR_DMA+0x3e>
 80016da:	421a      	tst	r2, r3
 80016dc:	d00f      	beq.n	80016fe <I2C_Master_ISR_DMA+0x3e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016de:	6822      	ldr	r2, [r4, #0]
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80016e0:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016e2:	61d3      	str	r3, [r2, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80016e4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80016e6:	3b0c      	subs	r3, #12
 80016e8:	4313      	orrs	r3, r2
 80016ea:	6463      	str	r3, [r4, #68]	; 0x44
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80016ec:	2112      	movs	r1, #18
 80016ee:	f7ff fa39 	bl	8000b64 <I2C_Enable_IRQ>
    I2C_Flush_TXDR(hi2c);
 80016f2:	0020      	movs	r0, r4
 80016f4:	f7ff fa12 	bl	8000b1c <I2C_Flush_TXDR>
  __HAL_UNLOCK(hi2c);
 80016f8:	2000      	movs	r0, #0
 80016fa:	7028      	strb	r0, [r5, #0]
}
 80016fc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 80016fe:	2340      	movs	r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001700:	0608      	lsls	r0, r1, #24
 8001702:	d544      	bpl.n	800178e <I2C_Master_ISR_DMA+0xce>
 8001704:	421a      	tst	r2, r3
 8001706:	d042      	beq.n	800178e <I2C_Master_ISR_DMA+0xce>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8001708:	6822      	ldr	r2, [r4, #0]
 800170a:	6811      	ldr	r1, [r2, #0]
 800170c:	4399      	bics	r1, r3
 800170e:	6011      	str	r1, [r2, #0]
    if (hi2c->XferCount != 0U)
 8001710:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001712:	2b00      	cmp	r3, #0
 8001714:	d02f      	beq.n	8001776 <I2C_Master_ISR_DMA+0xb6>
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8001716:	6851      	ldr	r1, [r2, #4]
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001718:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800171a:	0589      	lsls	r1, r1, #22
 800171c:	0d89      	lsrs	r1, r1, #22
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800171e:	2bff      	cmp	r3, #255	; 0xff
 8001720:	d91b      	bls.n	800175a <I2C_Master_ISR_DMA+0x9a>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001722:	23ff      	movs	r3, #255	; 0xff
 8001724:	8523      	strh	r3, [r4, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8001726:	2380      	movs	r3, #128	; 0x80
 8001728:	045b      	lsls	r3, r3, #17
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800172a:	2000      	movs	r0, #0
 800172c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800172e:	9000      	str	r0, [sp, #0]
 8001730:	b2d2      	uxtb	r2, r2
 8001732:	0020      	movs	r0, r4
 8001734:	f7ff fa00 	bl	8000b38 <I2C_TransferConfig>
      hi2c->XferCount -= hi2c->XferSize;
 8001738:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800173a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800173c:	1a9b      	subs	r3, r3, r2
 800173e:	b29b      	uxth	r3, r3
 8001740:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001742:	0023      	movs	r3, r4
 8001744:	3341      	adds	r3, #65	; 0x41
 8001746:	781a      	ldrb	r2, [r3, #0]
 8001748:	6823      	ldr	r3, [r4, #0]
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800174a:	6819      	ldr	r1, [r3, #0]
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800174c:	2a22      	cmp	r2, #34	; 0x22
 800174e:	d10f      	bne.n	8001770 <I2C_Master_ISR_DMA+0xb0>
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001750:	2280      	movs	r2, #128	; 0x80
 8001752:	0212      	lsls	r2, r2, #8
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001754:	430a      	orrs	r2, r1
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	e7ce      	b.n	80016f8 <I2C_Master_ISR_DMA+0x38>
        hi2c->XferSize = hi2c->XferCount;
 800175a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800175c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        hi2c->XferSize = hi2c->XferCount;
 800175e:	8523      	strh	r3, [r4, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001760:	4b1a      	ldr	r3, [pc, #104]	; (80017cc <I2C_Master_ISR_DMA+0x10c>)
 8001762:	429a      	cmp	r2, r3
 8001764:	d001      	beq.n	800176a <I2C_Master_ISR_DMA+0xaa>
          xfermode = hi2c->XferOptions;
 8001766:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001768:	e7df      	b.n	800172a <I2C_Master_ISR_DMA+0x6a>
          xfermode = I2C_AUTOEND_MODE;
 800176a:	2380      	movs	r3, #128	; 0x80
 800176c:	049b      	lsls	r3, r3, #18
 800176e:	e7dc      	b.n	800172a <I2C_Master_ISR_DMA+0x6a>
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001770:	2280      	movs	r2, #128	; 0x80
 8001772:	01d2      	lsls	r2, r2, #7
 8001774:	e7ee      	b.n	8001754 <I2C_Master_ISR_DMA+0x94>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001776:	6853      	ldr	r3, [r2, #4]
 8001778:	019b      	lsls	r3, r3, #6
 800177a:	d403      	bmi.n	8001784 <I2C_Master_ISR_DMA+0xc4>
        I2C_ITMasterSeqCplt(hi2c);
 800177c:	0020      	movs	r0, r4
 800177e:	f7ff fbf0 	bl	8000f62 <I2C_ITMasterSeqCplt>
 8001782:	e7b9      	b.n	80016f8 <I2C_Master_ISR_DMA+0x38>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001784:	2140      	movs	r1, #64	; 0x40
 8001786:	0020      	movs	r0, r4
 8001788:	f7ff fcbc 	bl	8001104 <I2C_ITError>
 800178c:	e7b4      	b.n	80016f8 <I2C_Master_ISR_DMA+0x38>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800178e:	4219      	tst	r1, r3
 8001790:	d012      	beq.n	80017b8 <I2C_Master_ISR_DMA+0xf8>
 8001792:	421a      	tst	r2, r3
 8001794:	d010      	beq.n	80017b8 <I2C_Master_ISR_DMA+0xf8>
    if (hi2c->XferCount == 0U)
 8001796:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001798:	2b00      	cmp	r3, #0
 800179a:	d1f3      	bne.n	8001784 <I2C_Master_ISR_DMA+0xc4>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800179c:	6823      	ldr	r3, [r4, #0]
 800179e:	685a      	ldr	r2, [r3, #4]
 80017a0:	0192      	lsls	r2, r2, #6
 80017a2:	d4a9      	bmi.n	80016f8 <I2C_Master_ISR_DMA+0x38>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80017a4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80017a6:	4a09      	ldr	r2, [pc, #36]	; (80017cc <I2C_Master_ISR_DMA+0x10c>)
 80017a8:	4291      	cmp	r1, r2
 80017aa:	d1e7      	bne.n	800177c <I2C_Master_ISR_DMA+0xbc>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80017ac:	2280      	movs	r2, #128	; 0x80
 80017ae:	6859      	ldr	r1, [r3, #4]
 80017b0:	01d2      	lsls	r2, r2, #7
 80017b2:	430a      	orrs	r2, r1
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	e79f      	b.n	80016f8 <I2C_Master_ISR_DMA+0x38>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80017b8:	2320      	movs	r3, #32
 80017ba:	4219      	tst	r1, r3
 80017bc:	d09c      	beq.n	80016f8 <I2C_Master_ISR_DMA+0x38>
 80017be:	421a      	tst	r2, r3
 80017c0:	d100      	bne.n	80017c4 <I2C_Master_ISR_DMA+0x104>
 80017c2:	e799      	b.n	80016f8 <I2C_Master_ISR_DMA+0x38>
    I2C_ITMasterCplt(hi2c, ITFlags);
 80017c4:	0020      	movs	r0, r4
 80017c6:	f7ff fe1b 	bl	8001400 <I2C_ITMasterCplt>
 80017ca:	e795      	b.n	80016f8 <I2C_Master_ISR_DMA+0x38>
 80017cc:	ffff0000 	.word	0xffff0000

080017d0 <I2C_DMAError>:
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80017d0:	2380      	movs	r3, #128	; 0x80
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80017d2:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 80017d4:	b510      	push	{r4, lr}
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80017d6:	6802      	ldr	r2, [r0, #0]
 80017d8:	021b      	lsls	r3, r3, #8
 80017da:	6851      	ldr	r1, [r2, #4]
 80017dc:	430b      	orrs	r3, r1
 80017de:	6053      	str	r3, [r2, #4]
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80017e0:	2110      	movs	r1, #16
 80017e2:	f7ff fc8f 	bl	8001104 <I2C_ITError>
}
 80017e6:	bd10      	pop	{r4, pc}

080017e8 <I2C_DMAMasterTransmitCplt>:
{
 80017e8:	b510      	push	{r4, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80017ea:	6a84      	ldr	r4, [r0, #40]	; 0x28
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80017ec:	4911      	ldr	r1, [pc, #68]	; (8001834 <I2C_DMAMasterTransmitCplt+0x4c>)
 80017ee:	6822      	ldr	r2, [r4, #0]
 80017f0:	6813      	ldr	r3, [r2, #0]
 80017f2:	400b      	ands	r3, r1
 80017f4:	6013      	str	r3, [r2, #0]
  if (hi2c->XferCount == 0U)
 80017f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d104      	bne.n	8001806 <I2C_DMAMasterTransmitCplt+0x1e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80017fc:	2112      	movs	r1, #18
 80017fe:	0020      	movs	r0, r4
 8001800:	f7ff f9b0 	bl	8000b64 <I2C_Enable_IRQ>
}
 8001804:	e013      	b.n	800182e <I2C_DMAMasterTransmitCplt+0x46>
    hi2c->pBuffPtr += hi2c->XferSize;
 8001806:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001808:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800180a:	1859      	adds	r1, r3, r1
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800180c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr += hi2c->XferSize;
 800180e:	6261      	str	r1, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001810:	2bff      	cmp	r3, #255	; 0xff
 8001812:	d90d      	bls.n	8001830 <I2C_DMAMasterTransmitCplt+0x48>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001814:	23ff      	movs	r3, #255	; 0xff
      hi2c->XferSize = hi2c->XferCount;
 8001816:	8523      	strh	r3, [r4, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize) != HAL_OK)
 8001818:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800181a:	3228      	adds	r2, #40	; 0x28
 800181c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800181e:	f7fe fffd 	bl	800081c <HAL_DMA_Start_IT>
 8001822:	2800      	cmp	r0, #0
 8001824:	d0ea      	beq.n	80017fc <I2C_DMAMasterTransmitCplt+0x14>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8001826:	2110      	movs	r1, #16
 8001828:	0020      	movs	r0, r4
 800182a:	f7ff fc6b 	bl	8001104 <I2C_ITError>
}
 800182e:	bd10      	pop	{r4, pc}
      hi2c->XferSize = hi2c->XferCount;
 8001830:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001832:	e7f0      	b.n	8001816 <I2C_DMAMasterTransmitCplt+0x2e>
 8001834:	ffffbfff 	.word	0xffffbfff

08001838 <I2C_DMAMasterReceiveCplt>:
{
 8001838:	b510      	push	{r4, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800183a:	6a84      	ldr	r4, [r0, #40]	; 0x28
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800183c:	4a11      	ldr	r2, [pc, #68]	; (8001884 <I2C_DMAMasterReceiveCplt+0x4c>)
 800183e:	6821      	ldr	r1, [r4, #0]
 8001840:	680b      	ldr	r3, [r1, #0]
 8001842:	4013      	ands	r3, r2
 8001844:	600b      	str	r3, [r1, #0]
  if (hi2c->XferCount == 0U)
 8001846:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001848:	2b00      	cmp	r3, #0
 800184a:	d104      	bne.n	8001856 <I2C_DMAMasterReceiveCplt+0x1e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800184c:	2112      	movs	r1, #18
 800184e:	0020      	movs	r0, r4
 8001850:	f7ff f988 	bl	8000b64 <I2C_Enable_IRQ>
}
 8001854:	e013      	b.n	800187e <I2C_DMAMasterReceiveCplt+0x46>
    hi2c->pBuffPtr += hi2c->XferSize;
 8001856:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001858:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800185a:	189a      	adds	r2, r3, r2
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800185c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr += hi2c->XferSize;
 800185e:	6262      	str	r2, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001860:	2bff      	cmp	r3, #255	; 0xff
 8001862:	d90d      	bls.n	8001880 <I2C_DMAMasterReceiveCplt+0x48>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001864:	23ff      	movs	r3, #255	; 0xff
      hi2c->XferSize = hi2c->XferCount;
 8001866:	8523      	strh	r3, [r4, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize) != HAL_OK)
 8001868:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800186a:	3124      	adds	r1, #36	; 0x24
 800186c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800186e:	f7fe ffd5 	bl	800081c <HAL_DMA_Start_IT>
 8001872:	2800      	cmp	r0, #0
 8001874:	d0ea      	beq.n	800184c <I2C_DMAMasterReceiveCplt+0x14>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8001876:	2110      	movs	r1, #16
 8001878:	0020      	movs	r0, r4
 800187a:	f7ff fc43 	bl	8001104 <I2C_ITError>
}
 800187e:	bd10      	pop	{r4, pc}
      hi2c->XferSize = hi2c->XferCount;
 8001880:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001882:	e7f0      	b.n	8001866 <I2C_DMAMasterReceiveCplt+0x2e>
 8001884:	ffff7fff 	.word	0xffff7fff

08001888 <HAL_I2C_ER_IRQHandler>:
{
 8001888:	b570      	push	{r4, r5, r6, lr}
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800188a:	2580      	movs	r5, #128	; 0x80
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800188c:	6803      	ldr	r3, [r0, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800188e:	006d      	lsls	r5, r5, #1
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001890:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001892:	681a      	ldr	r2, [r3, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001894:	4229      	tst	r1, r5
 8001896:	d006      	beq.n	80018a6 <HAL_I2C_ER_IRQHandler+0x1e>
 8001898:	0614      	lsls	r4, r2, #24
 800189a:	d504      	bpl.n	80018a6 <HAL_I2C_ER_IRQHandler+0x1e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800189c:	2401      	movs	r4, #1
 800189e:	6c46      	ldr	r6, [r0, #68]	; 0x44
 80018a0:	4334      	orrs	r4, r6
 80018a2:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80018a4:	61dd      	str	r5, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80018a6:	2580      	movs	r5, #128	; 0x80
 80018a8:	00ed      	lsls	r5, r5, #3
 80018aa:	4229      	tst	r1, r5
 80018ac:	d006      	beq.n	80018bc <HAL_I2C_ER_IRQHandler+0x34>
 80018ae:	0614      	lsls	r4, r2, #24
 80018b0:	d504      	bpl.n	80018bc <HAL_I2C_ER_IRQHandler+0x34>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80018b2:	2408      	movs	r4, #8
 80018b4:	6c46      	ldr	r6, [r0, #68]	; 0x44
 80018b6:	4334      	orrs	r4, r6
 80018b8:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80018ba:	61dd      	str	r5, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80018bc:	2480      	movs	r4, #128	; 0x80
 80018be:	00a4      	lsls	r4, r4, #2
 80018c0:	4221      	tst	r1, r4
 80018c2:	d006      	beq.n	80018d2 <HAL_I2C_ER_IRQHandler+0x4a>
 80018c4:	0612      	lsls	r2, r2, #24
 80018c6:	d504      	bpl.n	80018d2 <HAL_I2C_ER_IRQHandler+0x4a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80018c8:	2202      	movs	r2, #2
 80018ca:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80018cc:	430a      	orrs	r2, r1
 80018ce:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80018d0:	61dc      	str	r4, [r3, #28]
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80018d2:	230b      	movs	r3, #11
  tmperror = hi2c->ErrorCode;
 80018d4:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80018d6:	4219      	tst	r1, r3
 80018d8:	d001      	beq.n	80018de <HAL_I2C_ER_IRQHandler+0x56>
    I2C_ITError(hi2c, tmperror);
 80018da:	f7ff fc13 	bl	8001104 <I2C_ITError>
}
 80018de:	bd70      	pop	{r4, r5, r6, pc}

080018e0 <I2C_DMAAbort>:
  hi2c->hdmatx->XferAbortCallback = NULL;
 80018e0:	2300      	movs	r3, #0
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80018e2:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 80018e4:	b510      	push	{r4, lr}
  hi2c->hdmatx->XferAbortCallback = NULL;
 80018e6:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80018e8:	6393      	str	r3, [r2, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 80018ea:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80018ec:	6393      	str	r3, [r2, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80018ee:	0003      	movs	r3, r0
 80018f0:	3341      	adds	r3, #65	; 0x41
 80018f2:	781a      	ldrb	r2, [r3, #0]
 80018f4:	2a60      	cmp	r2, #96	; 0x60
 80018f6:	d104      	bne.n	8001902 <I2C_DMAAbort+0x22>
    hi2c->State = HAL_I2C_STATE_READY;
 80018f8:	3a40      	subs	r2, #64	; 0x40
 80018fa:	701a      	strb	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 80018fc:	f7ff fc01 	bl	8001102 <HAL_I2C_AbortCpltCallback>
}
 8001900:	bd10      	pop	{r4, pc}
    HAL_I2C_ErrorCallback(hi2c);
 8001902:	f7ff fbfd 	bl	8001100 <HAL_I2C_ErrorCallback>
}
 8001906:	e7fb      	b.n	8001900 <I2C_DMAAbort+0x20>

08001908 <HAL_I2C_GetState>:
  return hi2c->State;
 8001908:	3041      	adds	r0, #65	; 0x41
 800190a:	7800      	ldrb	r0, [r0, #0]
 800190c:	b2c0      	uxtb	r0, r0
}
 800190e:	4770      	bx	lr

08001910 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8001910:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 8001912:	4770      	bx	lr

08001914 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001914:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001916:	0004      	movs	r4, r0
 8001918:	3441      	adds	r4, #65	; 0x41
 800191a:	7822      	ldrb	r2, [r4, #0]
{
 800191c:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800191e:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001920:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001922:	2a20      	cmp	r2, #32
 8001924:	d118      	bne.n	8001958 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 8001926:	001d      	movs	r5, r3
 8001928:	3540      	adds	r5, #64	; 0x40
 800192a:	782e      	ldrb	r6, [r5, #0]
 800192c:	2e01      	cmp	r6, #1
 800192e:	d013      	beq.n	8001958 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 8001930:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001932:	3022      	adds	r0, #34	; 0x22
 8001934:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 8001936:	681e      	ldr	r6, [r3, #0]
 8001938:	3823      	subs	r0, #35	; 0x23
 800193a:	4386      	bics	r6, r0
 800193c:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800193e:	681e      	ldr	r6, [r3, #0]
 8001940:	4f06      	ldr	r7, [pc, #24]	; (800195c <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 8001942:	403e      	ands	r6, r7
 8001944:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8001946:	681e      	ldr	r6, [r3, #0]
 8001948:	4331      	orrs	r1, r6
 800194a:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 800194c:	6819      	ldr	r1, [r3, #0]
 800194e:	4308      	orrs	r0, r1
 8001950:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8001952:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001954:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8001956:	7028      	strb	r0, [r5, #0]
  }
}
 8001958:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800195a:	46c0      	nop			; (mov r8, r8)
 800195c:	ffffefff 	.word	0xffffefff

08001960 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001960:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001962:	0005      	movs	r5, r0
 8001964:	3541      	adds	r5, #65	; 0x41
 8001966:	782a      	ldrb	r2, [r5, #0]
{
 8001968:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800196a:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800196c:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800196e:	2a20      	cmp	r2, #32
 8001970:	d117      	bne.n	80019a2 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8001972:	001c      	movs	r4, r3
 8001974:	3440      	adds	r4, #64	; 0x40
 8001976:	7826      	ldrb	r6, [r4, #0]
 8001978:	2e01      	cmp	r6, #1
 800197a:	d012      	beq.n	80019a2 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 800197c:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800197e:	3022      	adds	r0, #34	; 0x22
 8001980:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 8001982:	681e      	ldr	r6, [r3, #0]
 8001984:	3823      	subs	r0, #35	; 0x23
 8001986:	4386      	bics	r6, r0
 8001988:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 800198a:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 800198c:	4f05      	ldr	r7, [pc, #20]	; (80019a4 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 800198e:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8001990:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8001992:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8001994:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8001996:	6819      	ldr	r1, [r3, #0]
 8001998:	4308      	orrs	r0, r1
 800199a:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 800199c:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800199e:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 80019a0:	7020      	strb	r0, [r4, #0]
  }
}
 80019a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019a4:	fffff0ff 	.word	0xfffff0ff

080019a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019a8:	b510      	push	{r4, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80019aa:	4c10      	ldr	r4, [pc, #64]	; (80019ec <HAL_PWREx_ControlVoltageScaling+0x44>)
 80019ac:	4910      	ldr	r1, [pc, #64]	; (80019f0 <HAL_PWREx_ControlVoltageScaling+0x48>)
 80019ae:	6823      	ldr	r3, [r4, #0]
{
 80019b0:	0002      	movs	r2, r0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80019b2:	400b      	ands	r3, r1
 80019b4:	4303      	orrs	r3, r0
 80019b6:	6023      	str	r3, [r4, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019b8:	2380      	movs	r3, #128	; 0x80
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80019ba:	2000      	movs	r0, #0
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	429a      	cmp	r2, r3
 80019c0:	d10c      	bne.n	80019dc <HAL_PWREx_ControlVoltageScaling+0x34>
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 80019c2:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 80019c4:	490c      	ldr	r1, [pc, #48]	; (80019f8 <HAL_PWREx_ControlVoltageScaling+0x50>)
 80019c6:	6818      	ldr	r0, [r3, #0]
 80019c8:	2306      	movs	r3, #6
 80019ca:	4358      	muls	r0, r3
 80019cc:	f7fe fbb0 	bl	8000130 <__udivsi3>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019d0:	2280      	movs	r2, #128	; 0x80
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 80019d2:	1c43      	adds	r3, r0, #1
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019d4:	00d2      	lsls	r2, r2, #3
 80019d6:	6960      	ldr	r0, [r4, #20]
 80019d8:	4010      	ands	r0, r2
 80019da:	d100      	bne.n	80019de <HAL_PWREx_ControlVoltageScaling+0x36>
}
 80019dc:	bd10      	pop	{r4, pc}
      if(wait_loop_index != 0U)
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <HAL_PWREx_ControlVoltageScaling+0x3e>
        wait_loop_index--;
 80019e2:	3b01      	subs	r3, #1
 80019e4:	e7f7      	b.n	80019d6 <HAL_PWREx_ControlVoltageScaling+0x2e>
        return HAL_TIMEOUT;
 80019e6:	2003      	movs	r0, #3
 80019e8:	e7f8      	b.n	80019dc <HAL_PWREx_ControlVoltageScaling+0x34>
 80019ea:	46c0      	nop			; (mov r8, r8)
 80019ec:	40007000 	.word	0x40007000
 80019f0:	fffff9ff 	.word	0xfffff9ff
 80019f4:	2000000c 	.word	0x2000000c
 80019f8:	000f4240 	.word	0x000f4240

080019fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019fe:	0004      	movs	r4, r0
 8001a00:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a02:	2800      	cmp	r0, #0
 8001a04:	d102      	bne.n	8001a0c <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001a06:	2001      	movs	r0, #1
        }
      }
    }
  }
  return HAL_OK;
}
 8001a08:	b005      	add	sp, #20
 8001a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a0c:	6803      	ldr	r3, [r0, #0]
 8001a0e:	07db      	lsls	r3, r3, #31
 8001a10:	d410      	bmi.n	8001a34 <HAL_RCC_OscConfig+0x38>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a12:	6823      	ldr	r3, [r4, #0]
 8001a14:	079b      	lsls	r3, r3, #30
 8001a16:	d45c      	bmi.n	8001ad2 <HAL_RCC_OscConfig+0xd6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a18:	6823      	ldr	r3, [r4, #0]
 8001a1a:	071b      	lsls	r3, r3, #28
 8001a1c:	d500      	bpl.n	8001a20 <HAL_RCC_OscConfig+0x24>
 8001a1e:	e0c2      	b.n	8001ba6 <HAL_RCC_OscConfig+0x1aa>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a20:	6823      	ldr	r3, [r4, #0]
 8001a22:	075b      	lsls	r3, r3, #29
 8001a24:	d500      	bpl.n	8001a28 <HAL_RCC_OscConfig+0x2c>
 8001a26:	e0f4      	b.n	8001c12 <HAL_RCC_OscConfig+0x216>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a28:	69e2      	ldr	r2, [r4, #28]
 8001a2a:	2a00      	cmp	r2, #0
 8001a2c:	d000      	beq.n	8001a30 <HAL_RCC_OscConfig+0x34>
 8001a2e:	e173      	b.n	8001d18 <HAL_RCC_OscConfig+0x31c>
  return HAL_OK;
 8001a30:	2000      	movs	r0, #0
 8001a32:	e7e9      	b.n	8001a08 <HAL_RCC_OscConfig+0xc>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a34:	2238      	movs	r2, #56	; 0x38
 8001a36:	4dac      	ldr	r5, [pc, #688]	; (8001ce8 <HAL_RCC_OscConfig+0x2ec>)
 8001a38:	68ab      	ldr	r3, [r5, #8]
 8001a3a:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a3c:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001a3e:	2b10      	cmp	r3, #16
 8001a40:	d109      	bne.n	8001a56 <HAL_RCC_OscConfig+0x5a>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a42:	43d2      	mvns	r2, r2
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001a44:	0793      	lsls	r3, r2, #30
 8001a46:	d108      	bne.n	8001a5a <HAL_RCC_OscConfig+0x5e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a48:	682b      	ldr	r3, [r5, #0]
 8001a4a:	039b      	lsls	r3, r3, #14
 8001a4c:	d5e1      	bpl.n	8001a12 <HAL_RCC_OscConfig+0x16>
 8001a4e:	6863      	ldr	r3, [r4, #4]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d1de      	bne.n	8001a12 <HAL_RCC_OscConfig+0x16>
 8001a54:	e7d7      	b.n	8001a06 <HAL_RCC_OscConfig+0xa>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001a56:	2b08      	cmp	r3, #8
 8001a58:	d0f6      	beq.n	8001a48 <HAL_RCC_OscConfig+0x4c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a5a:	2280      	movs	r2, #128	; 0x80
 8001a5c:	6863      	ldr	r3, [r4, #4]
 8001a5e:	0252      	lsls	r2, r2, #9
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d111      	bne.n	8001a88 <HAL_RCC_OscConfig+0x8c>
 8001a64:	682a      	ldr	r2, [r5, #0]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001a6a:	f7fe fe01 	bl	8000670 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a6e:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8001a70:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a72:	02b6      	lsls	r6, r6, #10
 8001a74:	682b      	ldr	r3, [r5, #0]
 8001a76:	4233      	tst	r3, r6
 8001a78:	d1cb      	bne.n	8001a12 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a7a:	f7fe fdf9 	bl	8000670 <HAL_GetTick>
 8001a7e:	1bc0      	subs	r0, r0, r7
 8001a80:	2864      	cmp	r0, #100	; 0x64
 8001a82:	d9f7      	bls.n	8001a74 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 8001a84:	2003      	movs	r0, #3
 8001a86:	e7bf      	b.n	8001a08 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a88:	21a0      	movs	r1, #160	; 0xa0
 8001a8a:	02c9      	lsls	r1, r1, #11
 8001a8c:	428b      	cmp	r3, r1
 8001a8e:	d108      	bne.n	8001aa2 <HAL_RCC_OscConfig+0xa6>
 8001a90:	2380      	movs	r3, #128	; 0x80
 8001a92:	6829      	ldr	r1, [r5, #0]
 8001a94:	02db      	lsls	r3, r3, #11
 8001a96:	430b      	orrs	r3, r1
 8001a98:	602b      	str	r3, [r5, #0]
 8001a9a:	682b      	ldr	r3, [r5, #0]
 8001a9c:	431a      	orrs	r2, r3
 8001a9e:	602a      	str	r2, [r5, #0]
 8001aa0:	e7e3      	b.n	8001a6a <HAL_RCC_OscConfig+0x6e>
 8001aa2:	682a      	ldr	r2, [r5, #0]
 8001aa4:	4991      	ldr	r1, [pc, #580]	; (8001cec <HAL_RCC_OscConfig+0x2f0>)
 8001aa6:	400a      	ands	r2, r1
 8001aa8:	602a      	str	r2, [r5, #0]
 8001aaa:	682a      	ldr	r2, [r5, #0]
 8001aac:	4990      	ldr	r1, [pc, #576]	; (8001cf0 <HAL_RCC_OscConfig+0x2f4>)
 8001aae:	400a      	ands	r2, r1
 8001ab0:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1d9      	bne.n	8001a6a <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 8001ab6:	f7fe fddb 	bl	8000670 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001aba:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8001abc:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001abe:	02b6      	lsls	r6, r6, #10
 8001ac0:	682b      	ldr	r3, [r5, #0]
 8001ac2:	4233      	tst	r3, r6
 8001ac4:	d0a5      	beq.n	8001a12 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ac6:	f7fe fdd3 	bl	8000670 <HAL_GetTick>
 8001aca:	1bc0      	subs	r0, r0, r7
 8001acc:	2864      	cmp	r0, #100	; 0x64
 8001ace:	d9f7      	bls.n	8001ac0 <HAL_RCC_OscConfig+0xc4>
 8001ad0:	e7d8      	b.n	8001a84 <HAL_RCC_OscConfig+0x88>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ad2:	2338      	movs	r3, #56	; 0x38
 8001ad4:	4d84      	ldr	r5, [pc, #528]	; (8001ce8 <HAL_RCC_OscConfig+0x2ec>)
 8001ad6:	68aa      	ldr	r2, [r5, #8]
 8001ad8:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ada:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001adc:	2b10      	cmp	r3, #16
 8001ade:	d129      	bne.n	8001b34 <HAL_RCC_OscConfig+0x138>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ae0:	2103      	movs	r1, #3
 8001ae2:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001ae4:	2a02      	cmp	r2, #2
 8001ae6:	d127      	bne.n	8001b38 <HAL_RCC_OscConfig+0x13c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ae8:	682a      	ldr	r2, [r5, #0]
 8001aea:	0552      	lsls	r2, r2, #21
 8001aec:	d503      	bpl.n	8001af6 <HAL_RCC_OscConfig+0xfa>
 8001aee:	68e2      	ldr	r2, [r4, #12]
 8001af0:	2a00      	cmp	r2, #0
 8001af2:	d100      	bne.n	8001af6 <HAL_RCC_OscConfig+0xfa>
 8001af4:	e787      	b.n	8001a06 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af6:	6869      	ldr	r1, [r5, #4]
 8001af8:	6962      	ldr	r2, [r4, #20]
 8001afa:	487e      	ldr	r0, [pc, #504]	; (8001cf4 <HAL_RCC_OscConfig+0x2f8>)
 8001afc:	0212      	lsls	r2, r2, #8
 8001afe:	4001      	ands	r1, r0
 8001b00:	430a      	orrs	r2, r1
 8001b02:	606a      	str	r2, [r5, #4]
        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d10d      	bne.n	8001b24 <HAL_RCC_OscConfig+0x128>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001b08:	682b      	ldr	r3, [r5, #0]
 8001b0a:	4a7b      	ldr	r2, [pc, #492]	; (8001cf8 <HAL_RCC_OscConfig+0x2fc>)
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	6922      	ldr	r2, [r4, #16]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	602b      	str	r3, [r5, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001b14:	682b      	ldr	r3, [r5, #0]
 8001b16:	4a79      	ldr	r2, [pc, #484]	; (8001cfc <HAL_RCC_OscConfig+0x300>)
 8001b18:	049b      	lsls	r3, r3, #18
 8001b1a:	0f5b      	lsrs	r3, r3, #29
 8001b1c:	40da      	lsrs	r2, r3
 8001b1e:	0013      	movs	r3, r2
 8001b20:	4a77      	ldr	r2, [pc, #476]	; (8001d00 <HAL_RCC_OscConfig+0x304>)
 8001b22:	6013      	str	r3, [r2, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001b24:	4b77      	ldr	r3, [pc, #476]	; (8001d04 <HAL_RCC_OscConfig+0x308>)
 8001b26:	6818      	ldr	r0, [r3, #0]
 8001b28:	f002 fe5c 	bl	80047e4 <HAL_InitTick>
 8001b2c:	2800      	cmp	r0, #0
 8001b2e:	d100      	bne.n	8001b32 <HAL_RCC_OscConfig+0x136>
 8001b30:	e772      	b.n	8001a18 <HAL_RCC_OscConfig+0x1c>
 8001b32:	e768      	b.n	8001a06 <HAL_RCC_OscConfig+0xa>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d0d7      	beq.n	8001ae8 <HAL_RCC_OscConfig+0xec>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b38:	68e3      	ldr	r3, [r4, #12]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d020      	beq.n	8001b80 <HAL_RCC_OscConfig+0x184>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001b3e:	682b      	ldr	r3, [r5, #0]
 8001b40:	4a6d      	ldr	r2, [pc, #436]	; (8001cf8 <HAL_RCC_OscConfig+0x2fc>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b42:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001b44:	4013      	ands	r3, r2
 8001b46:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b48:	00f6      	lsls	r6, r6, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 8001b4e:	2380      	movs	r3, #128	; 0x80
 8001b50:	682a      	ldr	r2, [r5, #0]
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	4313      	orrs	r3, r2
 8001b56:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001b58:	f7fe fd8a 	bl	8000670 <HAL_GetTick>
 8001b5c:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b5e:	682b      	ldr	r3, [r5, #0]
 8001b60:	4233      	tst	r3, r6
 8001b62:	d007      	beq.n	8001b74 <HAL_RCC_OscConfig+0x178>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b64:	686a      	ldr	r2, [r5, #4]
 8001b66:	6963      	ldr	r3, [r4, #20]
 8001b68:	4962      	ldr	r1, [pc, #392]	; (8001cf4 <HAL_RCC_OscConfig+0x2f8>)
 8001b6a:	021b      	lsls	r3, r3, #8
 8001b6c:	400a      	ands	r2, r1
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	606b      	str	r3, [r5, #4]
 8001b72:	e751      	b.n	8001a18 <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b74:	f7fe fd7c 	bl	8000670 <HAL_GetTick>
 8001b78:	1bc0      	subs	r0, r0, r7
 8001b7a:	2802      	cmp	r0, #2
 8001b7c:	d9ef      	bls.n	8001b5e <HAL_RCC_OscConfig+0x162>
 8001b7e:	e781      	b.n	8001a84 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 8001b80:	682b      	ldr	r3, [r5, #0]
 8001b82:	4a61      	ldr	r2, [pc, #388]	; (8001d08 <HAL_RCC_OscConfig+0x30c>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b84:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI_DISABLE();
 8001b86:	4013      	ands	r3, r2
 8001b88:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001b8a:	f7fe fd71 	bl	8000670 <HAL_GetTick>
 8001b8e:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b90:	00f6      	lsls	r6, r6, #3
 8001b92:	682b      	ldr	r3, [r5, #0]
 8001b94:	4233      	tst	r3, r6
 8001b96:	d100      	bne.n	8001b9a <HAL_RCC_OscConfig+0x19e>
 8001b98:	e73e      	b.n	8001a18 <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b9a:	f7fe fd69 	bl	8000670 <HAL_GetTick>
 8001b9e:	1bc0      	subs	r0, r0, r7
 8001ba0:	2802      	cmp	r0, #2
 8001ba2:	d9f6      	bls.n	8001b92 <HAL_RCC_OscConfig+0x196>
 8001ba4:	e76e      	b.n	8001a84 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001ba6:	2138      	movs	r1, #56	; 0x38
 8001ba8:	4b4f      	ldr	r3, [pc, #316]	; (8001ce8 <HAL_RCC_OscConfig+0x2ec>)
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	001d      	movs	r5, r3
 8001bae:	400a      	ands	r2, r1
 8001bb0:	2a18      	cmp	r2, #24
 8001bb2:	d108      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x1ca>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bb6:	079b      	lsls	r3, r3, #30
 8001bb8:	d400      	bmi.n	8001bbc <HAL_RCC_OscConfig+0x1c0>
 8001bba:	e731      	b.n	8001a20 <HAL_RCC_OscConfig+0x24>
 8001bbc:	69a3      	ldr	r3, [r4, #24]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d000      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x1c8>
 8001bc2:	e72d      	b.n	8001a20 <HAL_RCC_OscConfig+0x24>
 8001bc4:	e71f      	b.n	8001a06 <HAL_RCC_OscConfig+0xa>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bc6:	69a2      	ldr	r2, [r4, #24]
 8001bc8:	2301      	movs	r3, #1
 8001bca:	2a00      	cmp	r2, #0
 8001bcc:	d010      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x1f4>
        __HAL_RCC_LSI_ENABLE();
 8001bce:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bd0:	2602      	movs	r6, #2
        __HAL_RCC_LSI_ENABLE();
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	662b      	str	r3, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001bd6:	f7fe fd4b 	bl	8000670 <HAL_GetTick>
 8001bda:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bdc:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8001bde:	4233      	tst	r3, r6
 8001be0:	d000      	beq.n	8001be4 <HAL_RCC_OscConfig+0x1e8>
 8001be2:	e71d      	b.n	8001a20 <HAL_RCC_OscConfig+0x24>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001be4:	f7fe fd44 	bl	8000670 <HAL_GetTick>
 8001be8:	1bc0      	subs	r0, r0, r7
 8001bea:	2802      	cmp	r0, #2
 8001bec:	d9f6      	bls.n	8001bdc <HAL_RCC_OscConfig+0x1e0>
 8001bee:	e749      	b.n	8001a84 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_LSI_DISABLE();
 8001bf0:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bf2:	2602      	movs	r6, #2
        __HAL_RCC_LSI_DISABLE();
 8001bf4:	439a      	bics	r2, r3
 8001bf6:	662a      	str	r2, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001bf8:	f7fe fd3a 	bl	8000670 <HAL_GetTick>
 8001bfc:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bfe:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8001c00:	4233      	tst	r3, r6
 8001c02:	d100      	bne.n	8001c06 <HAL_RCC_OscConfig+0x20a>
 8001c04:	e70c      	b.n	8001a20 <HAL_RCC_OscConfig+0x24>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c06:	f7fe fd33 	bl	8000670 <HAL_GetTick>
 8001c0a:	1bc0      	subs	r0, r0, r7
 8001c0c:	2802      	cmp	r0, #2
 8001c0e:	d9f6      	bls.n	8001bfe <HAL_RCC_OscConfig+0x202>
 8001c10:	e738      	b.n	8001a84 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001c12:	2138      	movs	r1, #56	; 0x38
 8001c14:	4b34      	ldr	r3, [pc, #208]	; (8001ce8 <HAL_RCC_OscConfig+0x2ec>)
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	001d      	movs	r5, r3
 8001c1a:	400a      	ands	r2, r1
 8001c1c:	2a20      	cmp	r2, #32
 8001c1e:	d108      	bne.n	8001c32 <HAL_RCC_OscConfig+0x236>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c22:	079b      	lsls	r3, r3, #30
 8001c24:	d400      	bmi.n	8001c28 <HAL_RCC_OscConfig+0x22c>
 8001c26:	e6ff      	b.n	8001a28 <HAL_RCC_OscConfig+0x2c>
 8001c28:	68a3      	ldr	r3, [r4, #8]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d000      	beq.n	8001c30 <HAL_RCC_OscConfig+0x234>
 8001c2e:	e6fb      	b.n	8001a28 <HAL_RCC_OscConfig+0x2c>
 8001c30:	e6e9      	b.n	8001a06 <HAL_RCC_OscConfig+0xa>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001c32:	2280      	movs	r2, #128	; 0x80
 8001c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c36:	0552      	lsls	r2, r2, #21
 8001c38:	4213      	tst	r3, r2
 8001c3a:	d100      	bne.n	8001c3e <HAL_RCC_OscConfig+0x242>
 8001c3c:	e0f6      	b.n	8001e2c <HAL_RCC_OscConfig+0x430>
    FlagStatus       pwrclkchanged = RESET;
 8001c3e:	2300      	movs	r3, #0
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c40:	2780      	movs	r7, #128	; 0x80
 8001c42:	4e32      	ldr	r6, [pc, #200]	; (8001d0c <HAL_RCC_OscConfig+0x310>)
    FlagStatus       pwrclkchanged = RESET;
 8001c44:	9300      	str	r3, [sp, #0]
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c46:	6833      	ldr	r3, [r6, #0]
 8001c48:	007f      	lsls	r7, r7, #1
 8001c4a:	423b      	tst	r3, r7
 8001c4c:	d015      	beq.n	8001c7a <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c4e:	68a3      	ldr	r3, [r4, #8]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d122      	bne.n	8001c9a <HAL_RCC_OscConfig+0x29e>
 8001c54:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8001c56:	4313      	orrs	r3, r2
 8001c58:	65eb      	str	r3, [r5, #92]	; 0x5c
        tickstart = HAL_GetTick();
 8001c5a:	f7fe fd09 	bl	8000670 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c5e:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8001c60:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c62:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8001c64:	423b      	tst	r3, r7
 8001c66:	d038      	beq.n	8001cda <HAL_RCC_OscConfig+0x2de>
      if (pwrclkchanged == SET)
 8001c68:	9b00      	ldr	r3, [sp, #0]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d000      	beq.n	8001c70 <HAL_RCC_OscConfig+0x274>
 8001c6e:	e6db      	b.n	8001a28 <HAL_RCC_OscConfig+0x2c>
        __HAL_RCC_PWR_CLK_DISABLE();
 8001c70:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8001c72:	4a27      	ldr	r2, [pc, #156]	; (8001d10 <HAL_RCC_OscConfig+0x314>)
 8001c74:	4013      	ands	r3, r2
 8001c76:	63eb      	str	r3, [r5, #60]	; 0x3c
 8001c78:	e6d6      	b.n	8001a28 <HAL_RCC_OscConfig+0x2c>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c7a:	6833      	ldr	r3, [r6, #0]
 8001c7c:	433b      	orrs	r3, r7
 8001c7e:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001c80:	f7fe fcf6 	bl	8000670 <HAL_GetTick>
 8001c84:	9001      	str	r0, [sp, #4]
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c86:	6833      	ldr	r3, [r6, #0]
 8001c88:	423b      	tst	r3, r7
 8001c8a:	d1e0      	bne.n	8001c4e <HAL_RCC_OscConfig+0x252>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c8c:	f7fe fcf0 	bl	8000670 <HAL_GetTick>
 8001c90:	9b01      	ldr	r3, [sp, #4]
 8001c92:	1ac0      	subs	r0, r0, r3
 8001c94:	2802      	cmp	r0, #2
 8001c96:	d9f6      	bls.n	8001c86 <HAL_RCC_OscConfig+0x28a>
 8001c98:	e6f4      	b.n	8001a84 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c9a:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8001c9c:	2b05      	cmp	r3, #5
 8001c9e:	d105      	bne.n	8001cac <HAL_RCC_OscConfig+0x2b0>
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	65eb      	str	r3, [r5, #92]	; 0x5c
 8001ca6:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e7d4      	b.n	8001c56 <HAL_RCC_OscConfig+0x25a>
 8001cac:	2101      	movs	r1, #1
 8001cae:	438a      	bics	r2, r1
 8001cb0:	65ea      	str	r2, [r5, #92]	; 0x5c
 8001cb2:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8001cb4:	3103      	adds	r1, #3
 8001cb6:	438a      	bics	r2, r1
 8001cb8:	65ea      	str	r2, [r5, #92]	; 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1cd      	bne.n	8001c5a <HAL_RCC_OscConfig+0x25e>
        tickstart = HAL_GetTick();
 8001cbe:	f7fe fcd7 	bl	8000670 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cc2:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8001cc4:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cc6:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8001cc8:	423b      	tst	r3, r7
 8001cca:	d0cd      	beq.n	8001c68 <HAL_RCC_OscConfig+0x26c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ccc:	f7fe fcd0 	bl	8000670 <HAL_GetTick>
 8001cd0:	4b10      	ldr	r3, [pc, #64]	; (8001d14 <HAL_RCC_OscConfig+0x318>)
 8001cd2:	1b80      	subs	r0, r0, r6
 8001cd4:	4298      	cmp	r0, r3
 8001cd6:	d9f6      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x2ca>
 8001cd8:	e6d4      	b.n	8001a84 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cda:	f7fe fcc9 	bl	8000670 <HAL_GetTick>
 8001cde:	4b0d      	ldr	r3, [pc, #52]	; (8001d14 <HAL_RCC_OscConfig+0x318>)
 8001ce0:	1b80      	subs	r0, r0, r6
 8001ce2:	4298      	cmp	r0, r3
 8001ce4:	d9bd      	bls.n	8001c62 <HAL_RCC_OscConfig+0x266>
 8001ce6:	e6cd      	b.n	8001a84 <HAL_RCC_OscConfig+0x88>
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	fffeffff 	.word	0xfffeffff
 8001cf0:	fffbffff 	.word	0xfffbffff
 8001cf4:	ffff80ff 	.word	0xffff80ff
 8001cf8:	ffffc7ff 	.word	0xffffc7ff
 8001cfc:	00f42400 	.word	0x00f42400
 8001d00:	2000000c 	.word	0x2000000c
 8001d04:	20000004 	.word	0x20000004
 8001d08:	fffffeff 	.word	0xfffffeff
 8001d0c:	40007000 	.word	0x40007000
 8001d10:	efffffff 	.word	0xefffffff
 8001d14:	00001388 	.word	0x00001388
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d18:	2038      	movs	r0, #56	; 0x38
 8001d1a:	4b49      	ldr	r3, [pc, #292]	; (8001e40 <HAL_RCC_OscConfig+0x444>)
 8001d1c:	6899      	ldr	r1, [r3, #8]
 8001d1e:	001d      	movs	r5, r3
 8001d20:	4001      	ands	r1, r0
 8001d22:	2910      	cmp	r1, #16
 8001d24:	d054      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_PLL_DISABLE();
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4946      	ldr	r1, [pc, #280]	; (8001e44 <HAL_RCC_OscConfig+0x448>)
 8001d2a:	400b      	ands	r3, r1
 8001d2c:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d2e:	2a02      	cmp	r2, #2
 8001d30:	d137      	bne.n	8001da2 <HAL_RCC_OscConfig+0x3a6>
        tickstart = HAL_GetTick();
 8001d32:	f7fe fc9d 	bl	8000670 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d36:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8001d38:	0007      	movs	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d3a:	04b6      	lsls	r6, r6, #18
 8001d3c:	682b      	ldr	r3, [r5, #0]
 8001d3e:	4233      	tst	r3, r6
 8001d40:	d129      	bne.n	8001d96 <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d42:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001d44:	6a23      	ldr	r3, [r4, #32]
 8001d46:	68ea      	ldr	r2, [r5, #12]
 8001d48:	430b      	orrs	r3, r1
 8001d4a:	493f      	ldr	r1, [pc, #252]	; (8001e48 <HAL_RCC_OscConfig+0x44c>)
 8001d4c:	400a      	ands	r2, r1
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001d52:	4313      	orrs	r3, r2
 8001d54:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001d56:	4313      	orrs	r3, r2
 8001d58:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d5e:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d60:	0212      	lsls	r2, r2, #8
 8001d62:	4313      	orrs	r3, r2
 8001d64:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8001d66:	2380      	movs	r3, #128	; 0x80
 8001d68:	682a      	ldr	r2, [r5, #0]
 8001d6a:	045b      	lsls	r3, r3, #17
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001d70:	2380      	movs	r3, #128	; 0x80
 8001d72:	68ea      	ldr	r2, [r5, #12]
 8001d74:	055b      	lsls	r3, r3, #21
 8001d76:	4313      	orrs	r3, r2
 8001d78:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8001d7a:	f7fe fc79 	bl	8000670 <HAL_GetTick>
 8001d7e:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d80:	04a4      	lsls	r4, r4, #18
 8001d82:	682b      	ldr	r3, [r5, #0]
 8001d84:	4223      	tst	r3, r4
 8001d86:	d000      	beq.n	8001d8a <HAL_RCC_OscConfig+0x38e>
 8001d88:	e652      	b.n	8001a30 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d8a:	f7fe fc71 	bl	8000670 <HAL_GetTick>
 8001d8e:	1b80      	subs	r0, r0, r6
 8001d90:	2802      	cmp	r0, #2
 8001d92:	d9f6      	bls.n	8001d82 <HAL_RCC_OscConfig+0x386>
 8001d94:	e676      	b.n	8001a84 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d96:	f7fe fc6b 	bl	8000670 <HAL_GetTick>
 8001d9a:	1bc0      	subs	r0, r0, r7
 8001d9c:	2802      	cmp	r0, #2
 8001d9e:	d9cd      	bls.n	8001d3c <HAL_RCC_OscConfig+0x340>
 8001da0:	e670      	b.n	8001a84 <HAL_RCC_OscConfig+0x88>
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001da2:	2203      	movs	r2, #3
 8001da4:	68eb      	ldr	r3, [r5, #12]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001da6:	2480      	movs	r4, #128	; 0x80
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001da8:	4393      	bics	r3, r2
 8001daa:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001dac:	68eb      	ldr	r3, [r5, #12]
 8001dae:	4a27      	ldr	r2, [pc, #156]	; (8001e4c <HAL_RCC_OscConfig+0x450>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001db0:	04a4      	lsls	r4, r4, #18
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001db2:	4013      	ands	r3, r2
 8001db4:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8001db6:	f7fe fc5b 	bl	8000670 <HAL_GetTick>
 8001dba:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dbc:	682b      	ldr	r3, [r5, #0]
 8001dbe:	4223      	tst	r3, r4
 8001dc0:	d100      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x3c8>
 8001dc2:	e635      	b.n	8001a30 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc4:	f7fe fc54 	bl	8000670 <HAL_GetTick>
 8001dc8:	1b80      	subs	r0, r0, r6
 8001dca:	2802      	cmp	r0, #2
 8001dcc:	d9f6      	bls.n	8001dbc <HAL_RCC_OscConfig+0x3c0>
 8001dce:	e659      	b.n	8001a84 <HAL_RCC_OscConfig+0x88>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dd0:	2a01      	cmp	r2, #1
 8001dd2:	d100      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x3da>
 8001dd4:	e617      	b.n	8001a06 <HAL_RCC_OscConfig+0xa>
        temp_pllckcfg = RCC->PLLCFGR;
 8001dd6:	68d8      	ldr	r0, [r3, #12]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dd8:	2303      	movs	r3, #3
 8001dda:	6a22      	ldr	r2, [r4, #32]
 8001ddc:	4003      	ands	r3, r0
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d000      	beq.n	8001de4 <HAL_RCC_OscConfig+0x3e8>
 8001de2:	e610      	b.n	8001a06 <HAL_RCC_OscConfig+0xa>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001de4:	2370      	movs	r3, #112	; 0x70
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001de6:	6a62      	ldr	r2, [r4, #36]	; 0x24
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001de8:	4003      	ands	r3, r0
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d000      	beq.n	8001df0 <HAL_RCC_OscConfig+0x3f4>
 8001dee:	e60a      	b.n	8001a06 <HAL_RCC_OscConfig+0xa>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001df0:	22fe      	movs	r2, #254	; 0xfe
 8001df2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001df4:	01d2      	lsls	r2, r2, #7
 8001df6:	4002      	ands	r2, r0
 8001df8:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d000      	beq.n	8001e00 <HAL_RCC_OscConfig+0x404>
 8001dfe:	e602      	b.n	8001a06 <HAL_RCC_OscConfig+0xa>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e00:	23f8      	movs	r3, #248	; 0xf8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e02:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e04:	039b      	lsls	r3, r3, #14
 8001e06:	4003      	ands	r3, r0
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d000      	beq.n	8001e0e <HAL_RCC_OscConfig+0x412>
 8001e0c:	e5fb      	b.n	8001a06 <HAL_RCC_OscConfig+0xa>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001e0e:	23e0      	movs	r3, #224	; 0xe0
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e10:	6b22      	ldr	r2, [r4, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001e12:	051b      	lsls	r3, r3, #20
 8001e14:	4003      	ands	r3, r0
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d000      	beq.n	8001e1c <HAL_RCC_OscConfig+0x420>
 8001e1a:	e5f4      	b.n	8001a06 <HAL_RCC_OscConfig+0xa>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001e1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001e1e:	0f40      	lsrs	r0, r0, #29
 8001e20:	0740      	lsls	r0, r0, #29
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001e22:	1ac0      	subs	r0, r0, r3
 8001e24:	1e43      	subs	r3, r0, #1
 8001e26:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8001e28:	b2c0      	uxtb	r0, r0
 8001e2a:	e5ed      	b.n	8001a08 <HAL_RCC_OscConfig+0xc>
        __HAL_RCC_PWR_CLK_ENABLE();
 8001e2c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	63eb      	str	r3, [r5, #60]	; 0x3c
 8001e32:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8001e34:	4013      	ands	r3, r2
 8001e36:	9303      	str	r3, [sp, #12]
 8001e38:	9b03      	ldr	r3, [sp, #12]
        pwrclkchanged = SET;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e700      	b.n	8001c40 <HAL_RCC_OscConfig+0x244>
 8001e3e:	46c0      	nop			; (mov r8, r8)
 8001e40:	40021000 	.word	0x40021000
 8001e44:	feffffff 	.word	0xfeffffff
 8001e48:	11c1808c 	.word	0x11c1808c
 8001e4c:	eefeffff 	.word	0xeefeffff

08001e50 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001e50:	2338      	movs	r3, #56	; 0x38
 8001e52:	4a1f      	ldr	r2, [pc, #124]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x80>)
{
 8001e54:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001e56:	6891      	ldr	r1, [r2, #8]
 8001e58:	0014      	movs	r4, r2
 8001e5a:	4219      	tst	r1, r3
 8001e5c:	d108      	bne.n	8001e70 <HAL_RCC_GetSysClockFreq+0x20>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001e5e:	2101      	movs	r1, #1
 8001e60:	6813      	ldr	r3, [r2, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001e62:	481c      	ldr	r0, [pc, #112]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x84>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001e64:	049b      	lsls	r3, r3, #18
 8001e66:	0f5b      	lsrs	r3, r3, #29
 8001e68:	4099      	lsls	r1, r3
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
        break;
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
    sysclockfreq = pllvco / pllr;
 8001e6a:	f7fe f961 	bl	8000130 <__udivsi3>
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8001e6e:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001e70:	6891      	ldr	r1, [r2, #8]
 8001e72:	4019      	ands	r1, r3
 8001e74:	2908      	cmp	r1, #8
 8001e76:	d025      	beq.n	8001ec4 <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001e78:	6891      	ldr	r1, [r2, #8]
 8001e7a:	4019      	ands	r1, r3
 8001e7c:	2910      	cmp	r1, #16
 8001e7e:	d115      	bne.n	8001eac <HAL_RCC_GetSysClockFreq+0x5c>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001e80:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e82:	68d1      	ldr	r1, [r2, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001e84:	43db      	mvns	r3, r3
 8001e86:	227f      	movs	r2, #127	; 0x7f
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e88:	68e5      	ldr	r5, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e8a:	0649      	lsls	r1, r1, #25
 8001e8c:	0f49      	lsrs	r1, r1, #29
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e8e:	0a2d      	lsrs	r5, r5, #8
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e90:	3101      	adds	r1, #1
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e92:	4015      	ands	r5, r2
    switch (pllsource)
 8001e94:	079b      	lsls	r3, r3, #30
 8001e96:	d107      	bne.n	8001ea8 <HAL_RCC_GetSysClockFreq+0x58>
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e98:	480f      	ldr	r0, [pc, #60]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001e9a:	f7fe f949 	bl	8000130 <__udivsi3>
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001e9e:	68e1      	ldr	r1, [r4, #12]
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001ea0:	4368      	muls	r0, r5
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001ea2:	0f49      	lsrs	r1, r1, #29
 8001ea4:	3101      	adds	r1, #1
 8001ea6:	e7e0      	b.n	8001e6a <HAL_RCC_GetSysClockFreq+0x1a>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001ea8:	480a      	ldr	r0, [pc, #40]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x84>)
 8001eaa:	e7f6      	b.n	8001e9a <HAL_RCC_GetSysClockFreq+0x4a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001eac:	6891      	ldr	r1, [r2, #8]
 8001eae:	4019      	ands	r1, r3
 8001eb0:	2920      	cmp	r1, #32
 8001eb2:	d009      	beq.n	8001ec8 <HAL_RCC_GetSysClockFreq+0x78>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001eb4:	6892      	ldr	r2, [r2, #8]
    sysclockfreq = 0U;
 8001eb6:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001eb8:	4013      	ands	r3, r2
 8001eba:	2b18      	cmp	r3, #24
 8001ebc:	d1d7      	bne.n	8001e6e <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = LSI_VALUE;
 8001ebe:	20fa      	movs	r0, #250	; 0xfa
 8001ec0:	01c0      	lsls	r0, r0, #7
  return sysclockfreq;
 8001ec2:	e7d4      	b.n	8001e6e <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = HSE_VALUE;
 8001ec4:	4804      	ldr	r0, [pc, #16]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0x88>)
 8001ec6:	e7d2      	b.n	8001e6e <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = LSE_VALUE;
 8001ec8:	2080      	movs	r0, #128	; 0x80
 8001eca:	0200      	lsls	r0, r0, #8
 8001ecc:	e7cf      	b.n	8001e6e <HAL_RCC_GetSysClockFreq+0x1e>
 8001ece:	46c0      	nop			; (mov r8, r8)
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	00f42400 	.word	0x00f42400
 8001ed8:	007a1200 	.word	0x007a1200

08001edc <HAL_RCC_ClockConfig>:
{
 8001edc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001ede:	0005      	movs	r5, r0
 8001ee0:	000e      	movs	r6, r1
  if (RCC_ClkInitStruct == NULL)
 8001ee2:	2800      	cmp	r0, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8001ee6:	2001      	movs	r0, #1
}
 8001ee8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001eea:	2707      	movs	r7, #7
 8001eec:	4c4a      	ldr	r4, [pc, #296]	; (8002018 <HAL_RCC_ClockConfig+0x13c>)
 8001eee:	6823      	ldr	r3, [r4, #0]
 8001ef0:	403b      	ands	r3, r7
 8001ef2:	428b      	cmp	r3, r1
 8001ef4:	d32a      	bcc.n	8001f4c <HAL_RCC_ClockConfig+0x70>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ef6:	6829      	ldr	r1, [r5, #0]
 8001ef8:	078b      	lsls	r3, r1, #30
 8001efa:	d43b      	bmi.n	8001f74 <HAL_RCC_ClockConfig+0x98>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001efc:	07cb      	lsls	r3, r1, #31
 8001efe:	d448      	bmi.n	8001f92 <HAL_RCC_ClockConfig+0xb6>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f00:	2707      	movs	r7, #7
 8001f02:	6823      	ldr	r3, [r4, #0]
 8001f04:	403b      	ands	r3, r7
 8001f06:	429e      	cmp	r6, r3
 8001f08:	d20a      	bcs.n	8001f20 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f0a:	6823      	ldr	r3, [r4, #0]
 8001f0c:	43bb      	bics	r3, r7
 8001f0e:	4333      	orrs	r3, r6
 8001f10:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001f12:	f7fe fbad 	bl	8000670 <HAL_GetTick>
 8001f16:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f18:	6823      	ldr	r3, [r4, #0]
 8001f1a:	403b      	ands	r3, r7
 8001f1c:	429e      	cmp	r6, r3
 8001f1e:	d16b      	bne.n	8001ff8 <HAL_RCC_ClockConfig+0x11c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f20:	682b      	ldr	r3, [r5, #0]
 8001f22:	4c3e      	ldr	r4, [pc, #248]	; (800201c <HAL_RCC_ClockConfig+0x140>)
 8001f24:	075b      	lsls	r3, r3, #29
 8001f26:	d46f      	bmi.n	8002008 <HAL_RCC_ClockConfig+0x12c>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001f28:	f7ff ff92 	bl	8001e50 <HAL_RCC_GetSysClockFreq>
 8001f2c:	68a3      	ldr	r3, [r4, #8]
 8001f2e:	4a3c      	ldr	r2, [pc, #240]	; (8002020 <HAL_RCC_ClockConfig+0x144>)
 8001f30:	051b      	lsls	r3, r3, #20
 8001f32:	0f1b      	lsrs	r3, r3, #28
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	589b      	ldr	r3, [r3, r2]
 8001f38:	221f      	movs	r2, #31
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	40d8      	lsrs	r0, r3
 8001f3e:	4b39      	ldr	r3, [pc, #228]	; (8002024 <HAL_RCC_ClockConfig+0x148>)
 8001f40:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8001f42:	4b39      	ldr	r3, [pc, #228]	; (8002028 <HAL_RCC_ClockConfig+0x14c>)
 8001f44:	6818      	ldr	r0, [r3, #0]
 8001f46:	f002 fc4d 	bl	80047e4 <HAL_InitTick>
 8001f4a:	e7cd      	b.n	8001ee8 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f4c:	6823      	ldr	r3, [r4, #0]
 8001f4e:	43bb      	bics	r3, r7
 8001f50:	430b      	orrs	r3, r1
 8001f52:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001f54:	f7fe fb8c 	bl	8000670 <HAL_GetTick>
 8001f58:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f5a:	6823      	ldr	r3, [r4, #0]
 8001f5c:	403b      	ands	r3, r7
 8001f5e:	429e      	cmp	r6, r3
 8001f60:	d0c9      	beq.n	8001ef6 <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f62:	f7fe fb85 	bl	8000670 <HAL_GetTick>
 8001f66:	9b01      	ldr	r3, [sp, #4]
 8001f68:	1ac0      	subs	r0, r0, r3
 8001f6a:	4b30      	ldr	r3, [pc, #192]	; (800202c <HAL_RCC_ClockConfig+0x150>)
 8001f6c:	4298      	cmp	r0, r3
 8001f6e:	d9f4      	bls.n	8001f5a <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 8001f70:	2003      	movs	r0, #3
 8001f72:	e7b9      	b.n	8001ee8 <HAL_RCC_ClockConfig+0xc>
 8001f74:	4a29      	ldr	r2, [pc, #164]	; (800201c <HAL_RCC_ClockConfig+0x140>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f76:	074b      	lsls	r3, r1, #29
 8001f78:	d504      	bpl.n	8001f84 <HAL_RCC_ClockConfig+0xa8>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001f7a:	23e0      	movs	r3, #224	; 0xe0
 8001f7c:	6890      	ldr	r0, [r2, #8]
 8001f7e:	01db      	lsls	r3, r3, #7
 8001f80:	4303      	orrs	r3, r0
 8001f82:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f84:	6893      	ldr	r3, [r2, #8]
 8001f86:	482a      	ldr	r0, [pc, #168]	; (8002030 <HAL_RCC_ClockConfig+0x154>)
 8001f88:	4003      	ands	r3, r0
 8001f8a:	68a8      	ldr	r0, [r5, #8]
 8001f8c:	4303      	orrs	r3, r0
 8001f8e:	6093      	str	r3, [r2, #8]
 8001f90:	e7b4      	b.n	8001efc <HAL_RCC_ClockConfig+0x20>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f92:	686a      	ldr	r2, [r5, #4]
 8001f94:	4f21      	ldr	r7, [pc, #132]	; (800201c <HAL_RCC_ClockConfig+0x140>)
 8001f96:	2a01      	cmp	r2, #1
 8001f98:	d119      	bne.n	8001fce <HAL_RCC_ClockConfig+0xf2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	039b      	lsls	r3, r3, #14
 8001f9e:	d5a2      	bpl.n	8001ee6 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fa0:	2107      	movs	r1, #7
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	438b      	bics	r3, r1
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 8001faa:	f7fe fb61 	bl	8000670 <HAL_GetTick>
 8001fae:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fb0:	2338      	movs	r3, #56	; 0x38
 8001fb2:	68ba      	ldr	r2, [r7, #8]
 8001fb4:	401a      	ands	r2, r3
 8001fb6:	686b      	ldr	r3, [r5, #4]
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d0a0      	beq.n	8001f00 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fbe:	f7fe fb57 	bl	8000670 <HAL_GetTick>
 8001fc2:	9b01      	ldr	r3, [sp, #4]
 8001fc4:	1ac0      	subs	r0, r0, r3
 8001fc6:	4b19      	ldr	r3, [pc, #100]	; (800202c <HAL_RCC_ClockConfig+0x150>)
 8001fc8:	4298      	cmp	r0, r3
 8001fca:	d9f1      	bls.n	8001fb0 <HAL_RCC_ClockConfig+0xd4>
 8001fcc:	e7d0      	b.n	8001f70 <HAL_RCC_ClockConfig+0x94>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fce:	2a02      	cmp	r2, #2
 8001fd0:	d103      	bne.n	8001fda <HAL_RCC_ClockConfig+0xfe>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	019b      	lsls	r3, r3, #6
 8001fd6:	d4e3      	bmi.n	8001fa0 <HAL_RCC_ClockConfig+0xc4>
 8001fd8:	e785      	b.n	8001ee6 <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001fda:	2a00      	cmp	r2, #0
 8001fdc:	d103      	bne.n	8001fe6 <HAL_RCC_ClockConfig+0x10a>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	055b      	lsls	r3, r3, #21
 8001fe2:	d4dd      	bmi.n	8001fa0 <HAL_RCC_ClockConfig+0xc4>
 8001fe4:	e77f      	b.n	8001ee6 <HAL_RCC_ClockConfig+0xa>
 8001fe6:	2302      	movs	r3, #2
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001fe8:	2a03      	cmp	r2, #3
 8001fea:	d103      	bne.n	8001ff4 <HAL_RCC_ClockConfig+0x118>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fec:	6e39      	ldr	r1, [r7, #96]	; 0x60
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fee:	4219      	tst	r1, r3
 8001ff0:	d1d6      	bne.n	8001fa0 <HAL_RCC_ClockConfig+0xc4>
 8001ff2:	e778      	b.n	8001ee6 <HAL_RCC_ClockConfig+0xa>
 8001ff4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001ff6:	e7fa      	b.n	8001fee <HAL_RCC_ClockConfig+0x112>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ff8:	f7fe fb3a 	bl	8000670 <HAL_GetTick>
 8001ffc:	9b01      	ldr	r3, [sp, #4]
 8001ffe:	1ac0      	subs	r0, r0, r3
 8002000:	4b0a      	ldr	r3, [pc, #40]	; (800202c <HAL_RCC_ClockConfig+0x150>)
 8002002:	4298      	cmp	r0, r3
 8002004:	d988      	bls.n	8001f18 <HAL_RCC_ClockConfig+0x3c>
 8002006:	e7b3      	b.n	8001f70 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002008:	68a3      	ldr	r3, [r4, #8]
 800200a:	4a0a      	ldr	r2, [pc, #40]	; (8002034 <HAL_RCC_ClockConfig+0x158>)
 800200c:	4013      	ands	r3, r2
 800200e:	68ea      	ldr	r2, [r5, #12]
 8002010:	4313      	orrs	r3, r2
 8002012:	60a3      	str	r3, [r4, #8]
 8002014:	e788      	b.n	8001f28 <HAL_RCC_ClockConfig+0x4c>
 8002016:	46c0      	nop			; (mov r8, r8)
 8002018:	40022000 	.word	0x40022000
 800201c:	40021000 	.word	0x40021000
 8002020:	080049e4 	.word	0x080049e4
 8002024:	2000000c 	.word	0x2000000c
 8002028:	20000004 	.word	0x20000004
 800202c:	00001388 	.word	0x00001388
 8002030:	fffff0ff 	.word	0xfffff0ff
 8002034:	ffff8fff 	.word	0xffff8fff

08002038 <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002038:	4b06      	ldr	r3, [pc, #24]	; (8002054 <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800203a:	4a07      	ldr	r2, [pc, #28]	; (8002058 <HAL_RCC_GetPCLK1Freq+0x20>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	045b      	lsls	r3, r3, #17
 8002040:	0f5b      	lsrs	r3, r3, #29
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	589b      	ldr	r3, [r3, r2]
 8002046:	221f      	movs	r2, #31
 8002048:	4013      	ands	r3, r2
 800204a:	4a04      	ldr	r2, [pc, #16]	; (800205c <HAL_RCC_GetPCLK1Freq+0x24>)
 800204c:	6810      	ldr	r0, [r2, #0]
 800204e:	40d8      	lsrs	r0, r3
}
 8002050:	4770      	bx	lr
 8002052:	46c0      	nop			; (mov r8, r8)
 8002054:	40021000 	.word	0x40021000
 8002058:	08004a24 	.word	0x08004a24
 800205c:	2000000c 	.word	0x2000000c

08002060 <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8002060:	2207      	movs	r2, #7
{
 8002062:	b530      	push	{r4, r5, lr}

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002064:	25f0      	movs	r5, #240	; 0xf0
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002066:	4b09      	ldr	r3, [pc, #36]	; (800208c <HAL_RCC_GetClockConfig+0x2c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8002068:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800206a:	689c      	ldr	r4, [r3, #8]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800206c:	012d      	lsls	r5, r5, #4
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800206e:	4014      	ands	r4, r2
 8002070:	6044      	str	r4, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002072:	689c      	ldr	r4, [r3, #8]
 8002074:	402c      	ands	r4, r5
 8002076:	6084      	str	r4, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 8002078:	24e0      	movs	r4, #224	; 0xe0
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	01e4      	lsls	r4, r4, #7
 800207e:	4023      	ands	r3, r4
 8002080:	60c3      	str	r3, [r0, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002082:	4b03      	ldr	r3, [pc, #12]	; (8002090 <HAL_RCC_GetClockConfig+0x30>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4013      	ands	r3, r2
 8002088:	600b      	str	r3, [r1, #0]
}
 800208a:	bd30      	pop	{r4, r5, pc}
 800208c:	40021000 	.word	0x40021000
 8002090:	40022000 	.word	0x40022000

08002094 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002094:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002096:	0005      	movs	r5, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002098:	682b      	ldr	r3, [r5, #0]
{
 800209a:	b085      	sub	sp, #20
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800209c:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800209e:	039b      	lsls	r3, r3, #14
 80020a0:	d550      	bpl.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0xb0>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020a2:	2280      	movs	r2, #128	; 0x80
 80020a4:	4c6f      	ldr	r4, [pc, #444]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020a6:	0552      	lsls	r2, r2, #21
 80020a8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    FlagStatus       pwrclkchanged = RESET;
 80020aa:	9000      	str	r0, [sp, #0]
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ac:	4213      	tst	r3, r2
 80020ae:	d108      	bne.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80020b2:	4313      	orrs	r3, r2
 80020b4:	63e3      	str	r3, [r4, #60]	; 0x3c
 80020b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80020b8:	4013      	ands	r3, r2
 80020ba:	9303      	str	r3, [sp, #12]
 80020bc:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80020be:	2301      	movs	r3, #1
 80020c0:	9300      	str	r3, [sp, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020c2:	2780      	movs	r7, #128	; 0x80
 80020c4:	4e68      	ldr	r6, [pc, #416]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80020c6:	007f      	lsls	r7, r7, #1
 80020c8:	6833      	ldr	r3, [r6, #0]
 80020ca:	433b      	orrs	r3, r7
 80020cc:	6033      	str	r3, [r6, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020ce:	f7fe facf 	bl	8000670 <HAL_GetTick>
 80020d2:	9001      	str	r0, [sp, #4]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020d4:	6833      	ldr	r3, [r6, #0]
 80020d6:	423b      	tst	r3, r7
 80020d8:	d026      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x94>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020da:	23c0      	movs	r3, #192	; 0xc0
 80020dc:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4013      	ands	r3, r2

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020e2:	d00f      	beq.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x70>
 80020e4:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d00c      	beq.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x70>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020ea:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80020ec:	4b5f      	ldr	r3, [pc, #380]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020ee:	6de1      	ldr	r1, [r4, #92]	; 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020f0:	4013      	ands	r3, r2
        __HAL_RCC_BACKUPRESET_FORCE();
 80020f2:	2280      	movs	r2, #128	; 0x80
 80020f4:	0252      	lsls	r2, r2, #9
 80020f6:	430a      	orrs	r2, r1
 80020f8:	65e2      	str	r2, [r4, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020fa:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80020fc:	495c      	ldr	r1, [pc, #368]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80020fe:	400a      	ands	r2, r1
 8002100:	65e2      	str	r2, [r4, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002102:	65e3      	str	r3, [r4, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002104:	07db      	lsls	r3, r3, #31
 8002106:	d507      	bpl.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x84>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002108:	f7fe fab2 	bl	8000670 <HAL_GetTick>

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800210c:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 800210e:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002110:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002112:	423b      	tst	r3, r7
 8002114:	d100      	bne.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x84>
 8002116:	e09d      	b.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002118:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800211a:	4a54      	ldr	r2, [pc, #336]	; (800226c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800211c:	2000      	movs	r0, #0
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800211e:	4013      	ands	r3, r2
 8002120:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002122:	4313      	orrs	r3, r2
 8002124:	65e3      	str	r3, [r4, #92]	; 0x5c
 8002126:	e006      	b.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0xa2>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002128:	f7fe faa2 	bl	8000670 <HAL_GetTick>
 800212c:	9b01      	ldr	r3, [sp, #4]
 800212e:	1ac0      	subs	r0, r0, r3
 8002130:	2802      	cmp	r0, #2
 8002132:	d9cf      	bls.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x40>
        ret = HAL_TIMEOUT;
 8002134:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002136:	9b00      	ldr	r3, [sp, #0]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d103      	bne.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800213c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800213e:	4a4d      	ldr	r2, [pc, #308]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002140:	4013      	ands	r3, r2
 8002142:	63e3      	str	r3, [r4, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002144:	682b      	ldr	r3, [r5, #0]
 8002146:	07da      	lsls	r2, r3, #31
 8002148:	d506      	bpl.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800214a:	2403      	movs	r4, #3
 800214c:	4945      	ldr	r1, [pc, #276]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800214e:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8002150:	43a2      	bics	r2, r4
 8002152:	686c      	ldr	r4, [r5, #4]
 8002154:	4322      	orrs	r2, r4
 8002156:	654a      	str	r2, [r1, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002158:	079a      	lsls	r2, r3, #30
 800215a:	d506      	bpl.n	800216a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800215c:	240c      	movs	r4, #12
 800215e:	4941      	ldr	r1, [pc, #260]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002160:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8002162:	43a2      	bics	r2, r4
 8002164:	68ac      	ldr	r4, [r5, #8]
 8002166:	4322      	orrs	r2, r4
 8002168:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_LPUART1SEL)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800216a:	069a      	lsls	r2, r3, #26
 800216c:	d506      	bpl.n	800217c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800216e:	493d      	ldr	r1, [pc, #244]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002170:	4c41      	ldr	r4, [pc, #260]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002172:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8002174:	4022      	ands	r2, r4
 8002176:	68ec      	ldr	r4, [r5, #12]
 8002178:	4322      	orrs	r2, r4
 800217a:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPUART1SEL */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800217c:	059a      	lsls	r2, r3, #22
 800217e:	d506      	bpl.n	800218e <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002180:	4938      	ldr	r1, [pc, #224]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002182:	4c3e      	ldr	r4, [pc, #248]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002184:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8002186:	4022      	ands	r2, r4
 8002188:	69ac      	ldr	r4, [r5, #24]
 800218a:	4322      	orrs	r2, r4
 800218c:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800218e:	055a      	lsls	r2, r3, #21
 8002190:	d506      	bpl.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002192:	4934      	ldr	r1, [pc, #208]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002194:	4c3a      	ldr	r4, [pc, #232]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002196:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8002198:	4022      	ands	r2, r4
 800219a:	69ec      	ldr	r4, [r5, #28]
 800219c:	4322      	orrs	r2, r4
 800219e:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021a0:	065a      	lsls	r2, r3, #25
 80021a2:	d506      	bpl.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021a4:	492f      	ldr	r1, [pc, #188]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021a6:	4c37      	ldr	r4, [pc, #220]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80021a8:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80021aa:	4022      	ands	r2, r4
 80021ac:	692c      	ldr	r4, [r5, #16]
 80021ae:	4322      	orrs	r2, r4
 80021b0:	654a      	str	r2, [r1, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80021b2:	045a      	lsls	r2, r3, #17
 80021b4:	d50f      	bpl.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021b6:	492b      	ldr	r1, [pc, #172]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021b8:	6a2c      	ldr	r4, [r5, #32]
 80021ba:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80021bc:	0092      	lsls	r2, r2, #2
 80021be:	0892      	lsrs	r2, r2, #2
 80021c0:	4322      	orrs	r2, r4
 80021c2:	654a      	str	r2, [r1, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80021c4:	2280      	movs	r2, #128	; 0x80
 80021c6:	05d2      	lsls	r2, r2, #23
 80021c8:	4294      	cmp	r4, r2
 80021ca:	d104      	bne.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x142>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80021cc:	2280      	movs	r2, #128	; 0x80
 80021ce:	68cc      	ldr	r4, [r1, #12]
 80021d0:	0252      	lsls	r2, r2, #9
 80021d2:	4322      	orrs	r2, r4
 80021d4:	60ca      	str	r2, [r1, #12]
    }
  }

#if defined(RCC_CCIPR_CECSEL)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80021d6:	031a      	lsls	r2, r3, #12
 80021d8:	d506      	bpl.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80021da:	2440      	movs	r4, #64	; 0x40
 80021dc:	4921      	ldr	r1, [pc, #132]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021de:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80021e0:	43a2      	bics	r2, r4
 80021e2:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 80021e4:	4322      	orrs	r2, r4
 80021e6:	654a      	str	r2, [r1, #84]	; 0x54
  }
#endif /* RCC_CCIPR_CECSEL */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80021e8:	029a      	lsls	r2, r3, #10
 80021ea:	d50f      	bpl.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80021ec:	491d      	ldr	r1, [pc, #116]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021ee:	4e26      	ldr	r6, [pc, #152]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80021f0:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80021f2:	6aac      	ldr	r4, [r5, #40]	; 0x28
 80021f4:	4032      	ands	r2, r6
 80021f6:	4322      	orrs	r2, r4
 80021f8:	654a      	str	r2, [r1, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80021fa:	2280      	movs	r2, #128	; 0x80
 80021fc:	03d2      	lsls	r2, r2, #15
 80021fe:	4294      	cmp	r4, r2
 8002200:	d104      	bne.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x178>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002202:	2280      	movs	r2, #128	; 0x80
 8002204:	68cc      	ldr	r4, [r1, #12]
 8002206:	0452      	lsls	r2, r2, #17
 8002208:	4322      	orrs	r2, r4
 800220a:	60ca      	str	r2, [r1, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800220c:	025a      	lsls	r2, r3, #9
 800220e:	d50d      	bpl.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002210:	4c14      	ldr	r4, [pc, #80]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002212:	4e1e      	ldr	r6, [pc, #120]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002214:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8002216:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002218:	4031      	ands	r1, r6
 800221a:	4311      	orrs	r1, r2
 800221c:	6561      	str	r1, [r4, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800221e:	2180      	movs	r1, #128	; 0x80
 8002220:	0449      	lsls	r1, r1, #17
 8002222:	428a      	cmp	r2, r1
 8002224:	d102      	bne.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002226:	68e1      	ldr	r1, [r4, #12]
 8002228:	430a      	orrs	r2, r1
 800222a:	60e2      	str	r2, [r4, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800222c:	051b      	lsls	r3, r3, #20
 800222e:	d50f      	bpl.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002230:	490c      	ldr	r1, [pc, #48]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002232:	4c17      	ldr	r4, [pc, #92]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002234:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8002236:	696a      	ldr	r2, [r5, #20]
 8002238:	4023      	ands	r3, r4
 800223a:	4313      	orrs	r3, r2
 800223c:	654b      	str	r3, [r1, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800223e:	2380      	movs	r3, #128	; 0x80
 8002240:	01db      	lsls	r3, r3, #7
 8002242:	429a      	cmp	r2, r3
 8002244:	d104      	bne.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002246:	2380      	movs	r3, #128	; 0x80
 8002248:	68ca      	ldr	r2, [r1, #12]
 800224a:	025b      	lsls	r3, r3, #9
 800224c:	4313      	orrs	r3, r2
 800224e:	60cb      	str	r3, [r1, #12]
    }
  }

  return status;
}
 8002250:	b005      	add	sp, #20
 8002252:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002254:	f7fe fa0c 	bl	8000670 <HAL_GetTick>
 8002258:	4b0e      	ldr	r3, [pc, #56]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800225a:	1b80      	subs	r0, r0, r6
 800225c:	4298      	cmp	r0, r3
 800225e:	d800      	bhi.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8002260:	e756      	b.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002262:	e767      	b.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002264:	40021000 	.word	0x40021000
 8002268:	40007000 	.word	0x40007000
 800226c:	fffffcff 	.word	0xfffffcff
 8002270:	fffeffff 	.word	0xfffeffff
 8002274:	efffffff 	.word	0xefffffff
 8002278:	fffff3ff 	.word	0xfffff3ff
 800227c:	fff3ffff 	.word	0xfff3ffff
 8002280:	ffcfffff 	.word	0xffcfffff
 8002284:	ffffcfff 	.word	0xffffcfff
 8002288:	ffbfffff 	.word	0xffbfffff
 800228c:	feffffff 	.word	0xfeffffff
 8002290:	ffff3fff 	.word	0xffff3fff
 8002294:	00001388 	.word	0x00001388

08002298 <HAL_TIM_Base_MspInit>:
 8002298:	4770      	bx	lr
	...

0800229c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800229c:	2201      	movs	r2, #1
 800229e:	6803      	ldr	r3, [r0, #0]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022a0:	4807      	ldr	r0, [pc, #28]	; (80022c0 <HAL_TIM_Base_Start_IT+0x24>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022a2:	68d9      	ldr	r1, [r3, #12]
 80022a4:	4311      	orrs	r1, r2
 80022a6:	60d9      	str	r1, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022a8:	6899      	ldr	r1, [r3, #8]
 80022aa:	4001      	ands	r1, r0
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022ac:	2906      	cmp	r1, #6
 80022ae:	d005      	beq.n	80022bc <HAL_TIM_Base_Start_IT+0x20>
 80022b0:	3807      	subs	r0, #7
 80022b2:	4281      	cmp	r1, r0
 80022b4:	d002      	beq.n	80022bc <HAL_TIM_Base_Start_IT+0x20>
  {
  __HAL_TIM_ENABLE(htim);
 80022b6:	6819      	ldr	r1, [r3, #0]
 80022b8:	430a      	orrs	r2, r1
 80022ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 80022bc:	2000      	movs	r0, #0
 80022be:	4770      	bx	lr
 80022c0:	00010007 	.word	0x00010007

080022c4 <HAL_TIM_OC_DelayElapsedCallback>:
 80022c4:	4770      	bx	lr

080022c6 <HAL_TIM_IC_CaptureCallback>:
 80022c6:	4770      	bx	lr

080022c8 <HAL_TIM_PWM_PulseFinishedCallback>:
 80022c8:	4770      	bx	lr

080022ca <HAL_TIM_TriggerCallback>:
 80022ca:	4770      	bx	lr

080022cc <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022cc:	2202      	movs	r2, #2
 80022ce:	6803      	ldr	r3, [r0, #0]
{
 80022d0:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022d2:	6919      	ldr	r1, [r3, #16]
{
 80022d4:	0004      	movs	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022d6:	4211      	tst	r1, r2
 80022d8:	d00e      	beq.n	80022f8 <HAL_TIM_IRQHandler+0x2c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80022da:	68d9      	ldr	r1, [r3, #12]
 80022dc:	4211      	tst	r1, r2
 80022de:	d00b      	beq.n	80022f8 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022e0:	3a05      	subs	r2, #5
 80022e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022e4:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022e6:	3204      	adds	r2, #4
 80022e8:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022ea:	079b      	lsls	r3, r3, #30
 80022ec:	d100      	bne.n	80022f0 <HAL_TIM_IRQHandler+0x24>
 80022ee:	e086      	b.n	80023fe <HAL_TIM_IRQHandler+0x132>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022f0:	f7ff ffe9 	bl	80022c6 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022f4:	2300      	movs	r3, #0
 80022f6:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022f8:	2204      	movs	r2, #4
 80022fa:	6823      	ldr	r3, [r4, #0]
 80022fc:	6919      	ldr	r1, [r3, #16]
 80022fe:	4211      	tst	r1, r2
 8002300:	d011      	beq.n	8002326 <HAL_TIM_IRQHandler+0x5a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002302:	68d9      	ldr	r1, [r3, #12]
 8002304:	4211      	tst	r1, r2
 8002306:	d00e      	beq.n	8002326 <HAL_TIM_IRQHandler+0x5a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002308:	3a09      	subs	r2, #9
 800230a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800230c:	3207      	adds	r2, #7
 800230e:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002310:	699a      	ldr	r2, [r3, #24]
 8002312:	23c0      	movs	r3, #192	; 0xc0
 8002314:	009b      	lsls	r3, r3, #2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002316:	0020      	movs	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002318:	421a      	tst	r2, r3
 800231a:	d100      	bne.n	800231e <HAL_TIM_IRQHandler+0x52>
 800231c:	e075      	b.n	800240a <HAL_TIM_IRQHandler+0x13e>
        HAL_TIM_IC_CaptureCallback(htim);
 800231e:	f7ff ffd2 	bl	80022c6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002322:	2300      	movs	r3, #0
 8002324:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002326:	2208      	movs	r2, #8
 8002328:	6823      	ldr	r3, [r4, #0]
 800232a:	6919      	ldr	r1, [r3, #16]
 800232c:	4211      	tst	r1, r2
 800232e:	d00e      	beq.n	800234e <HAL_TIM_IRQHandler+0x82>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002330:	68d9      	ldr	r1, [r3, #12]
 8002332:	4211      	tst	r1, r2
 8002334:	d00b      	beq.n	800234e <HAL_TIM_IRQHandler+0x82>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002336:	3a11      	subs	r2, #17
 8002338:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800233a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800233c:	320d      	adds	r2, #13
 800233e:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002340:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002342:	079b      	lsls	r3, r3, #30
 8002344:	d067      	beq.n	8002416 <HAL_TIM_IRQHandler+0x14a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002346:	f7ff ffbe 	bl	80022c6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800234a:	2300      	movs	r3, #0
 800234c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800234e:	2210      	movs	r2, #16
 8002350:	6823      	ldr	r3, [r4, #0]
 8002352:	6919      	ldr	r1, [r3, #16]
 8002354:	4211      	tst	r1, r2
 8002356:	d010      	beq.n	800237a <HAL_TIM_IRQHandler+0xae>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002358:	68d9      	ldr	r1, [r3, #12]
 800235a:	4211      	tst	r1, r2
 800235c:	d00d      	beq.n	800237a <HAL_TIM_IRQHandler+0xae>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800235e:	3a21      	subs	r2, #33	; 0x21
 8002360:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002362:	3219      	adds	r2, #25
 8002364:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002366:	69da      	ldr	r2, [r3, #28]
 8002368:	23c0      	movs	r3, #192	; 0xc0
 800236a:	009b      	lsls	r3, r3, #2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800236c:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800236e:	421a      	tst	r2, r3
 8002370:	d057      	beq.n	8002422 <HAL_TIM_IRQHandler+0x156>
        HAL_TIM_IC_CaptureCallback(htim);
 8002372:	f7ff ffa8 	bl	80022c6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002376:	2300      	movs	r3, #0
 8002378:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800237a:	2201      	movs	r2, #1
 800237c:	6823      	ldr	r3, [r4, #0]
 800237e:	6919      	ldr	r1, [r3, #16]
 8002380:	4211      	tst	r1, r2
 8002382:	d007      	beq.n	8002394 <HAL_TIM_IRQHandler+0xc8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002384:	68d9      	ldr	r1, [r3, #12]
 8002386:	4211      	tst	r1, r2
 8002388:	d004      	beq.n	8002394 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800238a:	3a03      	subs	r2, #3
 800238c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800238e:	0020      	movs	r0, r4
 8002390:	f002 f95c 	bl	800464c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002394:	2280      	movs	r2, #128	; 0x80
 8002396:	6823      	ldr	r3, [r4, #0]
 8002398:	6919      	ldr	r1, [r3, #16]
 800239a:	4211      	tst	r1, r2
 800239c:	d008      	beq.n	80023b0 <HAL_TIM_IRQHandler+0xe4>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800239e:	68d9      	ldr	r1, [r3, #12]
 80023a0:	4211      	tst	r1, r2
 80023a2:	d005      	beq.n	80023b0 <HAL_TIM_IRQHandler+0xe4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023a4:	3a02      	subs	r2, #2
 80023a6:	3aff      	subs	r2, #255	; 0xff
 80023a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023aa:	0020      	movs	r0, r4
 80023ac:	f000 f8ae 	bl	800250c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80023b0:	6823      	ldr	r3, [r4, #0]
 80023b2:	691a      	ldr	r2, [r3, #16]
 80023b4:	05d2      	lsls	r2, r2, #23
 80023b6:	d507      	bpl.n	80023c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023b8:	68da      	ldr	r2, [r3, #12]
 80023ba:	0612      	lsls	r2, r2, #24
 80023bc:	d504      	bpl.n	80023c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80023be:	4a1c      	ldr	r2, [pc, #112]	; (8002430 <HAL_TIM_IRQHandler+0x164>)
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80023c0:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80023c2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80023c4:	f000 f8a3 	bl	800250e <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023c8:	2240      	movs	r2, #64	; 0x40
 80023ca:	6823      	ldr	r3, [r4, #0]
 80023cc:	6919      	ldr	r1, [r3, #16]
 80023ce:	4211      	tst	r1, r2
 80023d0:	d007      	beq.n	80023e2 <HAL_TIM_IRQHandler+0x116>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80023d2:	68d9      	ldr	r1, [r3, #12]
 80023d4:	4211      	tst	r1, r2
 80023d6:	d004      	beq.n	80023e2 <HAL_TIM_IRQHandler+0x116>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023d8:	3a81      	subs	r2, #129	; 0x81
 80023da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023dc:	0020      	movs	r0, r4
 80023de:	f7ff ff74 	bl	80022ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023e2:	2220      	movs	r2, #32
 80023e4:	6823      	ldr	r3, [r4, #0]
 80023e6:	6919      	ldr	r1, [r3, #16]
 80023e8:	4211      	tst	r1, r2
 80023ea:	d007      	beq.n	80023fc <HAL_TIM_IRQHandler+0x130>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80023ec:	68d9      	ldr	r1, [r3, #12]
 80023ee:	4211      	tst	r1, r2
 80023f0:	d004      	beq.n	80023fc <HAL_TIM_IRQHandler+0x130>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80023f2:	3a41      	subs	r2, #65	; 0x41
 80023f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023f6:	0020      	movs	r0, r4
 80023f8:	f000 f887 	bl	800250a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023fc:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023fe:	f7ff ff61 	bl	80022c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002402:	0020      	movs	r0, r4
 8002404:	f7ff ff60 	bl	80022c8 <HAL_TIM_PWM_PulseFinishedCallback>
 8002408:	e774      	b.n	80022f4 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800240a:	f7ff ff5b 	bl	80022c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800240e:	0020      	movs	r0, r4
 8002410:	f7ff ff5a 	bl	80022c8 <HAL_TIM_PWM_PulseFinishedCallback>
 8002414:	e785      	b.n	8002322 <HAL_TIM_IRQHandler+0x56>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002416:	f7ff ff55 	bl	80022c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800241a:	0020      	movs	r0, r4
 800241c:	f7ff ff54 	bl	80022c8 <HAL_TIM_PWM_PulseFinishedCallback>
 8002420:	e793      	b.n	800234a <HAL_TIM_IRQHandler+0x7e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002422:	f7ff ff4f 	bl	80022c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002426:	0020      	movs	r0, r4
 8002428:	f7ff ff4e 	bl	80022c8 <HAL_TIM_PWM_PulseFinishedCallback>
 800242c:	e7a3      	b.n	8002376 <HAL_TIM_IRQHandler+0xaa>
 800242e:	46c0      	nop			; (mov r8, r8)
 8002430:	fffffeff 	.word	0xfffffeff

08002434 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002434:	4a20      	ldr	r2, [pc, #128]	; (80024b8 <TIM_Base_SetConfig+0x84>)
{
 8002436:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8002438:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800243a:	4290      	cmp	r0, r2
 800243c:	d006      	beq.n	800244c <TIM_Base_SetConfig+0x18>
 800243e:	2480      	movs	r4, #128	; 0x80
 8002440:	05e4      	lsls	r4, r4, #23
 8002442:	42a0      	cmp	r0, r4
 8002444:	d002      	beq.n	800244c <TIM_Base_SetConfig+0x18>
 8002446:	4c1d      	ldr	r4, [pc, #116]	; (80024bc <TIM_Base_SetConfig+0x88>)
 8002448:	42a0      	cmp	r0, r4
 800244a:	d10c      	bne.n	8002466 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800244c:	2470      	movs	r4, #112	; 0x70
 800244e:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8002450:	684c      	ldr	r4, [r1, #4]
 8002452:	4323      	orrs	r3, r4
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002454:	4290      	cmp	r0, r2
 8002456:	d012      	beq.n	800247e <TIM_Base_SetConfig+0x4a>
 8002458:	2480      	movs	r4, #128	; 0x80
 800245a:	05e4      	lsls	r4, r4, #23
 800245c:	42a0      	cmp	r0, r4
 800245e:	d00e      	beq.n	800247e <TIM_Base_SetConfig+0x4a>
 8002460:	4c16      	ldr	r4, [pc, #88]	; (80024bc <TIM_Base_SetConfig+0x88>)
 8002462:	42a0      	cmp	r0, r4
 8002464:	d00b      	beq.n	800247e <TIM_Base_SetConfig+0x4a>
 8002466:	4c16      	ldr	r4, [pc, #88]	; (80024c0 <TIM_Base_SetConfig+0x8c>)
 8002468:	42a0      	cmp	r0, r4
 800246a:	d008      	beq.n	800247e <TIM_Base_SetConfig+0x4a>
 800246c:	4c15      	ldr	r4, [pc, #84]	; (80024c4 <TIM_Base_SetConfig+0x90>)
 800246e:	42a0      	cmp	r0, r4
 8002470:	d005      	beq.n	800247e <TIM_Base_SetConfig+0x4a>
 8002472:	4c15      	ldr	r4, [pc, #84]	; (80024c8 <TIM_Base_SetConfig+0x94>)
 8002474:	42a0      	cmp	r0, r4
 8002476:	d002      	beq.n	800247e <TIM_Base_SetConfig+0x4a>
 8002478:	4c14      	ldr	r4, [pc, #80]	; (80024cc <TIM_Base_SetConfig+0x98>)
 800247a:	42a0      	cmp	r0, r4
 800247c:	d103      	bne.n	8002486 <TIM_Base_SetConfig+0x52>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800247e:	4c14      	ldr	r4, [pc, #80]	; (80024d0 <TIM_Base_SetConfig+0x9c>)
 8002480:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002482:	68cc      	ldr	r4, [r1, #12]
 8002484:	4323      	orrs	r3, r4
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002486:	2480      	movs	r4, #128	; 0x80
 8002488:	43a3      	bics	r3, r4
 800248a:	694c      	ldr	r4, [r1, #20]
 800248c:	4323      	orrs	r3, r4

  TIMx->CR1 = tmpcr1;
 800248e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002490:	688b      	ldr	r3, [r1, #8]
 8002492:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002494:	680b      	ldr	r3, [r1, #0]
 8002496:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002498:	4290      	cmp	r0, r2
 800249a:	d008      	beq.n	80024ae <TIM_Base_SetConfig+0x7a>
 800249c:	4b09      	ldr	r3, [pc, #36]	; (80024c4 <TIM_Base_SetConfig+0x90>)
 800249e:	4298      	cmp	r0, r3
 80024a0:	d005      	beq.n	80024ae <TIM_Base_SetConfig+0x7a>
 80024a2:	4b09      	ldr	r3, [pc, #36]	; (80024c8 <TIM_Base_SetConfig+0x94>)
 80024a4:	4298      	cmp	r0, r3
 80024a6:	d002      	beq.n	80024ae <TIM_Base_SetConfig+0x7a>
 80024a8:	4b08      	ldr	r3, [pc, #32]	; (80024cc <TIM_Base_SetConfig+0x98>)
 80024aa:	4298      	cmp	r0, r3
 80024ac:	d101      	bne.n	80024b2 <TIM_Base_SetConfig+0x7e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024ae:	690b      	ldr	r3, [r1, #16]
 80024b0:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024b2:	2301      	movs	r3, #1
 80024b4:	6143      	str	r3, [r0, #20]
}
 80024b6:	bd10      	pop	{r4, pc}
 80024b8:	40012c00 	.word	0x40012c00
 80024bc:	40000400 	.word	0x40000400
 80024c0:	40002000 	.word	0x40002000
 80024c4:	40014000 	.word	0x40014000
 80024c8:	40014400 	.word	0x40014400
 80024cc:	40014800 	.word	0x40014800
 80024d0:	fffffcff 	.word	0xfffffcff

080024d4 <HAL_TIM_Base_Init>:
{
 80024d4:	b570      	push	{r4, r5, r6, lr}
 80024d6:	0004      	movs	r4, r0
    return HAL_ERROR;
 80024d8:	2001      	movs	r0, #1
  if(htim == NULL)
 80024da:	2c00      	cmp	r4, #0
 80024dc:	d014      	beq.n	8002508 <HAL_TIM_Base_Init+0x34>
  if(htim->State == HAL_TIM_STATE_RESET)
 80024de:	0025      	movs	r5, r4
 80024e0:	353d      	adds	r5, #61	; 0x3d
 80024e2:	782b      	ldrb	r3, [r5, #0]
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d105      	bne.n	80024f6 <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 80024ea:	0022      	movs	r2, r4
 80024ec:	323c      	adds	r2, #60	; 0x3c
 80024ee:	7013      	strb	r3, [r2, #0]
    HAL_TIM_Base_MspInit(htim);
 80024f0:	0020      	movs	r0, r4
 80024f2:	f7ff fed1 	bl	8002298 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80024f6:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024f8:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80024fa:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024fc:	1d21      	adds	r1, r4, #4
 80024fe:	f7ff ff99 	bl	8002434 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002502:	2301      	movs	r3, #1
  return HAL_OK;
 8002504:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8002506:	702b      	strb	r3, [r5, #0]
}
 8002508:	bd70      	pop	{r4, r5, r6, pc}

0800250a <HAL_TIMEx_CommutCallback>:
 800250a:	4770      	bx	lr

0800250c <HAL_TIMEx_BreakCallback>:
 800250c:	4770      	bx	lr

0800250e <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800250e:	4770      	bx	lr

08002510 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002512:	0004      	movs	r4, r0
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8002514:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002516:	69c1      	ldr	r1, [r0, #28]
 8002518:	6883      	ldr	r3, [r0, #8]
 800251a:	6900      	ldr	r0, [r0, #16]
  tmpreg |= (uint32_t)huart->FifoMode;
 800251c:	6e65      	ldr	r5, [r4, #100]	; 0x64
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800251e:	4303      	orrs	r3, r0
 8002520:	6960      	ldr	r0, [r4, #20]
 8002522:	4303      	orrs	r3, r0
 8002524:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002526:	6810      	ldr	r0, [r2, #0]
  tmpreg |= (uint32_t)huart->FifoMode;
 8002528:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800252a:	4da4      	ldr	r5, [pc, #656]	; (80027bc <UART_SetConfig+0x2ac>)
 800252c:	4028      	ands	r0, r5
 800252e:	4303      	orrs	r3, r0
 8002530:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002532:	6853      	ldr	r3, [r2, #4]
 8002534:	48a2      	ldr	r0, [pc, #648]	; (80027c0 <UART_SetConfig+0x2b0>)
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002536:	4da3      	ldr	r5, [pc, #652]	; (80027c4 <UART_SetConfig+0x2b4>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002538:	4003      	ands	r3, r0
 800253a:	68e0      	ldr	r0, [r4, #12]
 800253c:	4303      	orrs	r3, r0
 800253e:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002540:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002542:	42aa      	cmp	r2, r5
 8002544:	d001      	beq.n	800254a <UART_SetConfig+0x3a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002546:	6a23      	ldr	r3, [r4, #32]
 8002548:	4318      	orrs	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800254a:	6893      	ldr	r3, [r2, #8]
 800254c:	4e9e      	ldr	r6, [pc, #632]	; (80027c8 <UART_SetConfig+0x2b8>)
 800254e:	4033      	ands	r3, r6

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002550:	260f      	movs	r6, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002552:	4303      	orrs	r3, r0
 8002554:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002556:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8002558:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800255a:	43b0      	bics	r0, r6
 800255c:	4318      	orrs	r0, r3
 800255e:	62d0      	str	r0, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002560:	489a      	ldr	r0, [pc, #616]	; (80027cc <UART_SetConfig+0x2bc>)
 8002562:	4282      	cmp	r2, r0
 8002564:	d117      	bne.n	8002596 <UART_SetConfig+0x86>
 8002566:	2003      	movs	r0, #3
 8002568:	4a99      	ldr	r2, [pc, #612]	; (80027d0 <UART_SetConfig+0x2c0>)
 800256a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800256c:	4002      	ands	r2, r0
 800256e:	4899      	ldr	r0, [pc, #612]	; (80027d4 <UART_SetConfig+0x2c4>)
 8002570:	5c80      	ldrb	r0, [r0, r2]
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002572:	2280      	movs	r2, #128	; 0x80
 8002574:	0212      	lsls	r2, r2, #8
 8002576:	4291      	cmp	r1, r2
 8002578:	d000      	beq.n	800257c <UART_SetConfig+0x6c>
 800257a:	e289      	b.n	8002a90 <UART_SetConfig+0x580>
  {
    switch (clocksource)
 800257c:	2808      	cmp	r0, #8
 800257e:	d82b      	bhi.n	80025d8 <UART_SetConfig+0xc8>
 8002580:	f7fd fdcc 	bl	800011c <__gnu_thumb1_case_uhi>
 8002584:	002a037d 	.word	0x002a037d
 8002588:	002a021a 	.word	0x002a021a
 800258c:	002a024e 	.word	0x002a024e
 8002590:	002a002a 	.word	0x002a002a
 8002594:	0251      	.short	0x0251
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002596:	4890      	ldr	r0, [pc, #576]	; (80027d8 <UART_SetConfig+0x2c8>)
 8002598:	4282      	cmp	r2, r0
 800259a:	d105      	bne.n	80025a8 <UART_SetConfig+0x98>
 800259c:	200c      	movs	r0, #12
 800259e:	4a8c      	ldr	r2, [pc, #560]	; (80027d0 <UART_SetConfig+0x2c0>)
 80025a0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80025a2:	4002      	ands	r2, r0
 80025a4:	488d      	ldr	r0, [pc, #564]	; (80027dc <UART_SetConfig+0x2cc>)
 80025a6:	e7e3      	b.n	8002570 <UART_SetConfig+0x60>
 80025a8:	488d      	ldr	r0, [pc, #564]	; (80027e0 <UART_SetConfig+0x2d0>)
 80025aa:	4282      	cmp	r2, r0
 80025ac:	d100      	bne.n	80025b0 <UART_SetConfig+0xa0>
 80025ae:	e361      	b.n	8002c74 <UART_SetConfig+0x764>
 80025b0:	488c      	ldr	r0, [pc, #560]	; (80027e4 <UART_SetConfig+0x2d4>)
 80025b2:	4282      	cmp	r2, r0
 80025b4:	d100      	bne.n	80025b8 <UART_SetConfig+0xa8>
 80025b6:	e35d      	b.n	8002c74 <UART_SetConfig+0x764>
 80025b8:	2010      	movs	r0, #16
 80025ba:	42aa      	cmp	r2, r5
 80025bc:	d1d9      	bne.n	8002572 <UART_SetConfig+0x62>
 80025be:	21c0      	movs	r1, #192	; 0xc0
 80025c0:	2080      	movs	r0, #128	; 0x80
 80025c2:	4a83      	ldr	r2, [pc, #524]	; (80027d0 <UART_SetConfig+0x2c0>)
 80025c4:	0109      	lsls	r1, r1, #4
 80025c6:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80025c8:	00c0      	lsls	r0, r0, #3
 80025ca:	400a      	ands	r2, r1
 80025cc:	4282      	cmp	r2, r0
 80025ce:	d100      	bne.n	80025d2 <UART_SetConfig+0xc2>
 80025d0:	e09c      	b.n	800270c <UART_SetConfig+0x1fc>
 80025d2:	d80d      	bhi.n	80025f0 <UART_SetConfig+0xe0>
 80025d4:	2a00      	cmp	r2, #0
 80025d6:	d04e      	beq.n	8002676 <UART_SetConfig+0x166>
        ret = HAL_ERROR;
 80025d8:	2201      	movs	r2, #1
      ret = HAL_ERROR;
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80025da:	0021      	movs	r1, r4
 80025dc:	2301      	movs	r3, #1
 80025de:	316a      	adds	r1, #106	; 0x6a
 80025e0:	800b      	strh	r3, [r1, #0]
  huart->NbRxDataToProcess = 1;
 80025e2:	3902      	subs	r1, #2
 80025e4:	800b      	strh	r3, [r1, #0]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80025e6:	2300      	movs	r3, #0
  huart->TxISR = NULL;

  return ret;
}
 80025e8:	0010      	movs	r0, r2
  huart->RxISR = NULL;
 80025ea:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->TxISR = NULL;
 80025ec:	6723      	str	r3, [r4, #112]	; 0x70
}
 80025ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80025f0:	2080      	movs	r0, #128	; 0x80
 80025f2:	0100      	lsls	r0, r0, #4
 80025f4:	4282      	cmp	r2, r0
 80025f6:	d06e      	beq.n	80026d6 <UART_SetConfig+0x1c6>
 80025f8:	428a      	cmp	r2, r1
 80025fa:	d1ed      	bne.n	80025d8 <UART_SetConfig+0xc8>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d100      	bne.n	8002602 <UART_SetConfig+0xf2>
 8002600:	e0c7      	b.n	8002792 <UART_SetConfig+0x282>
 8002602:	2b01      	cmp	r3, #1
 8002604:	d100      	bne.n	8002608 <UART_SetConfig+0xf8>
 8002606:	e0c7      	b.n	8002798 <UART_SetConfig+0x288>
 8002608:	2b02      	cmp	r3, #2
 800260a:	d100      	bne.n	800260e <UART_SetConfig+0xfe>
 800260c:	e0c8      	b.n	80027a0 <UART_SetConfig+0x290>
 800260e:	2b03      	cmp	r3, #3
 8002610:	d100      	bne.n	8002614 <UART_SetConfig+0x104>
 8002612:	e0c8      	b.n	80027a6 <UART_SetConfig+0x296>
 8002614:	2b04      	cmp	r3, #4
 8002616:	d100      	bne.n	800261a <UART_SetConfig+0x10a>
 8002618:	e0c7      	b.n	80027aa <UART_SetConfig+0x29a>
 800261a:	2b05      	cmp	r3, #5
 800261c:	d100      	bne.n	8002620 <UART_SetConfig+0x110>
 800261e:	e0c7      	b.n	80027b0 <UART_SetConfig+0x2a0>
 8002620:	2b06      	cmp	r3, #6
 8002622:	d100      	bne.n	8002626 <UART_SetConfig+0x116>
 8002624:	e0c6      	b.n	80027b4 <UART_SetConfig+0x2a4>
 8002626:	2180      	movs	r1, #128	; 0x80
 8002628:	2b07      	cmp	r3, #7
 800262a:	d100      	bne.n	800262e <UART_SetConfig+0x11e>
 800262c:	e0c4      	b.n	80027b8 <UART_SetConfig+0x2a8>
 800262e:	2b08      	cmp	r3, #8
 8002630:	d100      	bne.n	8002634 <UART_SetConfig+0x124>
 8002632:	e0f7      	b.n	8002824 <UART_SetConfig+0x314>
 8002634:	2b09      	cmp	r3, #9
 8002636:	d100      	bne.n	800263a <UART_SetConfig+0x12a>
 8002638:	e0f6      	b.n	8002828 <UART_SetConfig+0x318>
 800263a:	2b0a      	cmp	r3, #10
 800263c:	d100      	bne.n	8002640 <UART_SetConfig+0x130>
 800263e:	e0f5      	b.n	800282c <UART_SetConfig+0x31c>
 8002640:	2b0b      	cmp	r3, #11
 8002642:	d000      	beq.n	8002646 <UART_SetConfig+0x136>
 8002644:	e0a6      	b.n	8002794 <UART_SetConfig+0x284>
 8002646:	3b03      	subs	r3, #3
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002648:	2003      	movs	r0, #3
 800264a:	6862      	ldr	r2, [r4, #4]
 800264c:	4350      	muls	r0, r2
 800264e:	4288      	cmp	r0, r1
 8002650:	d8c2      	bhi.n	80025d8 <UART_SetConfig+0xc8>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002652:	0310      	lsls	r0, r2, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002654:	4288      	cmp	r0, r1
 8002656:	d3bf      	bcc.n	80025d8 <UART_SetConfig+0xc8>
        switch (clocksource)
 8002658:	2b08      	cmp	r3, #8
 800265a:	d900      	bls.n	800265e <UART_SetConfig+0x14e>
 800265c:	e1a9      	b.n	80029b2 <UART_SetConfig+0x4a2>
 800265e:	0018      	movs	r0, r3
 8002660:	f7fd fd5c 	bl	800011c <__gnu_thumb1_case_uhi>
 8002664:	01a700e6 	.word	0x01a700e6
 8002668:	01a70138 	.word	0x01a70138
 800266c:	01a7016e 	.word	0x01a7016e
 8002670:	01a701a7 	.word	0x01a701a7
 8002674:	0171      	.short	0x0171
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002676:	f7ff fcdf 	bl	8002038 <HAL_RCC_GetPCLK1Freq>
 800267a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800267c:	2101      	movs	r1, #1
 800267e:	2b00      	cmp	r3, #0
 8002680:	d021      	beq.n	80026c6 <UART_SetConfig+0x1b6>
 8002682:	1849      	adds	r1, r1, r1
 8002684:	2b01      	cmp	r3, #1
 8002686:	d01e      	beq.n	80026c6 <UART_SetConfig+0x1b6>
 8002688:	3102      	adds	r1, #2
 800268a:	2b02      	cmp	r3, #2
 800268c:	d01b      	beq.n	80026c6 <UART_SetConfig+0x1b6>
 800268e:	3102      	adds	r1, #2
 8002690:	2b03      	cmp	r3, #3
 8002692:	d018      	beq.n	80026c6 <UART_SetConfig+0x1b6>
 8002694:	3102      	adds	r1, #2
 8002696:	2b04      	cmp	r3, #4
 8002698:	d015      	beq.n	80026c6 <UART_SetConfig+0x1b6>
 800269a:	3102      	adds	r1, #2
 800269c:	2b05      	cmp	r3, #5
 800269e:	d012      	beq.n	80026c6 <UART_SetConfig+0x1b6>
 80026a0:	3102      	adds	r1, #2
 80026a2:	2b06      	cmp	r3, #6
 80026a4:	d00f      	beq.n	80026c6 <UART_SetConfig+0x1b6>
 80026a6:	3104      	adds	r1, #4
 80026a8:	2b07      	cmp	r3, #7
 80026aa:	d00c      	beq.n	80026c6 <UART_SetConfig+0x1b6>
 80026ac:	3110      	adds	r1, #16
 80026ae:	2b08      	cmp	r3, #8
 80026b0:	d009      	beq.n	80026c6 <UART_SetConfig+0x1b6>
 80026b2:	3120      	adds	r1, #32
 80026b4:	2b09      	cmp	r3, #9
 80026b6:	d006      	beq.n	80026c6 <UART_SetConfig+0x1b6>
 80026b8:	3140      	adds	r1, #64	; 0x40
 80026ba:	2b0a      	cmp	r3, #10
 80026bc:	d003      	beq.n	80026c6 <UART_SetConfig+0x1b6>
 80026be:	397f      	subs	r1, #127	; 0x7f
 80026c0:	2b0b      	cmp	r3, #11
 80026c2:	d100      	bne.n	80026c6 <UART_SetConfig+0x1b6>
 80026c4:	31ff      	adds	r1, #255	; 0xff
 80026c6:	f7fd fd33 	bl	8000130 <__udivsi3>
        break;
 80026ca:	2300      	movs	r3, #0
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80026cc:	0001      	movs	r1, r0
 80026ce:	2200      	movs	r2, #0
    if (lpuart_ker_ck_pres != 0U)
 80026d0:	4291      	cmp	r1, r2
 80026d2:	d1b9      	bne.n	8002648 <UART_SetConfig+0x138>
 80026d4:	e781      	b.n	80025da <UART_SetConfig+0xca>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d059      	beq.n	800278e <UART_SetConfig+0x27e>
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d043      	beq.n	8002766 <UART_SetConfig+0x256>
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d043      	beq.n	800276a <UART_SetConfig+0x25a>
 80026e2:	2b03      	cmp	r3, #3
 80026e4:	d043      	beq.n	800276e <UART_SetConfig+0x25e>
 80026e6:	2b04      	cmp	r3, #4
 80026e8:	d043      	beq.n	8002772 <UART_SetConfig+0x262>
 80026ea:	2b05      	cmp	r3, #5
 80026ec:	d043      	beq.n	8002776 <UART_SetConfig+0x266>
 80026ee:	2b06      	cmp	r3, #6
 80026f0:	d043      	beq.n	800277a <UART_SetConfig+0x26a>
 80026f2:	2b07      	cmp	r3, #7
 80026f4:	d043      	beq.n	800277e <UART_SetConfig+0x26e>
 80026f6:	2b08      	cmp	r3, #8
 80026f8:	d043      	beq.n	8002782 <UART_SetConfig+0x272>
 80026fa:	2b09      	cmp	r3, #9
 80026fc:	d043      	beq.n	8002786 <UART_SetConfig+0x276>
 80026fe:	2b0a      	cmp	r3, #10
 8002700:	d043      	beq.n	800278a <UART_SetConfig+0x27a>
 8002702:	2b0b      	cmp	r3, #11
 8002704:	d143      	bne.n	800278e <UART_SetConfig+0x27e>
 8002706:	4938      	ldr	r1, [pc, #224]	; (80027e8 <UART_SetConfig+0x2d8>)
 8002708:	2302      	movs	r3, #2
 800270a:	e79d      	b.n	8002648 <UART_SetConfig+0x138>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800270c:	f7ff fba0 	bl	8001e50 <HAL_RCC_GetSysClockFreq>
 8002710:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002712:	2101      	movs	r1, #1
 8002714:	2b00      	cmp	r3, #0
 8002716:	d021      	beq.n	800275c <UART_SetConfig+0x24c>
 8002718:	1849      	adds	r1, r1, r1
 800271a:	2b01      	cmp	r3, #1
 800271c:	d01e      	beq.n	800275c <UART_SetConfig+0x24c>
 800271e:	3102      	adds	r1, #2
 8002720:	2b02      	cmp	r3, #2
 8002722:	d01b      	beq.n	800275c <UART_SetConfig+0x24c>
 8002724:	3102      	adds	r1, #2
 8002726:	2b03      	cmp	r3, #3
 8002728:	d018      	beq.n	800275c <UART_SetConfig+0x24c>
 800272a:	3102      	adds	r1, #2
 800272c:	2b04      	cmp	r3, #4
 800272e:	d015      	beq.n	800275c <UART_SetConfig+0x24c>
 8002730:	3102      	adds	r1, #2
 8002732:	2b05      	cmp	r3, #5
 8002734:	d012      	beq.n	800275c <UART_SetConfig+0x24c>
 8002736:	3102      	adds	r1, #2
 8002738:	2b06      	cmp	r3, #6
 800273a:	d00f      	beq.n	800275c <UART_SetConfig+0x24c>
 800273c:	3104      	adds	r1, #4
 800273e:	2b07      	cmp	r3, #7
 8002740:	d00c      	beq.n	800275c <UART_SetConfig+0x24c>
 8002742:	3110      	adds	r1, #16
 8002744:	2b08      	cmp	r3, #8
 8002746:	d009      	beq.n	800275c <UART_SetConfig+0x24c>
 8002748:	3120      	adds	r1, #32
 800274a:	2b09      	cmp	r3, #9
 800274c:	d006      	beq.n	800275c <UART_SetConfig+0x24c>
 800274e:	3140      	adds	r1, #64	; 0x40
 8002750:	2b0a      	cmp	r3, #10
 8002752:	d003      	beq.n	800275c <UART_SetConfig+0x24c>
 8002754:	397f      	subs	r1, #127	; 0x7f
 8002756:	2b0b      	cmp	r3, #11
 8002758:	d100      	bne.n	800275c <UART_SetConfig+0x24c>
 800275a:	31ff      	adds	r1, #255	; 0xff
 800275c:	f7fd fce8 	bl	8000130 <__udivsi3>
        break;
 8002760:	2304      	movs	r3, #4
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002762:	0001      	movs	r1, r0
        break;
 8002764:	e7b3      	b.n	80026ce <UART_SetConfig+0x1be>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002766:	4921      	ldr	r1, [pc, #132]	; (80027ec <UART_SetConfig+0x2dc>)
 8002768:	e7ce      	b.n	8002708 <UART_SetConfig+0x1f8>
 800276a:	4921      	ldr	r1, [pc, #132]	; (80027f0 <UART_SetConfig+0x2e0>)
 800276c:	e76c      	b.n	8002648 <UART_SetConfig+0x138>
 800276e:	4921      	ldr	r1, [pc, #132]	; (80027f4 <UART_SetConfig+0x2e4>)
 8002770:	e7ca      	b.n	8002708 <UART_SetConfig+0x1f8>
 8002772:	4921      	ldr	r1, [pc, #132]	; (80027f8 <UART_SetConfig+0x2e8>)
 8002774:	e7c8      	b.n	8002708 <UART_SetConfig+0x1f8>
 8002776:	4921      	ldr	r1, [pc, #132]	; (80027fc <UART_SetConfig+0x2ec>)
 8002778:	e7c6      	b.n	8002708 <UART_SetConfig+0x1f8>
 800277a:	4921      	ldr	r1, [pc, #132]	; (8002800 <UART_SetConfig+0x2f0>)
 800277c:	e7c4      	b.n	8002708 <UART_SetConfig+0x1f8>
 800277e:	4921      	ldr	r1, [pc, #132]	; (8002804 <UART_SetConfig+0x2f4>)
 8002780:	e7c2      	b.n	8002708 <UART_SetConfig+0x1f8>
 8002782:	4921      	ldr	r1, [pc, #132]	; (8002808 <UART_SetConfig+0x2f8>)
 8002784:	e7c0      	b.n	8002708 <UART_SetConfig+0x1f8>
 8002786:	4921      	ldr	r1, [pc, #132]	; (800280c <UART_SetConfig+0x2fc>)
 8002788:	e7be      	b.n	8002708 <UART_SetConfig+0x1f8>
 800278a:	4921      	ldr	r1, [pc, #132]	; (8002810 <UART_SetConfig+0x300>)
 800278c:	e7bc      	b.n	8002708 <UART_SetConfig+0x1f8>
 800278e:	4921      	ldr	r1, [pc, #132]	; (8002814 <UART_SetConfig+0x304>)
 8002790:	e7ba      	b.n	8002708 <UART_SetConfig+0x1f8>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002792:	2180      	movs	r1, #128	; 0x80
 8002794:	0209      	lsls	r1, r1, #8
 8002796:	e001      	b.n	800279c <UART_SetConfig+0x28c>
 8002798:	2180      	movs	r1, #128	; 0x80
 800279a:	01c9      	lsls	r1, r1, #7
 800279c:	2308      	movs	r3, #8
 800279e:	e753      	b.n	8002648 <UART_SetConfig+0x138>
 80027a0:	2180      	movs	r1, #128	; 0x80
 80027a2:	0189      	lsls	r1, r1, #6
 80027a4:	e7fa      	b.n	800279c <UART_SetConfig+0x28c>
 80027a6:	491c      	ldr	r1, [pc, #112]	; (8002818 <UART_SetConfig+0x308>)
 80027a8:	e7f8      	b.n	800279c <UART_SetConfig+0x28c>
 80027aa:	2180      	movs	r1, #128	; 0x80
 80027ac:	0149      	lsls	r1, r1, #5
 80027ae:	e7f5      	b.n	800279c <UART_SetConfig+0x28c>
 80027b0:	491a      	ldr	r1, [pc, #104]	; (800281c <UART_SetConfig+0x30c>)
 80027b2:	e7f3      	b.n	800279c <UART_SetConfig+0x28c>
 80027b4:	491a      	ldr	r1, [pc, #104]	; (8002820 <UART_SetConfig+0x310>)
 80027b6:	e7f1      	b.n	800279c <UART_SetConfig+0x28c>
 80027b8:	0109      	lsls	r1, r1, #4
 80027ba:	e7ef      	b.n	800279c <UART_SetConfig+0x28c>
 80027bc:	cfff69f3 	.word	0xcfff69f3
 80027c0:	ffffcfff 	.word	0xffffcfff
 80027c4:	40008000 	.word	0x40008000
 80027c8:	11fff4ff 	.word	0x11fff4ff
 80027cc:	40013800 	.word	0x40013800
 80027d0:	40021000 	.word	0x40021000
 80027d4:	080049b8 	.word	0x080049b8
 80027d8:	40004400 	.word	0x40004400
 80027dc:	080049bc 	.word	0x080049bc
 80027e0:	40004800 	.word	0x40004800
 80027e4:	40004c00 	.word	0x40004c00
 80027e8:	0000f424 	.word	0x0000f424
 80027ec:	007a1200 	.word	0x007a1200
 80027f0:	003d0900 	.word	0x003d0900
 80027f4:	0028b0aa 	.word	0x0028b0aa
 80027f8:	001e8480 	.word	0x001e8480
 80027fc:	00186a00 	.word	0x00186a00
 8002800:	00145855 	.word	0x00145855
 8002804:	000f4240 	.word	0x000f4240
 8002808:	0007a120 	.word	0x0007a120
 800280c:	0003d090 	.word	0x0003d090
 8002810:	0001e848 	.word	0x0001e848
 8002814:	00f42400 	.word	0x00f42400
 8002818:	00001555 	.word	0x00001555
 800281c:	00000ccc 	.word	0x00000ccc
 8002820:	00000aaa 	.word	0x00000aaa
 8002824:	00c9      	lsls	r1, r1, #3
 8002826:	e70f      	b.n	8002648 <UART_SetConfig+0x138>
 8002828:	0089      	lsls	r1, r1, #2
 800282a:	e7b7      	b.n	800279c <UART_SetConfig+0x28c>
 800282c:	0049      	lsls	r1, r1, #1
 800282e:	e7b5      	b.n	800279c <UART_SetConfig+0x28c>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002830:	f7ff fc02 	bl	8002038 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002834:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002836:	2201      	movs	r2, #1
 8002838:	2300      	movs	r3, #0
 800283a:	2900      	cmp	r1, #0
 800283c:	d02e      	beq.n	800289c <UART_SetConfig+0x38c>
 800283e:	2202      	movs	r2, #2
 8002840:	2300      	movs	r3, #0
 8002842:	2901      	cmp	r1, #1
 8002844:	d02a      	beq.n	800289c <UART_SetConfig+0x38c>
 8002846:	2204      	movs	r2, #4
 8002848:	2300      	movs	r3, #0
 800284a:	2902      	cmp	r1, #2
 800284c:	d026      	beq.n	800289c <UART_SetConfig+0x38c>
 800284e:	2206      	movs	r2, #6
 8002850:	2300      	movs	r3, #0
 8002852:	2903      	cmp	r1, #3
 8002854:	d022      	beq.n	800289c <UART_SetConfig+0x38c>
 8002856:	2208      	movs	r2, #8
 8002858:	2300      	movs	r3, #0
 800285a:	2904      	cmp	r1, #4
 800285c:	d01e      	beq.n	800289c <UART_SetConfig+0x38c>
 800285e:	220a      	movs	r2, #10
 8002860:	2300      	movs	r3, #0
 8002862:	2905      	cmp	r1, #5
 8002864:	d01a      	beq.n	800289c <UART_SetConfig+0x38c>
 8002866:	220c      	movs	r2, #12
 8002868:	2300      	movs	r3, #0
 800286a:	2906      	cmp	r1, #6
 800286c:	d016      	beq.n	800289c <UART_SetConfig+0x38c>
 800286e:	2210      	movs	r2, #16
 8002870:	2300      	movs	r3, #0
 8002872:	2907      	cmp	r1, #7
 8002874:	d012      	beq.n	800289c <UART_SetConfig+0x38c>
 8002876:	2220      	movs	r2, #32
 8002878:	2300      	movs	r3, #0
 800287a:	2908      	cmp	r1, #8
 800287c:	d00e      	beq.n	800289c <UART_SetConfig+0x38c>
 800287e:	2240      	movs	r2, #64	; 0x40
 8002880:	2300      	movs	r3, #0
 8002882:	2909      	cmp	r1, #9
 8002884:	d00a      	beq.n	800289c <UART_SetConfig+0x38c>
 8002886:	2280      	movs	r2, #128	; 0x80
 8002888:	2300      	movs	r3, #0
 800288a:	290a      	cmp	r1, #10
 800288c:	d006      	beq.n	800289c <UART_SetConfig+0x38c>
 800288e:	2201      	movs	r2, #1
 8002890:	2300      	movs	r3, #0
 8002892:	290b      	cmp	r1, #11
 8002894:	d102      	bne.n	800289c <UART_SetConfig+0x38c>
 8002896:	2280      	movs	r2, #128	; 0x80
 8002898:	2300      	movs	r3, #0
 800289a:	0052      	lsls	r2, r2, #1
 800289c:	2100      	movs	r1, #0
 800289e:	f7fd fdbd 	bl	800041c <__aeabi_uldivmod>
 80028a2:	2700      	movs	r7, #0
 80028a4:	6865      	ldr	r5, [r4, #4]
 80028a6:	0e06      	lsrs	r6, r0, #24
 80028a8:	020b      	lsls	r3, r1, #8
 80028aa:	4333      	orrs	r3, r6
 80028ac:	0202      	lsls	r2, r0, #8
 80028ae:	086e      	lsrs	r6, r5, #1
 80028b0:	1992      	adds	r2, r2, r6
 80028b2:	417b      	adcs	r3, r7
 80028b4:	0010      	movs	r0, r2
 80028b6:	0019      	movs	r1, r3
 80028b8:	002a      	movs	r2, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80028ba:	003b      	movs	r3, r7
 80028bc:	f7fd fdae 	bl	800041c <__aeabi_uldivmod>
            break;
 80028c0:	003a      	movs	r2, r7
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80028c2:	4b96      	ldr	r3, [pc, #600]	; (8002b1c <UART_SetConfig+0x60c>)
 80028c4:	4996      	ldr	r1, [pc, #600]	; (8002b20 <UART_SetConfig+0x610>)
 80028c6:	18c3      	adds	r3, r0, r3
 80028c8:	428b      	cmp	r3, r1
 80028ca:	d900      	bls.n	80028ce <UART_SetConfig+0x3be>
 80028cc:	e684      	b.n	80025d8 <UART_SetConfig+0xc8>
          huart->Instance->BRR = usartdiv;
 80028ce:	6823      	ldr	r3, [r4, #0]
 80028d0:	60d8      	str	r0, [r3, #12]
 80028d2:	e682      	b.n	80025da <UART_SetConfig+0xca>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80028d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d030      	beq.n	800293c <UART_SetConfig+0x42c>
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d01a      	beq.n	8002914 <UART_SetConfig+0x404>
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d01a      	beq.n	8002918 <UART_SetConfig+0x408>
 80028e2:	2b03      	cmp	r3, #3
 80028e4:	d01a      	beq.n	800291c <UART_SetConfig+0x40c>
 80028e6:	2b04      	cmp	r3, #4
 80028e8:	d01a      	beq.n	8002920 <UART_SetConfig+0x410>
 80028ea:	2b05      	cmp	r3, #5
 80028ec:	d01a      	beq.n	8002924 <UART_SetConfig+0x414>
 80028ee:	2b06      	cmp	r3, #6
 80028f0:	d01a      	beq.n	8002928 <UART_SetConfig+0x418>
 80028f2:	2b07      	cmp	r3, #7
 80028f4:	d01a      	beq.n	800292c <UART_SetConfig+0x41c>
 80028f6:	2b08      	cmp	r3, #8
 80028f8:	d01a      	beq.n	8002930 <UART_SetConfig+0x420>
 80028fa:	2b09      	cmp	r3, #9
 80028fc:	d01a      	beq.n	8002934 <UART_SetConfig+0x424>
 80028fe:	2b0a      	cmp	r3, #10
 8002900:	d01a      	beq.n	8002938 <UART_SetConfig+0x428>
 8002902:	2b0b      	cmp	r3, #11
 8002904:	d11a      	bne.n	800293c <UART_SetConfig+0x42c>
 8002906:	4887      	ldr	r0, [pc, #540]	; (8002b24 <UART_SetConfig+0x614>)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002908:	2100      	movs	r1, #0
 800290a:	2700      	movs	r7, #0
 800290c:	0856      	lsrs	r6, r2, #1
 800290e:	1980      	adds	r0, r0, r6
 8002910:	4179      	adcs	r1, r7
 8002912:	e7d2      	b.n	80028ba <UART_SetConfig+0x3aa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002914:	4884      	ldr	r0, [pc, #528]	; (8002b28 <UART_SetConfig+0x618>)
 8002916:	e7f7      	b.n	8002908 <UART_SetConfig+0x3f8>
 8002918:	4884      	ldr	r0, [pc, #528]	; (8002b2c <UART_SetConfig+0x61c>)
 800291a:	e7f5      	b.n	8002908 <UART_SetConfig+0x3f8>
 800291c:	4884      	ldr	r0, [pc, #528]	; (8002b30 <UART_SetConfig+0x620>)
 800291e:	e7f3      	b.n	8002908 <UART_SetConfig+0x3f8>
 8002920:	4884      	ldr	r0, [pc, #528]	; (8002b34 <UART_SetConfig+0x624>)
 8002922:	e7f1      	b.n	8002908 <UART_SetConfig+0x3f8>
 8002924:	4884      	ldr	r0, [pc, #528]	; (8002b38 <UART_SetConfig+0x628>)
 8002926:	e7ef      	b.n	8002908 <UART_SetConfig+0x3f8>
 8002928:	4884      	ldr	r0, [pc, #528]	; (8002b3c <UART_SetConfig+0x62c>)
 800292a:	e7ed      	b.n	8002908 <UART_SetConfig+0x3f8>
 800292c:	4884      	ldr	r0, [pc, #528]	; (8002b40 <UART_SetConfig+0x630>)
 800292e:	e7eb      	b.n	8002908 <UART_SetConfig+0x3f8>
 8002930:	4884      	ldr	r0, [pc, #528]	; (8002b44 <UART_SetConfig+0x634>)
 8002932:	e7e9      	b.n	8002908 <UART_SetConfig+0x3f8>
 8002934:	4884      	ldr	r0, [pc, #528]	; (8002b48 <UART_SetConfig+0x638>)
 8002936:	e7e7      	b.n	8002908 <UART_SetConfig+0x3f8>
 8002938:	4884      	ldr	r0, [pc, #528]	; (8002b4c <UART_SetConfig+0x63c>)
 800293a:	e7e5      	b.n	8002908 <UART_SetConfig+0x3f8>
 800293c:	4884      	ldr	r0, [pc, #528]	; (8002b50 <UART_SetConfig+0x640>)
 800293e:	e7e3      	b.n	8002908 <UART_SetConfig+0x3f8>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002940:	f7ff fa86 	bl	8001e50 <HAL_RCC_GetSysClockFreq>
 8002944:	e776      	b.n	8002834 <UART_SetConfig+0x324>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002946:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002948:	2b00      	cmp	r3, #0
 800294a:	d018      	beq.n	800297e <UART_SetConfig+0x46e>
 800294c:	2b01      	cmp	r3, #1
 800294e:	d019      	beq.n	8002984 <UART_SetConfig+0x474>
 8002950:	2b02      	cmp	r3, #2
 8002952:	d01a      	beq.n	800298a <UART_SetConfig+0x47a>
 8002954:	2b03      	cmp	r3, #3
 8002956:	d01b      	beq.n	8002990 <UART_SetConfig+0x480>
 8002958:	2b04      	cmp	r3, #4
 800295a:	d01b      	beq.n	8002994 <UART_SetConfig+0x484>
 800295c:	2b05      	cmp	r3, #5
 800295e:	d01c      	beq.n	800299a <UART_SetConfig+0x48a>
 8002960:	2b06      	cmp	r3, #6
 8002962:	d01c      	beq.n	800299e <UART_SetConfig+0x48e>
 8002964:	2080      	movs	r0, #128	; 0x80
 8002966:	2b07      	cmp	r3, #7
 8002968:	d01b      	beq.n	80029a2 <UART_SetConfig+0x492>
 800296a:	2b08      	cmp	r3, #8
 800296c:	d01b      	beq.n	80029a6 <UART_SetConfig+0x496>
 800296e:	2b09      	cmp	r3, #9
 8002970:	d01b      	beq.n	80029aa <UART_SetConfig+0x49a>
 8002972:	2b0a      	cmp	r3, #10
 8002974:	d01b      	beq.n	80029ae <UART_SetConfig+0x49e>
 8002976:	2b0b      	cmp	r3, #11
 8002978:	d102      	bne.n	8002980 <UART_SetConfig+0x470>
 800297a:	0200      	lsls	r0, r0, #8
 800297c:	e7c4      	b.n	8002908 <UART_SetConfig+0x3f8>
 800297e:	2080      	movs	r0, #128	; 0x80
 8002980:	0400      	lsls	r0, r0, #16
 8002982:	e7c1      	b.n	8002908 <UART_SetConfig+0x3f8>
 8002984:	2080      	movs	r0, #128	; 0x80
 8002986:	03c0      	lsls	r0, r0, #15
 8002988:	e7be      	b.n	8002908 <UART_SetConfig+0x3f8>
 800298a:	2080      	movs	r0, #128	; 0x80
 800298c:	0380      	lsls	r0, r0, #14
 800298e:	e7bb      	b.n	8002908 <UART_SetConfig+0x3f8>
 8002990:	4870      	ldr	r0, [pc, #448]	; (8002b54 <UART_SetConfig+0x644>)
 8002992:	e7b9      	b.n	8002908 <UART_SetConfig+0x3f8>
 8002994:	2080      	movs	r0, #128	; 0x80
 8002996:	0340      	lsls	r0, r0, #13
 8002998:	e7b6      	b.n	8002908 <UART_SetConfig+0x3f8>
 800299a:	486f      	ldr	r0, [pc, #444]	; (8002b58 <UART_SetConfig+0x648>)
 800299c:	e7b4      	b.n	8002908 <UART_SetConfig+0x3f8>
 800299e:	486f      	ldr	r0, [pc, #444]	; (8002b5c <UART_SetConfig+0x64c>)
 80029a0:	e7b2      	b.n	8002908 <UART_SetConfig+0x3f8>
 80029a2:	0300      	lsls	r0, r0, #12
 80029a4:	e7b0      	b.n	8002908 <UART_SetConfig+0x3f8>
 80029a6:	02c0      	lsls	r0, r0, #11
 80029a8:	e7ae      	b.n	8002908 <UART_SetConfig+0x3f8>
 80029aa:	0280      	lsls	r0, r0, #10
 80029ac:	e7ac      	b.n	8002908 <UART_SetConfig+0x3f8>
 80029ae:	0240      	lsls	r0, r0, #9
 80029b0:	e7aa      	b.n	8002908 <UART_SetConfig+0x3f8>
            ret = HAL_ERROR;
 80029b2:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80029b4:	2000      	movs	r0, #0
 80029b6:	e784      	b.n	80028c2 <UART_SetConfig+0x3b2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d02f      	beq.n	8002a1c <UART_SetConfig+0x50c>
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d019      	beq.n	80029f4 <UART_SetConfig+0x4e4>
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d019      	beq.n	80029f8 <UART_SetConfig+0x4e8>
 80029c4:	2b03      	cmp	r3, #3
 80029c6:	d019      	beq.n	80029fc <UART_SetConfig+0x4ec>
 80029c8:	2b04      	cmp	r3, #4
 80029ca:	d019      	beq.n	8002a00 <UART_SetConfig+0x4f0>
 80029cc:	2b05      	cmp	r3, #5
 80029ce:	d019      	beq.n	8002a04 <UART_SetConfig+0x4f4>
 80029d0:	2b06      	cmp	r3, #6
 80029d2:	d019      	beq.n	8002a08 <UART_SetConfig+0x4f8>
 80029d4:	2b07      	cmp	r3, #7
 80029d6:	d019      	beq.n	8002a0c <UART_SetConfig+0x4fc>
 80029d8:	2b08      	cmp	r3, #8
 80029da:	d019      	beq.n	8002a10 <UART_SetConfig+0x500>
 80029dc:	2b09      	cmp	r3, #9
 80029de:	d019      	beq.n	8002a14 <UART_SetConfig+0x504>
 80029e0:	2b0a      	cmp	r3, #10
 80029e2:	d019      	beq.n	8002a18 <UART_SetConfig+0x508>
 80029e4:	2b0b      	cmp	r3, #11
 80029e6:	d119      	bne.n	8002a1c <UART_SetConfig+0x50c>
 80029e8:	485d      	ldr	r0, [pc, #372]	; (8002b60 <UART_SetConfig+0x650>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80029ea:	6863      	ldr	r3, [r4, #4]
 80029ec:	6861      	ldr	r1, [r4, #4]
 80029ee:	085b      	lsrs	r3, r3, #1
 80029f0:	1818      	adds	r0, r3, r0
 80029f2:	e173      	b.n	8002cdc <UART_SetConfig+0x7cc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80029f4:	484b      	ldr	r0, [pc, #300]	; (8002b24 <UART_SetConfig+0x614>)
 80029f6:	e7f8      	b.n	80029ea <UART_SetConfig+0x4da>
 80029f8:	485a      	ldr	r0, [pc, #360]	; (8002b64 <UART_SetConfig+0x654>)
 80029fa:	e7f6      	b.n	80029ea <UART_SetConfig+0x4da>
 80029fc:	485a      	ldr	r0, [pc, #360]	; (8002b68 <UART_SetConfig+0x658>)
 80029fe:	e7f4      	b.n	80029ea <UART_SetConfig+0x4da>
 8002a00:	485a      	ldr	r0, [pc, #360]	; (8002b6c <UART_SetConfig+0x65c>)
 8002a02:	e7f2      	b.n	80029ea <UART_SetConfig+0x4da>
 8002a04:	485a      	ldr	r0, [pc, #360]	; (8002b70 <UART_SetConfig+0x660>)
 8002a06:	e7f0      	b.n	80029ea <UART_SetConfig+0x4da>
 8002a08:	485a      	ldr	r0, [pc, #360]	; (8002b74 <UART_SetConfig+0x664>)
 8002a0a:	e7ee      	b.n	80029ea <UART_SetConfig+0x4da>
 8002a0c:	485a      	ldr	r0, [pc, #360]	; (8002b78 <UART_SetConfig+0x668>)
 8002a0e:	e7ec      	b.n	80029ea <UART_SetConfig+0x4da>
 8002a10:	485a      	ldr	r0, [pc, #360]	; (8002b7c <UART_SetConfig+0x66c>)
 8002a12:	e7ea      	b.n	80029ea <UART_SetConfig+0x4da>
 8002a14:	485a      	ldr	r0, [pc, #360]	; (8002b80 <UART_SetConfig+0x670>)
 8002a16:	e7e8      	b.n	80029ea <UART_SetConfig+0x4da>
 8002a18:	485a      	ldr	r0, [pc, #360]	; (8002b84 <UART_SetConfig+0x674>)
 8002a1a:	e7e6      	b.n	80029ea <UART_SetConfig+0x4da>
 8002a1c:	484b      	ldr	r0, [pc, #300]	; (8002b4c <UART_SetConfig+0x63c>)
 8002a1e:	e7e4      	b.n	80029ea <UART_SetConfig+0x4da>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a20:	f7ff fa16 	bl	8001e50 <HAL_RCC_GetSysClockFreq>
 8002a24:	e12d      	b.n	8002c82 <UART_SetConfig+0x772>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d018      	beq.n	8002a5c <UART_SetConfig+0x54c>
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d019      	beq.n	8002a62 <UART_SetConfig+0x552>
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d01a      	beq.n	8002a68 <UART_SetConfig+0x558>
 8002a32:	2b03      	cmp	r3, #3
 8002a34:	d01b      	beq.n	8002a6e <UART_SetConfig+0x55e>
 8002a36:	2b04      	cmp	r3, #4
 8002a38:	d01b      	beq.n	8002a72 <UART_SetConfig+0x562>
 8002a3a:	2b05      	cmp	r3, #5
 8002a3c:	d01c      	beq.n	8002a78 <UART_SetConfig+0x568>
 8002a3e:	2b06      	cmp	r3, #6
 8002a40:	d01c      	beq.n	8002a7c <UART_SetConfig+0x56c>
 8002a42:	2080      	movs	r0, #128	; 0x80
 8002a44:	2b07      	cmp	r3, #7
 8002a46:	d01b      	beq.n	8002a80 <UART_SetConfig+0x570>
 8002a48:	2b08      	cmp	r3, #8
 8002a4a:	d01b      	beq.n	8002a84 <UART_SetConfig+0x574>
 8002a4c:	2b09      	cmp	r3, #9
 8002a4e:	d01b      	beq.n	8002a88 <UART_SetConfig+0x578>
 8002a50:	2b0a      	cmp	r3, #10
 8002a52:	d01b      	beq.n	8002a8c <UART_SetConfig+0x57c>
 8002a54:	2b0b      	cmp	r3, #11
 8002a56:	d102      	bne.n	8002a5e <UART_SetConfig+0x54e>
 8002a58:	0040      	lsls	r0, r0, #1
 8002a5a:	e7c6      	b.n	80029ea <UART_SetConfig+0x4da>
 8002a5c:	2080      	movs	r0, #128	; 0x80
 8002a5e:	0240      	lsls	r0, r0, #9
 8002a60:	e7c3      	b.n	80029ea <UART_SetConfig+0x4da>
 8002a62:	2080      	movs	r0, #128	; 0x80
 8002a64:	0200      	lsls	r0, r0, #8
 8002a66:	e7c0      	b.n	80029ea <UART_SetConfig+0x4da>
 8002a68:	2080      	movs	r0, #128	; 0x80
 8002a6a:	01c0      	lsls	r0, r0, #7
 8002a6c:	e7bd      	b.n	80029ea <UART_SetConfig+0x4da>
 8002a6e:	4846      	ldr	r0, [pc, #280]	; (8002b88 <UART_SetConfig+0x678>)
 8002a70:	e7bb      	b.n	80029ea <UART_SetConfig+0x4da>
 8002a72:	2080      	movs	r0, #128	; 0x80
 8002a74:	0180      	lsls	r0, r0, #6
 8002a76:	e7b8      	b.n	80029ea <UART_SetConfig+0x4da>
 8002a78:	4844      	ldr	r0, [pc, #272]	; (8002b8c <UART_SetConfig+0x67c>)
 8002a7a:	e7b6      	b.n	80029ea <UART_SetConfig+0x4da>
 8002a7c:	4844      	ldr	r0, [pc, #272]	; (8002b90 <UART_SetConfig+0x680>)
 8002a7e:	e7b4      	b.n	80029ea <UART_SetConfig+0x4da>
 8002a80:	0140      	lsls	r0, r0, #5
 8002a82:	e7b2      	b.n	80029ea <UART_SetConfig+0x4da>
 8002a84:	0100      	lsls	r0, r0, #4
 8002a86:	e7b0      	b.n	80029ea <UART_SetConfig+0x4da>
 8002a88:	00c0      	lsls	r0, r0, #3
 8002a8a:	e7ae      	b.n	80029ea <UART_SetConfig+0x4da>
 8002a8c:	0080      	lsls	r0, r0, #2
 8002a8e:	e7ac      	b.n	80029ea <UART_SetConfig+0x4da>
    switch (clocksource)
 8002a90:	2808      	cmp	r0, #8
 8002a92:	d900      	bls.n	8002a96 <UART_SetConfig+0x586>
 8002a94:	e0eb      	b.n	8002c6e <UART_SetConfig+0x75e>
 8002a96:	f7fd fb37 	bl	8000108 <__gnu_thumb1_case_uqi>
 8002a9a:	ea05      	.short	0xea05
 8002a9c:	eab3ea7f 	.word	0xeab3ea7f
 8002aa0:	eaea      	.short	0xeaea
 8002aa2:	b6          	.byte	0xb6
 8002aa3:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002aa4:	f7ff fac8 	bl	8002038 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002aa8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002aaa:	2101      	movs	r1, #1
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d021      	beq.n	8002af4 <UART_SetConfig+0x5e4>
 8002ab0:	1849      	adds	r1, r1, r1
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d01e      	beq.n	8002af4 <UART_SetConfig+0x5e4>
 8002ab6:	3102      	adds	r1, #2
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d01b      	beq.n	8002af4 <UART_SetConfig+0x5e4>
 8002abc:	3102      	adds	r1, #2
 8002abe:	2b03      	cmp	r3, #3
 8002ac0:	d018      	beq.n	8002af4 <UART_SetConfig+0x5e4>
 8002ac2:	3102      	adds	r1, #2
 8002ac4:	2b04      	cmp	r3, #4
 8002ac6:	d015      	beq.n	8002af4 <UART_SetConfig+0x5e4>
 8002ac8:	3102      	adds	r1, #2
 8002aca:	2b05      	cmp	r3, #5
 8002acc:	d012      	beq.n	8002af4 <UART_SetConfig+0x5e4>
 8002ace:	3102      	adds	r1, #2
 8002ad0:	2b06      	cmp	r3, #6
 8002ad2:	d00f      	beq.n	8002af4 <UART_SetConfig+0x5e4>
 8002ad4:	3104      	adds	r1, #4
 8002ad6:	2b07      	cmp	r3, #7
 8002ad8:	d00c      	beq.n	8002af4 <UART_SetConfig+0x5e4>
 8002ada:	3110      	adds	r1, #16
 8002adc:	2b08      	cmp	r3, #8
 8002ade:	d009      	beq.n	8002af4 <UART_SetConfig+0x5e4>
 8002ae0:	3120      	adds	r1, #32
 8002ae2:	2b09      	cmp	r3, #9
 8002ae4:	d006      	beq.n	8002af4 <UART_SetConfig+0x5e4>
 8002ae6:	3140      	adds	r1, #64	; 0x40
 8002ae8:	2b0a      	cmp	r3, #10
 8002aea:	d003      	beq.n	8002af4 <UART_SetConfig+0x5e4>
 8002aec:	397f      	subs	r1, #127	; 0x7f
 8002aee:	2b0b      	cmp	r3, #11
 8002af0:	d100      	bne.n	8002af4 <UART_SetConfig+0x5e4>
 8002af2:	31ff      	adds	r1, #255	; 0xff
 8002af4:	6865      	ldr	r5, [r4, #4]
 8002af6:	f7fd fb1b 	bl	8000130 <__udivsi3>
 8002afa:	0029      	movs	r1, r5
 8002afc:	086b      	lsrs	r3, r5, #1
 8002afe:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b00:	f7fd fb16 	bl	8000130 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b04:	2200      	movs	r2, #0
 8002b06:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b08:	0019      	movs	r1, r3
 8002b0a:	4822      	ldr	r0, [pc, #136]	; (8002b94 <UART_SetConfig+0x684>)
 8002b0c:	3910      	subs	r1, #16
 8002b0e:	4281      	cmp	r1, r0
 8002b10:	d900      	bls.n	8002b14 <UART_SetConfig+0x604>
 8002b12:	e561      	b.n	80025d8 <UART_SetConfig+0xc8>
      huart->Instance->BRR = usartdiv;
 8002b14:	6821      	ldr	r1, [r4, #0]
 8002b16:	60cb      	str	r3, [r1, #12]
 8002b18:	e55f      	b.n	80025da <UART_SetConfig+0xca>
 8002b1a:	46c0      	nop			; (mov r8, r8)
 8002b1c:	fffffd00 	.word	0xfffffd00
 8002b20:	000ffcff 	.word	0x000ffcff
 8002b24:	00f42400 	.word	0x00f42400
 8002b28:	7a120000 	.word	0x7a120000
 8002b2c:	3d090000 	.word	0x3d090000
 8002b30:	28b0aa00 	.word	0x28b0aa00
 8002b34:	1e848000 	.word	0x1e848000
 8002b38:	186a0000 	.word	0x186a0000
 8002b3c:	14585500 	.word	0x14585500
 8002b40:	0f424000 	.word	0x0f424000
 8002b44:	07a12000 	.word	0x07a12000
 8002b48:	03d09000 	.word	0x03d09000
 8002b4c:	01e84800 	.word	0x01e84800
 8002b50:	f4240000 	.word	0xf4240000
 8002b54:	00155500 	.word	0x00155500
 8002b58:	000ccc00 	.word	0x000ccc00
 8002b5c:	000aaa00 	.word	0x000aaa00
 8002b60:	0001e848 	.word	0x0001e848
 8002b64:	007a1200 	.word	0x007a1200
 8002b68:	00516154 	.word	0x00516154
 8002b6c:	003d0900 	.word	0x003d0900
 8002b70:	0030d400 	.word	0x0030d400
 8002b74:	0028b0aa 	.word	0x0028b0aa
 8002b78:	001e8480 	.word	0x001e8480
 8002b7c:	000f4240 	.word	0x000f4240
 8002b80:	0007a120 	.word	0x0007a120
 8002b84:	0003d090 	.word	0x0003d090
 8002b88:	00002aaa 	.word	0x00002aaa
 8002b8c:	00001998 	.word	0x00001998
 8002b90:	00001554 	.word	0x00001554
 8002b94:	0000ffef 	.word	0x0000ffef
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d02f      	beq.n	8002bfc <UART_SetConfig+0x6ec>
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d019      	beq.n	8002bd4 <UART_SetConfig+0x6c4>
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d019      	beq.n	8002bd8 <UART_SetConfig+0x6c8>
 8002ba4:	2b03      	cmp	r3, #3
 8002ba6:	d019      	beq.n	8002bdc <UART_SetConfig+0x6cc>
 8002ba8:	2b04      	cmp	r3, #4
 8002baa:	d019      	beq.n	8002be0 <UART_SetConfig+0x6d0>
 8002bac:	2b05      	cmp	r3, #5
 8002bae:	d019      	beq.n	8002be4 <UART_SetConfig+0x6d4>
 8002bb0:	2b06      	cmp	r3, #6
 8002bb2:	d019      	beq.n	8002be8 <UART_SetConfig+0x6d8>
 8002bb4:	2b07      	cmp	r3, #7
 8002bb6:	d019      	beq.n	8002bec <UART_SetConfig+0x6dc>
 8002bb8:	2b08      	cmp	r3, #8
 8002bba:	d019      	beq.n	8002bf0 <UART_SetConfig+0x6e0>
 8002bbc:	2b09      	cmp	r3, #9
 8002bbe:	d019      	beq.n	8002bf4 <UART_SetConfig+0x6e4>
 8002bc0:	2b0a      	cmp	r3, #10
 8002bc2:	d019      	beq.n	8002bf8 <UART_SetConfig+0x6e8>
 8002bc4:	2b0b      	cmp	r3, #11
 8002bc6:	d119      	bne.n	8002bfc <UART_SetConfig+0x6ec>
 8002bc8:	484e      	ldr	r0, [pc, #312]	; (8002d04 <UART_SetConfig+0x7f4>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002bca:	6863      	ldr	r3, [r4, #4]
 8002bcc:	6861      	ldr	r1, [r4, #4]
 8002bce:	085b      	lsrs	r3, r3, #1
 8002bd0:	1818      	adds	r0, r3, r0
 8002bd2:	e795      	b.n	8002b00 <UART_SetConfig+0x5f0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002bd4:	484c      	ldr	r0, [pc, #304]	; (8002d08 <UART_SetConfig+0x7f8>)
 8002bd6:	e7f8      	b.n	8002bca <UART_SetConfig+0x6ba>
 8002bd8:	484c      	ldr	r0, [pc, #304]	; (8002d0c <UART_SetConfig+0x7fc>)
 8002bda:	e7f6      	b.n	8002bca <UART_SetConfig+0x6ba>
 8002bdc:	484c      	ldr	r0, [pc, #304]	; (8002d10 <UART_SetConfig+0x800>)
 8002bde:	e7f4      	b.n	8002bca <UART_SetConfig+0x6ba>
 8002be0:	484c      	ldr	r0, [pc, #304]	; (8002d14 <UART_SetConfig+0x804>)
 8002be2:	e7f2      	b.n	8002bca <UART_SetConfig+0x6ba>
 8002be4:	484c      	ldr	r0, [pc, #304]	; (8002d18 <UART_SetConfig+0x808>)
 8002be6:	e7f0      	b.n	8002bca <UART_SetConfig+0x6ba>
 8002be8:	484c      	ldr	r0, [pc, #304]	; (8002d1c <UART_SetConfig+0x80c>)
 8002bea:	e7ee      	b.n	8002bca <UART_SetConfig+0x6ba>
 8002bec:	484c      	ldr	r0, [pc, #304]	; (8002d20 <UART_SetConfig+0x810>)
 8002bee:	e7ec      	b.n	8002bca <UART_SetConfig+0x6ba>
 8002bf0:	484c      	ldr	r0, [pc, #304]	; (8002d24 <UART_SetConfig+0x814>)
 8002bf2:	e7ea      	b.n	8002bca <UART_SetConfig+0x6ba>
 8002bf4:	484c      	ldr	r0, [pc, #304]	; (8002d28 <UART_SetConfig+0x818>)
 8002bf6:	e7e8      	b.n	8002bca <UART_SetConfig+0x6ba>
 8002bf8:	484c      	ldr	r0, [pc, #304]	; (8002d2c <UART_SetConfig+0x81c>)
 8002bfa:	e7e6      	b.n	8002bca <UART_SetConfig+0x6ba>
 8002bfc:	484c      	ldr	r0, [pc, #304]	; (8002d30 <UART_SetConfig+0x820>)
 8002bfe:	e7e4      	b.n	8002bca <UART_SetConfig+0x6ba>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c00:	f7ff f926 	bl	8001e50 <HAL_RCC_GetSysClockFreq>
 8002c04:	e750      	b.n	8002aa8 <UART_SetConfig+0x598>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d018      	beq.n	8002c3c <UART_SetConfig+0x72c>
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d018      	beq.n	8002c40 <UART_SetConfig+0x730>
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d019      	beq.n	8002c46 <UART_SetConfig+0x736>
 8002c12:	2b03      	cmp	r3, #3
 8002c14:	d01a      	beq.n	8002c4c <UART_SetConfig+0x73c>
 8002c16:	2b04      	cmp	r3, #4
 8002c18:	d01a      	beq.n	8002c50 <UART_SetConfig+0x740>
 8002c1a:	2b05      	cmp	r3, #5
 8002c1c:	d01b      	beq.n	8002c56 <UART_SetConfig+0x746>
 8002c1e:	2b06      	cmp	r3, #6
 8002c20:	d01b      	beq.n	8002c5a <UART_SetConfig+0x74a>
 8002c22:	2080      	movs	r0, #128	; 0x80
 8002c24:	2b07      	cmp	r3, #7
 8002c26:	d01a      	beq.n	8002c5e <UART_SetConfig+0x74e>
 8002c28:	2b08      	cmp	r3, #8
 8002c2a:	d01a      	beq.n	8002c62 <UART_SetConfig+0x752>
 8002c2c:	2b09      	cmp	r3, #9
 8002c2e:	d01a      	beq.n	8002c66 <UART_SetConfig+0x756>
 8002c30:	2b0a      	cmp	r3, #10
 8002c32:	d01a      	beq.n	8002c6a <UART_SetConfig+0x75a>
 8002c34:	2b0b      	cmp	r3, #11
 8002c36:	d0c8      	beq.n	8002bca <UART_SetConfig+0x6ba>
 8002c38:	0200      	lsls	r0, r0, #8
 8002c3a:	e7c6      	b.n	8002bca <UART_SetConfig+0x6ba>
 8002c3c:	2080      	movs	r0, #128	; 0x80
 8002c3e:	e7fb      	b.n	8002c38 <UART_SetConfig+0x728>
 8002c40:	2080      	movs	r0, #128	; 0x80
 8002c42:	01c0      	lsls	r0, r0, #7
 8002c44:	e7c1      	b.n	8002bca <UART_SetConfig+0x6ba>
 8002c46:	2080      	movs	r0, #128	; 0x80
 8002c48:	0180      	lsls	r0, r0, #6
 8002c4a:	e7be      	b.n	8002bca <UART_SetConfig+0x6ba>
 8002c4c:	4839      	ldr	r0, [pc, #228]	; (8002d34 <UART_SetConfig+0x824>)
 8002c4e:	e7bc      	b.n	8002bca <UART_SetConfig+0x6ba>
 8002c50:	2080      	movs	r0, #128	; 0x80
 8002c52:	0140      	lsls	r0, r0, #5
 8002c54:	e7b9      	b.n	8002bca <UART_SetConfig+0x6ba>
 8002c56:	4838      	ldr	r0, [pc, #224]	; (8002d38 <UART_SetConfig+0x828>)
 8002c58:	e7b7      	b.n	8002bca <UART_SetConfig+0x6ba>
 8002c5a:	4838      	ldr	r0, [pc, #224]	; (8002d3c <UART_SetConfig+0x82c>)
 8002c5c:	e7b5      	b.n	8002bca <UART_SetConfig+0x6ba>
 8002c5e:	0100      	lsls	r0, r0, #4
 8002c60:	e7b3      	b.n	8002bca <UART_SetConfig+0x6ba>
 8002c62:	00c0      	lsls	r0, r0, #3
 8002c64:	e7b1      	b.n	8002bca <UART_SetConfig+0x6ba>
 8002c66:	0080      	lsls	r0, r0, #2
 8002c68:	e7af      	b.n	8002bca <UART_SetConfig+0x6ba>
 8002c6a:	0040      	lsls	r0, r0, #1
 8002c6c:	e7ad      	b.n	8002bca <UART_SetConfig+0x6ba>
        ret = HAL_ERROR;
 8002c6e:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002c70:	2300      	movs	r3, #0
 8002c72:	e749      	b.n	8002b08 <UART_SetConfig+0x5f8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c74:	2380      	movs	r3, #128	; 0x80
 8002c76:	021b      	lsls	r3, r3, #8
 8002c78:	4299      	cmp	r1, r3
 8002c7a:	d000      	beq.n	8002c7e <UART_SetConfig+0x76e>
 8002c7c:	e712      	b.n	8002aa4 <UART_SetConfig+0x594>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c7e:	f7ff f9db 	bl	8002038 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c84:	2101      	movs	r1, #1
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d021      	beq.n	8002cce <UART_SetConfig+0x7be>
 8002c8a:	1849      	adds	r1, r1, r1
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d01e      	beq.n	8002cce <UART_SetConfig+0x7be>
 8002c90:	3102      	adds	r1, #2
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d01b      	beq.n	8002cce <UART_SetConfig+0x7be>
 8002c96:	3102      	adds	r1, #2
 8002c98:	2b03      	cmp	r3, #3
 8002c9a:	d018      	beq.n	8002cce <UART_SetConfig+0x7be>
 8002c9c:	3102      	adds	r1, #2
 8002c9e:	2b04      	cmp	r3, #4
 8002ca0:	d015      	beq.n	8002cce <UART_SetConfig+0x7be>
 8002ca2:	3102      	adds	r1, #2
 8002ca4:	2b05      	cmp	r3, #5
 8002ca6:	d012      	beq.n	8002cce <UART_SetConfig+0x7be>
 8002ca8:	3102      	adds	r1, #2
 8002caa:	2b06      	cmp	r3, #6
 8002cac:	d00f      	beq.n	8002cce <UART_SetConfig+0x7be>
 8002cae:	3104      	adds	r1, #4
 8002cb0:	2b07      	cmp	r3, #7
 8002cb2:	d00c      	beq.n	8002cce <UART_SetConfig+0x7be>
 8002cb4:	3110      	adds	r1, #16
 8002cb6:	2b08      	cmp	r3, #8
 8002cb8:	d009      	beq.n	8002cce <UART_SetConfig+0x7be>
 8002cba:	3120      	adds	r1, #32
 8002cbc:	2b09      	cmp	r3, #9
 8002cbe:	d006      	beq.n	8002cce <UART_SetConfig+0x7be>
 8002cc0:	3140      	adds	r1, #64	; 0x40
 8002cc2:	2b0a      	cmp	r3, #10
 8002cc4:	d003      	beq.n	8002cce <UART_SetConfig+0x7be>
 8002cc6:	397f      	subs	r1, #127	; 0x7f
 8002cc8:	2b0b      	cmp	r3, #11
 8002cca:	d100      	bne.n	8002cce <UART_SetConfig+0x7be>
 8002ccc:	31ff      	adds	r1, #255	; 0xff
 8002cce:	f7fd fa2f 	bl	8000130 <__udivsi3>
 8002cd2:	6865      	ldr	r5, [r4, #4]
 8002cd4:	0040      	lsls	r0, r0, #1
 8002cd6:	0029      	movs	r1, r5
 8002cd8:	086b      	lsrs	r3, r5, #1
 8002cda:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002cdc:	f7fd fa28 	bl	8000130 <__udivsi3>
 8002ce0:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ce2:	0003      	movs	r3, r0
 8002ce4:	4a16      	ldr	r2, [pc, #88]	; (8002d40 <UART_SetConfig+0x830>)
 8002ce6:	3b10      	subs	r3, #16
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d900      	bls.n	8002cee <UART_SetConfig+0x7de>
 8002cec:	e474      	b.n	80025d8 <UART_SetConfig+0xc8>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002cee:	230f      	movs	r3, #15
 8002cf0:	0002      	movs	r2, r0
 8002cf2:	439a      	bics	r2, r3
 8002cf4:	0013      	movs	r3, r2
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002cf6:	0700      	lsls	r0, r0, #28
      huart->Instance->BRR = brrtemp;
 8002cf8:	6822      	ldr	r2, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002cfa:	0f40      	lsrs	r0, r0, #29
      huart->Instance->BRR = brrtemp;
 8002cfc:	4318      	orrs	r0, r3
 8002cfe:	60d0      	str	r0, [r2, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	e46a      	b.n	80025da <UART_SetConfig+0xca>
 8002d04:	0000f424 	.word	0x0000f424
 8002d08:	007a1200 	.word	0x007a1200
 8002d0c:	003d0900 	.word	0x003d0900
 8002d10:	0028b0aa 	.word	0x0028b0aa
 8002d14:	001e8480 	.word	0x001e8480
 8002d18:	00186a00 	.word	0x00186a00
 8002d1c:	00145855 	.word	0x00145855
 8002d20:	000f4240 	.word	0x000f4240
 8002d24:	0007a120 	.word	0x0007a120
 8002d28:	0003d090 	.word	0x0003d090
 8002d2c:	0001e848 	.word	0x0001e848
 8002d30:	00f42400 	.word	0x00f42400
 8002d34:	00001555 	.word	0x00001555
 8002d38:	00000ccc 	.word	0x00000ccc
 8002d3c:	00000aaa 	.word	0x00000aaa
 8002d40:	0000ffef 	.word	0x0000ffef

08002d44 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d44:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 8002d46:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d48:	07da      	lsls	r2, r3, #31
 8002d4a:	d506      	bpl.n	8002d5a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d4c:	6801      	ldr	r1, [r0, #0]
 8002d4e:	4c28      	ldr	r4, [pc, #160]	; (8002df0 <UART_AdvFeatureConfig+0xac>)
 8002d50:	684a      	ldr	r2, [r1, #4]
 8002d52:	4022      	ands	r2, r4
 8002d54:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002d56:	4322      	orrs	r2, r4
 8002d58:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d5a:	079a      	lsls	r2, r3, #30
 8002d5c:	d506      	bpl.n	8002d6c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d5e:	6801      	ldr	r1, [r0, #0]
 8002d60:	4c24      	ldr	r4, [pc, #144]	; (8002df4 <UART_AdvFeatureConfig+0xb0>)
 8002d62:	684a      	ldr	r2, [r1, #4]
 8002d64:	4022      	ands	r2, r4
 8002d66:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002d68:	4322      	orrs	r2, r4
 8002d6a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d6c:	075a      	lsls	r2, r3, #29
 8002d6e:	d506      	bpl.n	8002d7e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d70:	6801      	ldr	r1, [r0, #0]
 8002d72:	4c21      	ldr	r4, [pc, #132]	; (8002df8 <UART_AdvFeatureConfig+0xb4>)
 8002d74:	684a      	ldr	r2, [r1, #4]
 8002d76:	4022      	ands	r2, r4
 8002d78:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002d7a:	4322      	orrs	r2, r4
 8002d7c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d7e:	071a      	lsls	r2, r3, #28
 8002d80:	d506      	bpl.n	8002d90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d82:	6801      	ldr	r1, [r0, #0]
 8002d84:	4c1d      	ldr	r4, [pc, #116]	; (8002dfc <UART_AdvFeatureConfig+0xb8>)
 8002d86:	684a      	ldr	r2, [r1, #4]
 8002d88:	4022      	ands	r2, r4
 8002d8a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002d8c:	4322      	orrs	r2, r4
 8002d8e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d90:	06da      	lsls	r2, r3, #27
 8002d92:	d506      	bpl.n	8002da2 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d94:	6801      	ldr	r1, [r0, #0]
 8002d96:	4c1a      	ldr	r4, [pc, #104]	; (8002e00 <UART_AdvFeatureConfig+0xbc>)
 8002d98:	688a      	ldr	r2, [r1, #8]
 8002d9a:	4022      	ands	r2, r4
 8002d9c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002d9e:	4322      	orrs	r2, r4
 8002da0:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002da2:	069a      	lsls	r2, r3, #26
 8002da4:	d506      	bpl.n	8002db4 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002da6:	6801      	ldr	r1, [r0, #0]
 8002da8:	4c16      	ldr	r4, [pc, #88]	; (8002e04 <UART_AdvFeatureConfig+0xc0>)
 8002daa:	688a      	ldr	r2, [r1, #8]
 8002dac:	4022      	ands	r2, r4
 8002dae:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002db0:	4322      	orrs	r2, r4
 8002db2:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002db4:	065a      	lsls	r2, r3, #25
 8002db6:	d510      	bpl.n	8002dda <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002db8:	6801      	ldr	r1, [r0, #0]
 8002dba:	4d13      	ldr	r5, [pc, #76]	; (8002e08 <UART_AdvFeatureConfig+0xc4>)
 8002dbc:	684a      	ldr	r2, [r1, #4]
 8002dbe:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002dc0:	402a      	ands	r2, r5
 8002dc2:	4322      	orrs	r2, r4
 8002dc4:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002dc6:	2280      	movs	r2, #128	; 0x80
 8002dc8:	0352      	lsls	r2, r2, #13
 8002dca:	4294      	cmp	r4, r2
 8002dcc:	d105      	bne.n	8002dda <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002dce:	684a      	ldr	r2, [r1, #4]
 8002dd0:	4c0e      	ldr	r4, [pc, #56]	; (8002e0c <UART_AdvFeatureConfig+0xc8>)
 8002dd2:	4022      	ands	r2, r4
 8002dd4:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8002dd6:	4322      	orrs	r2, r4
 8002dd8:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002dda:	061b      	lsls	r3, r3, #24
 8002ddc:	d506      	bpl.n	8002dec <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002dde:	6802      	ldr	r2, [r0, #0]
 8002de0:	490b      	ldr	r1, [pc, #44]	; (8002e10 <UART_AdvFeatureConfig+0xcc>)
 8002de2:	6853      	ldr	r3, [r2, #4]
 8002de4:	400b      	ands	r3, r1
 8002de6:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8002de8:	430b      	orrs	r3, r1
 8002dea:	6053      	str	r3, [r2, #4]
  }
}
 8002dec:	bd30      	pop	{r4, r5, pc}
 8002dee:	46c0      	nop			; (mov r8, r8)
 8002df0:	fffdffff 	.word	0xfffdffff
 8002df4:	fffeffff 	.word	0xfffeffff
 8002df8:	fffbffff 	.word	0xfffbffff
 8002dfc:	ffff7fff 	.word	0xffff7fff
 8002e00:	ffffefff 	.word	0xffffefff
 8002e04:	ffffdfff 	.word	0xffffdfff
 8002e08:	ffefffff 	.word	0xffefffff
 8002e0c:	ff9fffff 	.word	0xff9fffff
 8002e10:	fff7ffff 	.word	0xfff7ffff

08002e14 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e16:	0004      	movs	r4, r0
 8002e18:	000e      	movs	r6, r1
 8002e1a:	0015      	movs	r5, r2
 8002e1c:	001f      	movs	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e1e:	6822      	ldr	r2, [r4, #0]
 8002e20:	69d3      	ldr	r3, [r2, #28]
 8002e22:	4033      	ands	r3, r6
 8002e24:	1b9b      	subs	r3, r3, r6
 8002e26:	4259      	negs	r1, r3
 8002e28:	414b      	adcs	r3, r1
 8002e2a:	42ab      	cmp	r3, r5
 8002e2c:	d001      	beq.n	8002e32 <UART_WaitOnFlagUntilTimeout+0x1e>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002e2e:	2000      	movs	r0, #0
 8002e30:	e01e      	b.n	8002e70 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8002e32:	9b06      	ldr	r3, [sp, #24]
 8002e34:	3301      	adds	r3, #1
 8002e36:	d0f3      	beq.n	8002e20 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e38:	f7fd fc1a 	bl	8000670 <HAL_GetTick>
 8002e3c:	9b06      	ldr	r3, [sp, #24]
 8002e3e:	1bc0      	subs	r0, r0, r7
 8002e40:	4283      	cmp	r3, r0
 8002e42:	d301      	bcc.n	8002e48 <UART_WaitOnFlagUntilTimeout+0x34>
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d1ea      	bne.n	8002e1e <UART_WaitOnFlagUntilTimeout+0xa>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8002e48:	0022      	movs	r2, r4
 8002e4a:	ca08      	ldmia	r2!, {r3}
 8002e4c:	4809      	ldr	r0, [pc, #36]	; (8002e74 <UART_WaitOnFlagUntilTimeout+0x60>)
 8002e4e:	6819      	ldr	r1, [r3, #0]
 8002e50:	4001      	ands	r1, r0
 8002e52:	6019      	str	r1, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e54:	6899      	ldr	r1, [r3, #8]
 8002e56:	30a3      	adds	r0, #163	; 0xa3
 8002e58:	30ff      	adds	r0, #255	; 0xff
 8002e5a:	4381      	bics	r1, r0
 8002e5c:	6099      	str	r1, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8002e5e:	2320      	movs	r3, #32
 8002e60:	67d3      	str	r3, [r2, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8002e62:	0022      	movs	r2, r4
 8002e64:	3208      	adds	r2, #8
 8002e66:	67d3      	str	r3, [r2, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 8002e68:	2300      	movs	r3, #0
 8002e6a:	347c      	adds	r4, #124	; 0x7c
 8002e6c:	7023      	strb	r3, [r4, #0]
 8002e6e:	3002      	adds	r0, #2
}
 8002e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e72:	46c0      	nop			; (mov r8, r8)
 8002e74:	fffffe5f 	.word	0xfffffe5f

08002e78 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e78:	0003      	movs	r3, r0
{
 8002e7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e7c:	2600      	movs	r6, #0
{
 8002e7e:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e80:	3388      	adds	r3, #136	; 0x88
 8002e82:	601e      	str	r6, [r3, #0]
  tickstart = HAL_GetTick();
 8002e84:	f7fd fbf4 	bl	8000670 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e88:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8002e8a:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	071b      	lsls	r3, r3, #28
 8002e90:	d417      	bmi.n	8002ec2 <UART_CheckIdleState+0x4a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e92:	6823      	ldr	r3, [r4, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	075b      	lsls	r3, r3, #29
 8002e98:	d50a      	bpl.n	8002eb0 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e9a:	2180      	movs	r1, #128	; 0x80
 8002e9c:	4b0f      	ldr	r3, [pc, #60]	; (8002edc <UART_CheckIdleState+0x64>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	9300      	str	r3, [sp, #0]
 8002ea2:	03c9      	lsls	r1, r1, #15
 8002ea4:	002b      	movs	r3, r5
 8002ea6:	0020      	movs	r0, r4
 8002ea8:	f7ff ffb4 	bl	8002e14 <UART_WaitOnFlagUntilTimeout>
 8002eac:	2800      	cmp	r0, #0
 8002eae:	d113      	bne.n	8002ed8 <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 8002eb0:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002eb2:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002eb4:	1d22      	adds	r2, r4, #4
 8002eb6:	67d3      	str	r3, [r2, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 8002eb8:	347c      	adds	r4, #124	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002eba:	3204      	adds	r2, #4
 8002ebc:	67d3      	str	r3, [r2, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 8002ebe:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8002ec0:	e00b      	b.n	8002eda <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ec2:	2180      	movs	r1, #128	; 0x80
 8002ec4:	4b05      	ldr	r3, [pc, #20]	; (8002edc <UART_CheckIdleState+0x64>)
 8002ec6:	0032      	movs	r2, r6
 8002ec8:	9300      	str	r3, [sp, #0]
 8002eca:	0389      	lsls	r1, r1, #14
 8002ecc:	0003      	movs	r3, r0
 8002ece:	0020      	movs	r0, r4
 8002ed0:	f7ff ffa0 	bl	8002e14 <UART_WaitOnFlagUntilTimeout>
 8002ed4:	2800      	cmp	r0, #0
 8002ed6:	d0dc      	beq.n	8002e92 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8002ed8:	2003      	movs	r0, #3
}
 8002eda:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8002edc:	01ffffff 	.word	0x01ffffff

08002ee0 <HAL_UART_Init>:
{
 8002ee0:	b570      	push	{r4, r5, r6, lr}
 8002ee2:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8002ee4:	d101      	bne.n	8002eea <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8002ee6:	2001      	movs	r0, #1
}
 8002ee8:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8002eea:	1d05      	adds	r5, r0, #4
 8002eec:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d104      	bne.n	8002efc <HAL_UART_Init+0x1c>
    huart->Lock = HAL_UNLOCKED;
 8002ef2:	0002      	movs	r2, r0
 8002ef4:	327c      	adds	r2, #124	; 0x7c
 8002ef6:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8002ef8:	f001 fc44 	bl	8004784 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002efc:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002efe:	2101      	movs	r1, #1
 8002f00:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002f02:	67eb      	str	r3, [r5, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8002f04:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f06:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8002f08:	438b      	bics	r3, r1
 8002f0a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f0c:	f7ff fb00 	bl	8002510 <UART_SetConfig>
 8002f10:	2801      	cmp	r0, #1
 8002f12:	d0e8      	beq.n	8002ee6 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f14:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d002      	beq.n	8002f20 <HAL_UART_Init+0x40>
    UART_AdvFeatureConfig(huart);
 8002f1a:	0020      	movs	r0, r4
 8002f1c:	f7ff ff12 	bl	8002d44 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f20:	6823      	ldr	r3, [r4, #0]
 8002f22:	4908      	ldr	r1, [pc, #32]	; (8002f44 <HAL_UART_Init+0x64>)
 8002f24:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8002f26:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f28:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f2a:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f2c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	438a      	bics	r2, r1
 8002f32:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002f34:	2201      	movs	r2, #1
 8002f36:	6819      	ldr	r1, [r3, #0]
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8002f3c:	f7ff ff9c 	bl	8002e78 <UART_CheckIdleState>
 8002f40:	e7d2      	b.n	8002ee8 <HAL_UART_Init+0x8>
 8002f42:	46c0      	nop			; (mov r8, r8)
 8002f44:	ffffb7ff 	.word	0xffffb7ff

08002f48 <UARTEx_SetNbDataToProcess>:
{
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8002f48:	2301      	movs	r3, #1
{
 8002f4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f4c:	b087      	sub	sp, #28
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8002f4e:	aa02      	add	r2, sp, #8
 8002f50:	7013      	strb	r3, [r2, #0]
 8002f52:	7053      	strb	r3, [r2, #1]
 8002f54:	7093      	strb	r3, [r2, #2]
 8002f56:	2203      	movs	r2, #3
 8002f58:	a902      	add	r1, sp, #8
 8002f5a:	70ca      	strb	r2, [r1, #3]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8002f5c:	2502      	movs	r5, #2
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8002f5e:	2200      	movs	r2, #0
 8002f60:	2607      	movs	r6, #7
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8002f62:	ac04      	add	r4, sp, #16
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8002f64:	718a      	strb	r2, [r1, #6]
 8002f66:	71ca      	strb	r2, [r1, #7]
 8002f68:	710e      	strb	r6, [r1, #4]
 8002f6a:	714b      	strb	r3, [r1, #5]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8002f6c:	70a5      	strb	r5, [r4, #2]
 8002f6e:	2104      	movs	r1, #4
 8002f70:	0007      	movs	r7, r0
 8002f72:	0005      	movs	r5, r0
 8002f74:	3208      	adds	r2, #8
 8002f76:	7022      	strb	r2, [r4, #0]
 8002f78:	7122      	strb	r2, [r4, #4]

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002f7a:	6e42      	ldr	r2, [r0, #100]	; 0x64
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8002f7c:	7061      	strb	r1, [r4, #1]
 8002f7e:	70e1      	strb	r1, [r4, #3]
 8002f80:	7163      	strb	r3, [r4, #5]
 8002f82:	71a3      	strb	r3, [r4, #6]
 8002f84:	71e3      	strb	r3, [r4, #7]
 8002f86:	376a      	adds	r7, #106	; 0x6a
 8002f88:	3568      	adds	r5, #104	; 0x68
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002f8a:	2a00      	cmp	r2, #0
 8002f8c:	d103      	bne.n	8002f96 <UARTEx_SetNbDataToProcess+0x4e>
  {
    huart->NbTxDataToProcess = 1U;
 8002f8e:	803b      	strh	r3, [r7, #0]
    huart->NbRxDataToProcess = 1U;
 8002f90:	802b      	strh	r3, [r5, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002f92:	b007      	add	sp, #28
 8002f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002f96:	6803      	ldr	r3, [r0, #0]
 8002f98:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002f9a:	689b      	ldr	r3, [r3, #8]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002f9c:	9201      	str	r2, [sp, #4]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002f9e:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8002fa0:	aa02      	add	r2, sp, #8
 8002fa2:	5cd0      	ldrb	r0, [r2, r3]
 8002fa4:	5ce1      	ldrb	r1, [r4, r3]
 8002fa6:	00c0      	lsls	r0, r0, #3
 8002fa8:	f7fd f94c 	bl	8000244 <__divsi3>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002fac:	9b01      	ldr	r3, [sp, #4]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8002fae:	8038      	strh	r0, [r7, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002fb0:	0e5b      	lsrs	r3, r3, #25
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8002fb2:	401e      	ands	r6, r3
 8002fb4:	ab02      	add	r3, sp, #8
 8002fb6:	5d98      	ldrb	r0, [r3, r6]
 8002fb8:	5da1      	ldrb	r1, [r4, r6]
 8002fba:	00c0      	lsls	r0, r0, #3
 8002fbc:	f7fd f942 	bl	8000244 <__divsi3>
 8002fc0:	8028      	strh	r0, [r5, #0]
}
 8002fc2:	e7e6      	b.n	8002f92 <UARTEx_SetNbDataToProcess+0x4a>

08002fc4 <HAL_UARTEx_DisableFifoMode>:
{
 8002fc4:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8002fc6:	0004      	movs	r4, r0
 8002fc8:	347c      	adds	r4, #124	; 0x7c
 8002fca:	7822      	ldrb	r2, [r4, #0]
 8002fcc:	2302      	movs	r3, #2
 8002fce:	2a01      	cmp	r2, #1
 8002fd0:	d010      	beq.n	8002ff4 <HAL_UARTEx_DisableFifoMode+0x30>
  __HAL_UART_DISABLE(huart);
 8002fd2:	2601      	movs	r6, #1
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002fd4:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002fd6:	1d05      	adds	r5, r0, #4
 8002fd8:	3322      	adds	r3, #34	; 0x22
 8002fda:	67eb      	str	r3, [r5, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002fdc:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8002fde:	6813      	ldr	r3, [r2, #0]
 8002fe0:	43b3      	bics	r3, r6
 8002fe2:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002fe4:	4b04      	ldr	r3, [pc, #16]	; (8002ff8 <HAL_UARTEx_DisableFifoMode+0x34>)
 8002fe6:	4019      	ands	r1, r3
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002fec:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002fee:	2220      	movs	r2, #32
 8002ff0:	67ea      	str	r2, [r5, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 8002ff2:	7023      	strb	r3, [r4, #0]
}
 8002ff4:	0018      	movs	r0, r3
 8002ff6:	bd70      	pop	{r4, r5, r6, pc}
 8002ff8:	dfffffff 	.word	0xdfffffff

08002ffc <HAL_UARTEx_SetTxFifoThreshold>:
{
 8002ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 8002ffe:	0005      	movs	r5, r0
 8003000:	357c      	adds	r5, #124	; 0x7c
 8003002:	782b      	ldrb	r3, [r5, #0]
{
 8003004:	0004      	movs	r4, r0
  __HAL_LOCK(huart);
 8003006:	2002      	movs	r0, #2
 8003008:	2b01      	cmp	r3, #1
 800300a:	d017      	beq.n	800303c <HAL_UARTEx_SetTxFifoThreshold+0x40>
  huart->gState = HAL_UART_STATE_BUSY;
 800300c:	2324      	movs	r3, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800300e:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(huart);
 8003010:	3801      	subs	r0, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8003012:	1d26      	adds	r6, r4, #4
  __HAL_LOCK(huart);
 8003014:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003016:	67f3      	str	r3, [r6, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003018:	6817      	ldr	r7, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800301a:	6813      	ldr	r3, [r2, #0]
 800301c:	4383      	bics	r3, r0
 800301e:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003020:	6893      	ldr	r3, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8003022:	0020      	movs	r0, r4
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	08db      	lsrs	r3, r3, #3
 8003028:	4319      	orrs	r1, r3
 800302a:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800302c:	f7ff ff8c 	bl	8002f48 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003030:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(huart);
 8003032:	2000      	movs	r0, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003034:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003036:	2320      	movs	r3, #32
 8003038:	67f3      	str	r3, [r6, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 800303a:	7028      	strb	r0, [r5, #0]
}
 800303c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003040 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8003040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 8003042:	0005      	movs	r5, r0
 8003044:	357c      	adds	r5, #124	; 0x7c
 8003046:	782b      	ldrb	r3, [r5, #0]
{
 8003048:	0004      	movs	r4, r0
  __HAL_LOCK(huart);
 800304a:	2002      	movs	r0, #2
 800304c:	2b01      	cmp	r3, #1
 800304e:	d017      	beq.n	8003080 <HAL_UARTEx_SetRxFifoThreshold+0x40>
  huart->gState = HAL_UART_STATE_BUSY;
 8003050:	2324      	movs	r3, #36	; 0x24
  __HAL_LOCK(huart);
 8003052:	3801      	subs	r0, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8003054:	1d26      	adds	r6, r4, #4
  __HAL_LOCK(huart);
 8003056:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003058:	67f3      	str	r3, [r6, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800305a:	6823      	ldr	r3, [r4, #0]
 800305c:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	4382      	bics	r2, r0
 8003062:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003064:	689a      	ldr	r2, [r3, #8]
 8003066:	4807      	ldr	r0, [pc, #28]	; (8003084 <HAL_UARTEx_SetRxFifoThreshold+0x44>)
 8003068:	4002      	ands	r2, r0
 800306a:	4311      	orrs	r1, r2
 800306c:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 800306e:	0020      	movs	r0, r4
 8003070:	f7ff ff6a 	bl	8002f48 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003074:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(huart);
 8003076:	2000      	movs	r0, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003078:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800307a:	2320      	movs	r3, #32
 800307c:	67f3      	str	r3, [r6, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 800307e:	7028      	strb	r0, [r5, #0]
}
 8003080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003082:	46c0      	nop			; (mov r8, r8)
 8003084:	f1ffffff 	.word	0xf1ffffff

08003088 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003088:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 800308a:	f000 fd53 	bl	8003b34 <vTaskStartScheduler>
  
  return osOK;
}
 800308e:	2000      	movs	r0, #0
 8003090:	bd10      	pop	{r4, pc}

08003092 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003092:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8003094:	000b      	movs	r3, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003096:	6846      	ldr	r6, [r0, #4]
 8003098:	6801      	ldr	r1, [r0, #0]
 800309a:	8a02      	ldrh	r2, [r0, #16]
 800309c:	2508      	movs	r5, #8
 800309e:	5f45      	ldrsh	r5, [r0, r5]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80030a0:	2400      	movs	r4, #0
  if (priority != osPriorityError) {
 80030a2:	2d84      	cmp	r5, #132	; 0x84
 80030a4:	d000      	beq.n	80030a8 <osThreadCreate+0x16>
    fpriority += (priority - osPriorityIdle);
 80030a6:	1cec      	adds	r4, r5, #3
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80030a8:	a803      	add	r0, sp, #12
 80030aa:	9001      	str	r0, [sp, #4]
 80030ac:	9400      	str	r4, [sp, #0]
 80030ae:	0030      	movs	r0, r6
 80030b0:	f000 fc7c 	bl	80039ac <xTaskCreate>
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
                   &handle) != pdPASS)  {
    return NULL;
 80030b4:	2300      	movs	r3, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80030b6:	2801      	cmp	r0, #1
 80030b8:	d100      	bne.n	80030bc <osThreadCreate+0x2a>
  }     
#endif
  
  return handle;
 80030ba:	9b03      	ldr	r3, [sp, #12]
}
 80030bc:	0018      	movs	r0, r3
 80030be:	b004      	add	sp, #16
 80030c0:	bd70      	pop	{r4, r5, r6, pc}

080030c2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80030c2:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80030c4:	2800      	cmp	r0, #0
 80030c6:	d100      	bne.n	80030ca <osDelay+0x8>
 80030c8:	3001      	adds	r0, #1
 80030ca:	f000 fe51 	bl	8003d70 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80030ce:	2000      	movs	r0, #0
 80030d0:	bd10      	pop	{r4, pc}

080030d2 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030d2:	0003      	movs	r3, r0

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80030d4:	2201      	movs	r2, #1
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030d6:	3308      	adds	r3, #8
 80030d8:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030da:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030dc:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80030de:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80030e0:	4252      	negs	r2, r2
 80030e2:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80030e4:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80030e6:	4770      	bx	lr

080030e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80030e8:	2300      	movs	r3, #0
 80030ea:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80030ec:	4770      	bx	lr

080030ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80030ee:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80030f0:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 80030f2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80030f4:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80030f6:	689a      	ldr	r2, [r3, #8]
 80030f8:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80030fa:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80030fc:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80030fe:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8003100:	3301      	adds	r3, #1
 8003102:	6003      	str	r3, [r0, #0]
}
 8003104:	4770      	bx	lr

08003106 <vListInsert>:
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003106:	0003      	movs	r3, r0
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003108:	680a      	ldr	r2, [r1, #0]
{
 800310a:	b530      	push	{r4, r5, lr}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800310c:	3308      	adds	r3, #8
	if( xValueOfInsertion == portMAX_DELAY )
 800310e:	1c54      	adds	r4, r2, #1
 8003110:	d10b      	bne.n	800312a <vListInsert+0x24>
		pxIterator = pxList->xListEnd.pxPrevious;
 8003112:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003114:	685a      	ldr	r2, [r3, #4]
 8003116:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003118:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800311a:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800311c:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800311e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003120:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8003122:	3301      	adds	r3, #1
 8003124:	6003      	str	r3, [r0, #0]
}
 8003126:	bd30      	pop	{r4, r5, pc}
 8003128:	0023      	movs	r3, r4
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800312a:	685c      	ldr	r4, [r3, #4]
 800312c:	6825      	ldr	r5, [r4, #0]
 800312e:	42aa      	cmp	r2, r5
 8003130:	d2fa      	bcs.n	8003128 <vListInsert+0x22>
 8003132:	e7ef      	b.n	8003114 <vListInsert+0xe>

08003134 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003134:	6841      	ldr	r1, [r0, #4]
 8003136:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003138:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800313a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800313c:	6882      	ldr	r2, [r0, #8]
 800313e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003140:	6859      	ldr	r1, [r3, #4]
 8003142:	4288      	cmp	r0, r1
 8003144:	d100      	bne.n	8003148 <uxListRemove+0x14>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003146:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003148:	2200      	movs	r2, #0
 800314a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	3a01      	subs	r2, #1
 8003150:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003152:	6818      	ldr	r0, [r3, #0]
}
 8003154:	4770      	bx	lr
	...

08003158 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0UL;
 8003158:	2300      	movs	r3, #0
{
 800315a:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 800315c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800315e:	4b06      	ldr	r3, [pc, #24]	; (8003178 <prvTaskExitError+0x20>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	3301      	adds	r3, #1
 8003164:	d001      	beq.n	800316a <prvTaskExitError+0x12>
 8003166:	b672      	cpsid	i
 8003168:	e7fe      	b.n	8003168 <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();
 800316a:	b672      	cpsid	i
	while( ulDummy == 0 )
 800316c:	9b01      	ldr	r3, [sp, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d0fc      	beq.n	800316c <prvTaskExitError+0x14>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003172:	b002      	add	sp, #8
 8003174:	4770      	bx	lr
 8003176:	46c0      	nop			; (mov r8, r8)
 8003178:	20000008 	.word	0x20000008
 800317c:	00000000 	.word	0x00000000

08003180 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8003180:	4a0b      	ldr	r2, [pc, #44]	; (80031b0 <pxCurrentTCBConst2>)
 8003182:	6813      	ldr	r3, [r2, #0]
 8003184:	6818      	ldr	r0, [r3, #0]
 8003186:	3020      	adds	r0, #32
 8003188:	f380 8809 	msr	PSP, r0
 800318c:	2002      	movs	r0, #2
 800318e:	f380 8814 	msr	CONTROL, r0
 8003192:	f3bf 8f6f 	isb	sy
 8003196:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8003198:	46ae      	mov	lr, r5
 800319a:	bc08      	pop	{r3}
 800319c:	bc04      	pop	{r2}
 800319e:	b662      	cpsie	i
 80031a0:	4718      	bx	r3
 80031a2:	46c0      	nop			; (mov r8, r8)
 80031a4:	46c0      	nop			; (mov r8, r8)
 80031a6:	46c0      	nop			; (mov r8, r8)
 80031a8:	46c0      	nop			; (mov r8, r8)
 80031aa:	46c0      	nop			; (mov r8, r8)
 80031ac:	46c0      	nop			; (mov r8, r8)
 80031ae:	46c0      	nop			; (mov r8, r8)

080031b0 <pxCurrentTCBConst2>:
 80031b0:	20000c44 	.word	0x20000c44

080031b4 <pxPortInitialiseStack>:
{
 80031b4:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80031b6:	2480      	movs	r4, #128	; 0x80
 80031b8:	1f03      	subs	r3, r0, #4
 80031ba:	0464      	lsls	r4, r4, #17
 80031bc:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80031be:	3b04      	subs	r3, #4
 80031c0:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80031c2:	4903      	ldr	r1, [pc, #12]	; (80031d0 <pxPortInitialiseStack+0x1c>)
 80031c4:	3b04      	subs	r3, #4
 80031c6:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80031c8:	3b14      	subs	r3, #20
	pxTopOfStack -= 8; /* R11..R4. */
 80031ca:	3840      	subs	r0, #64	; 0x40
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80031cc:	601a      	str	r2, [r3, #0]
}
 80031ce:	bd10      	pop	{r4, pc}
 80031d0:	08003159 	.word	0x08003159

080031d4 <SVC_Handler>:
}
 80031d4:	4770      	bx	lr
	...

080031d8 <xPortStartScheduler>:
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80031d8:	22ff      	movs	r2, #255	; 0xff
 80031da:	4b12      	ldr	r3, [pc, #72]	; (8003224 <xPortStartScheduler+0x4c>)
 80031dc:	0412      	lsls	r2, r2, #16
 80031de:	6819      	ldr	r1, [r3, #0]
{
 80031e0:	b570      	push	{r4, r5, r6, lr}
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80031e2:	430a      	orrs	r2, r1
 80031e4:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80031e6:	22ff      	movs	r2, #255	; 0xff
 80031e8:	6819      	ldr	r1, [r3, #0]
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 80031ea:	2400      	movs	r4, #0
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80031ec:	0612      	lsls	r2, r2, #24
 80031ee:	430a      	orrs	r2, r1
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80031f0:	21fa      	movs	r1, #250	; 0xfa
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80031f2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL = 0UL;
 80031f4:	4d0c      	ldr	r5, [pc, #48]	; (8003228 <xPortStartScheduler+0x50>)
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 80031f6:	4b0d      	ldr	r3, [pc, #52]	; (800322c <xPortStartScheduler+0x54>)
	portNVIC_SYSTICK_CTRL = 0UL;
 80031f8:	602c      	str	r4, [r5, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 80031fa:	601c      	str	r4, [r3, #0]
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80031fc:	4b0c      	ldr	r3, [pc, #48]	; (8003230 <xPortStartScheduler+0x58>)
 80031fe:	0089      	lsls	r1, r1, #2
 8003200:	6818      	ldr	r0, [r3, #0]
 8003202:	f7fc ff95 	bl	8000130 <__udivsi3>
 8003206:	4b0b      	ldr	r3, [pc, #44]	; (8003234 <xPortStartScheduler+0x5c>)
 8003208:	3801      	subs	r0, #1
 800320a:	6018      	str	r0, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800320c:	2307      	movs	r3, #7
 800320e:	602b      	str	r3, [r5, #0]
	uxCriticalNesting = 0;
 8003210:	4b09      	ldr	r3, [pc, #36]	; (8003238 <xPortStartScheduler+0x60>)
 8003212:	601c      	str	r4, [r3, #0]
	vPortStartFirstTask();
 8003214:	f7ff ffb4 	bl	8003180 <vPortStartFirstTask>
	vTaskSwitchContext();
 8003218:	f000 fdc4 	bl	8003da4 <vTaskSwitchContext>
	prvTaskExitError();
 800321c:	f7ff ff9c 	bl	8003158 <prvTaskExitError>
}
 8003220:	0020      	movs	r0, r4
 8003222:	bd70      	pop	{r4, r5, r6, pc}
 8003224:	e000ed20 	.word	0xe000ed20
 8003228:	e000e010 	.word	0xe000e010
 800322c:	e000e018 	.word	0xe000e018
 8003230:	2000000c 	.word	0x2000000c
 8003234:	e000e014 	.word	0xe000e014
 8003238:	20000008 	.word	0x20000008

0800323c <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 800323c:	2280      	movs	r2, #128	; 0x80
 800323e:	4b04      	ldr	r3, [pc, #16]	; (8003250 <vPortYield+0x14>)
 8003240:	0552      	lsls	r2, r2, #21
 8003242:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8003244:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8003248:	f3bf 8f6f 	isb	sy
}
 800324c:	4770      	bx	lr
 800324e:	46c0      	nop			; (mov r8, r8)
 8003250:	e000ed04 	.word	0xe000ed04

08003254 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 8003254:	b672      	cpsid	i
    uxCriticalNesting++;
 8003256:	4a04      	ldr	r2, [pc, #16]	; (8003268 <vPortEnterCritical+0x14>)
 8003258:	6813      	ldr	r3, [r2, #0]
 800325a:	3301      	adds	r3, #1
 800325c:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" ::: "memory" );
 800325e:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8003262:	f3bf 8f6f 	isb	sy
}
 8003266:	4770      	bx	lr
 8003268:	20000008 	.word	0x20000008

0800326c <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800326c:	4a05      	ldr	r2, [pc, #20]	; (8003284 <vPortExitCritical+0x18>)
 800326e:	6813      	ldr	r3, [r2, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d101      	bne.n	8003278 <vPortExitCritical+0xc>
 8003274:	b672      	cpsid	i
 8003276:	e7fe      	b.n	8003276 <vPortExitCritical+0xa>
    uxCriticalNesting--;
 8003278:	3b01      	subs	r3, #1
 800327a:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 800327c:	2b00      	cmp	r3, #0
 800327e:	d100      	bne.n	8003282 <vPortExitCritical+0x16>
        portENABLE_INTERRUPTS();
 8003280:	b662      	cpsie	i
}
 8003282:	4770      	bx	lr
 8003284:	20000008 	.word	0x20000008

08003288 <ulSetInterruptMaskFromISR>:
	__asm volatile(
 8003288:	f3ef 8010 	mrs	r0, PRIMASK
 800328c:	b672      	cpsid	i
 800328e:	4770      	bx	lr

08003290 <vClearInterruptMaskFromISR>:
	__asm volatile(
 8003290:	f380 8810 	msr	PRIMASK, r0
 8003294:	4770      	bx	lr
	...

080032a0 <PendSV_Handler>:
	__asm volatile
 80032a0:	f3ef 8009 	mrs	r0, PSP
 80032a4:	4b0e      	ldr	r3, [pc, #56]	; (80032e0 <pxCurrentTCBConst>)
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	3820      	subs	r0, #32
 80032aa:	6010      	str	r0, [r2, #0]
 80032ac:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80032ae:	4644      	mov	r4, r8
 80032b0:	464d      	mov	r5, r9
 80032b2:	4656      	mov	r6, sl
 80032b4:	465f      	mov	r7, fp
 80032b6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80032b8:	b508      	push	{r3, lr}
 80032ba:	b672      	cpsid	i
 80032bc:	f000 fd72 	bl	8003da4 <vTaskSwitchContext>
 80032c0:	b662      	cpsie	i
 80032c2:	bc0c      	pop	{r2, r3}
 80032c4:	6811      	ldr	r1, [r2, #0]
 80032c6:	6808      	ldr	r0, [r1, #0]
 80032c8:	3010      	adds	r0, #16
 80032ca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80032cc:	46a0      	mov	r8, r4
 80032ce:	46a9      	mov	r9, r5
 80032d0:	46b2      	mov	sl, r6
 80032d2:	46bb      	mov	fp, r7
 80032d4:	f380 8809 	msr	PSP, r0
 80032d8:	3820      	subs	r0, #32
 80032da:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80032dc:	4718      	bx	r3
 80032de:	46c0      	nop			; (mov r8, r8)

080032e0 <pxCurrentTCBConst>:
 80032e0:	20000c44 	.word	0x20000c44

080032e4 <SysTick_Handler>:
{
 80032e4:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80032e6:	f7ff ffcf 	bl	8003288 <ulSetInterruptMaskFromISR>
 80032ea:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 80032ec:	f000 fc5a 	bl	8003ba4 <xTaskIncrementTick>
 80032f0:	2800      	cmp	r0, #0
 80032f2:	d003      	beq.n	80032fc <SysTick_Handler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80032f4:	2280      	movs	r2, #128	; 0x80
 80032f6:	4b03      	ldr	r3, [pc, #12]	; (8003304 <SysTick_Handler+0x20>)
 80032f8:	0552      	lsls	r2, r2, #21
 80032fa:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80032fc:	0020      	movs	r0, r4
 80032fe:	f7ff ffc7 	bl	8003290 <vClearInterruptMaskFromISR>
}
 8003302:	bd10      	pop	{r4, pc}
 8003304:	e000ed04 	.word	0xe000ed04

08003308 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003308:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800330a:	4b0f      	ldr	r3, [pc, #60]	; (8003348 <prvInsertBlockIntoFreeList+0x40>)
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	4282      	cmp	r2, r0
 8003310:	d318      	bcc.n	8003344 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003312:	685c      	ldr	r4, [r3, #4]
 8003314:	1919      	adds	r1, r3, r4
 8003316:	4288      	cmp	r0, r1
 8003318:	d103      	bne.n	8003322 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800331a:	6841      	ldr	r1, [r0, #4]
 800331c:	0018      	movs	r0, r3
 800331e:	1909      	adds	r1, r1, r4
 8003320:	6059      	str	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003322:	6841      	ldr	r1, [r0, #4]
 8003324:	1844      	adds	r4, r0, r1
 8003326:	42a2      	cmp	r2, r4
 8003328:	d107      	bne.n	800333a <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800332a:	4c08      	ldr	r4, [pc, #32]	; (800334c <prvInsertBlockIntoFreeList+0x44>)
 800332c:	6824      	ldr	r4, [r4, #0]
 800332e:	42a2      	cmp	r2, r4
 8003330:	d003      	beq.n	800333a <prvInsertBlockIntoFreeList+0x32>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003332:	6854      	ldr	r4, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003334:	6812      	ldr	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003336:	1861      	adds	r1, r4, r1
 8003338:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800333a:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800333c:	4298      	cmp	r0, r3
 800333e:	d000      	beq.n	8003342 <prvInsertBlockIntoFreeList+0x3a>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003340:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003342:	bd10      	pop	{r4, pc}
 8003344:	0013      	movs	r3, r2
 8003346:	e7e1      	b.n	800330c <prvInsertBlockIntoFreeList+0x4>
 8003348:	20000c3c 	.word	0x20000c3c
 800334c:	2000002c 	.word	0x2000002c

08003350 <pvPortMalloc>:
{
 8003350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003352:	0004      	movs	r4, r0
	vTaskSuspendAll();
 8003354:	f000 fc18 	bl	8003b88 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8003358:	4a38      	ldr	r2, [pc, #224]	; (800343c <pvPortMalloc+0xec>)
 800335a:	4839      	ldr	r0, [pc, #228]	; (8003440 <pvPortMalloc+0xf0>)
 800335c:	6813      	ldr	r3, [r2, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d11e      	bne.n	80033a0 <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 8003362:	4938      	ldr	r1, [pc, #224]	; (8003444 <pvPortMalloc+0xf4>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003364:	3307      	adds	r3, #7
 8003366:	4219      	tst	r1, r3
 8003368:	d036      	beq.n	80033d8 <pvPortMalloc+0x88>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800336a:	18cd      	adds	r5, r1, r3
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800336c:	439d      	bics	r5, r3
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800336e:	23c0      	movs	r3, #192	; 0xc0
 8003370:	011b      	lsls	r3, r3, #4
 8003372:	18c9      	adds	r1, r1, r3
 8003374:	1b4b      	subs	r3, r1, r5
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003376:	0029      	movs	r1, r5
	xStart.xBlockSize = ( size_t ) 0;
 8003378:	2500      	movs	r5, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800337a:	4e33      	ldr	r6, [pc, #204]	; (8003448 <pvPortMalloc+0xf8>)
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800337c:	18cb      	adds	r3, r1, r3
	xStart.xBlockSize = ( size_t ) 0;
 800337e:	6075      	str	r5, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003380:	6031      	str	r1, [r6, #0]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003382:	2607      	movs	r6, #7
	uxAddress -= xHeapStructSize;
 8003384:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003386:	43b3      	bics	r3, r6
	pxEnd->pxNextFreeBlock = NULL;
 8003388:	601d      	str	r5, [r3, #0]
	pxEnd->xBlockSize = 0;
 800338a:	605d      	str	r5, [r3, #4]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800338c:	1a5d      	subs	r5, r3, r1
	pxEnd = ( void * ) uxAddress;
 800338e:	6013      	str	r3, [r2, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003390:	c128      	stmia	r1!, {r3, r5}
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003392:	4b2e      	ldr	r3, [pc, #184]	; (800344c <pvPortMalloc+0xfc>)
 8003394:	601d      	str	r5, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003396:	4b2e      	ldr	r3, [pc, #184]	; (8003450 <pvPortMalloc+0x100>)
 8003398:	601d      	str	r5, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800339a:	2380      	movs	r3, #128	; 0x80
 800339c:	061b      	lsls	r3, r3, #24
 800339e:	6003      	str	r3, [r0, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80033a0:	6806      	ldr	r6, [r0, #0]
 80033a2:	4234      	tst	r4, r6
 80033a4:	d116      	bne.n	80033d4 <pvPortMalloc+0x84>
			if( xWantedSize > 0 )
 80033a6:	2c00      	cmp	r4, #0
 80033a8:	d014      	beq.n	80033d4 <pvPortMalloc+0x84>
				xWantedSize += xHeapStructSize;
 80033aa:	0023      	movs	r3, r4
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80033ac:	2107      	movs	r1, #7
				xWantedSize += xHeapStructSize;
 80033ae:	3308      	adds	r3, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80033b0:	420b      	tst	r3, r1
 80033b2:	d001      	beq.n	80033b8 <pvPortMalloc+0x68>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80033b4:	438b      	bics	r3, r1
 80033b6:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00b      	beq.n	80033d4 <pvPortMalloc+0x84>
 80033bc:	4924      	ldr	r1, [pc, #144]	; (8003450 <pvPortMalloc+0x100>)
 80033be:	680d      	ldr	r5, [r1, #0]
 80033c0:	42ab      	cmp	r3, r5
 80033c2:	d807      	bhi.n	80033d4 <pvPortMalloc+0x84>
				pxBlock = xStart.pxNextFreeBlock;
 80033c4:	4920      	ldr	r1, [pc, #128]	; (8003448 <pvPortMalloc+0xf8>)
 80033c6:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80033c8:	6860      	ldr	r0, [r4, #4]
 80033ca:	4283      	cmp	r3, r0
 80033cc:	d807      	bhi.n	80033de <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 80033ce:	6812      	ldr	r2, [r2, #0]
 80033d0:	4294      	cmp	r4, r2
 80033d2:	d10b      	bne.n	80033ec <pvPortMalloc+0x9c>
void *pvReturn = NULL;
 80033d4:	2500      	movs	r5, #0
 80033d6:	e028      	b.n	800342a <pvPortMalloc+0xda>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80033d8:	23c0      	movs	r3, #192	; 0xc0
 80033da:	011b      	lsls	r3, r3, #4
 80033dc:	e7cc      	b.n	8003378 <pvPortMalloc+0x28>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80033de:	6827      	ldr	r7, [r4, #0]
 80033e0:	46bc      	mov	ip, r7
 80033e2:	2f00      	cmp	r7, #0
 80033e4:	d0f3      	beq.n	80033ce <pvPortMalloc+0x7e>
 80033e6:	0021      	movs	r1, r4
 80033e8:	4664      	mov	r4, ip
 80033ea:	e7ed      	b.n	80033c8 <pvPortMalloc+0x78>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80033ec:	680a      	ldr	r2, [r1, #0]
 80033ee:	0017      	movs	r7, r2
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80033f0:	6822      	ldr	r2, [r4, #0]
 80033f2:	600a      	str	r2, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80033f4:	1ac2      	subs	r2, r0, r3
 80033f6:	2a10      	cmp	r2, #16
 80033f8:	d908      	bls.n	800340c <pvPortMalloc+0xbc>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80033fa:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80033fc:	0741      	lsls	r1, r0, #29
 80033fe:	d001      	beq.n	8003404 <pvPortMalloc+0xb4>
 8003400:	b672      	cpsid	i
 8003402:	e7fe      	b.n	8003402 <pvPortMalloc+0xb2>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003404:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003406:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003408:	f7ff ff7e 	bl	8003308 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800340c:	6863      	ldr	r3, [r4, #4]
 800340e:	4a10      	ldr	r2, [pc, #64]	; (8003450 <pvPortMalloc+0x100>)
 8003410:	1aed      	subs	r5, r5, r3
 8003412:	6015      	str	r5, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003414:	4a0d      	ldr	r2, [pc, #52]	; (800344c <pvPortMalloc+0xfc>)
 8003416:	6811      	ldr	r1, [r2, #0]
 8003418:	428d      	cmp	r5, r1
 800341a:	d200      	bcs.n	800341e <pvPortMalloc+0xce>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800341c:	6015      	str	r5, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800341e:	431e      	orrs	r6, r3
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003420:	003d      	movs	r5, r7
					pxBlock->pxNextFreeBlock = NULL;
 8003422:	2300      	movs	r3, #0
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003424:	3508      	adds	r5, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003426:	6066      	str	r6, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003428:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 800342a:	f000 fc39 	bl	8003ca0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800342e:	076b      	lsls	r3, r5, #29
 8003430:	d001      	beq.n	8003436 <pvPortMalloc+0xe6>
 8003432:	b672      	cpsid	i
 8003434:	e7fe      	b.n	8003434 <pvPortMalloc+0xe4>
}
 8003436:	0028      	movs	r0, r5
 8003438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800343a:	46c0      	nop			; (mov r8, r8)
 800343c:	2000002c 	.word	0x2000002c
 8003440:	20000c30 	.word	0x20000c30
 8003444:	20000030 	.word	0x20000030
 8003448:	20000c3c 	.word	0x20000c3c
 800344c:	20000c38 	.word	0x20000c38
 8003450:	20000c34 	.word	0x20000c34

08003454 <vPortFree>:
{
 8003454:	b510      	push	{r4, lr}
	if( pv != NULL )
 8003456:	2800      	cmp	r0, #0
 8003458:	d01b      	beq.n	8003492 <vPortFree+0x3e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800345a:	4a0e      	ldr	r2, [pc, #56]	; (8003494 <vPortFree+0x40>)
 800345c:	3808      	subs	r0, #8
 800345e:	6843      	ldr	r3, [r0, #4]
 8003460:	6812      	ldr	r2, [r2, #0]
 8003462:	0004      	movs	r4, r0
 8003464:	421a      	tst	r2, r3
 8003466:	d101      	bne.n	800346c <vPortFree+0x18>
 8003468:	b672      	cpsid	i
 800346a:	e7fe      	b.n	800346a <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800346c:	6801      	ldr	r1, [r0, #0]
 800346e:	2900      	cmp	r1, #0
 8003470:	d001      	beq.n	8003476 <vPortFree+0x22>
 8003472:	b672      	cpsid	i
 8003474:	e7fe      	b.n	8003474 <vPortFree+0x20>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003476:	4393      	bics	r3, r2
 8003478:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 800347a:	f000 fb85 	bl	8003b88 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800347e:	4a06      	ldr	r2, [pc, #24]	; (8003498 <vPortFree+0x44>)
 8003480:	6863      	ldr	r3, [r4, #4]
 8003482:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003484:	0020      	movs	r0, r4
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003486:	185b      	adds	r3, r3, r1
 8003488:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800348a:	f7ff ff3d 	bl	8003308 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800348e:	f000 fc07 	bl	8003ca0 <xTaskResumeAll>
}
 8003492:	bd10      	pop	{r4, pc}
 8003494:	20000c30 	.word	0x20000c30
 8003498:	20000c34 	.word	0x20000c34

0800349c <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800349c:	b510      	push	{r4, lr}
 800349e:	0004      	movs	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80034a0:	f7ff fed8 	bl	8003254 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80034a4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80034a6:	f7ff fee1 	bl	800326c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80034aa:	4260      	negs	r0, r4
 80034ac:	4160      	adcs	r0, r4

	return xReturn;
}
 80034ae:	bd10      	pop	{r4, pc}

080034b0 <prvCopyDataToQueue>:
{
 80034b0:	b570      	push	{r4, r5, r6, lr}
 80034b2:	0016      	movs	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80034b4:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 80034b6:	0004      	movs	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80034b8:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80034ba:	2a00      	cmp	r2, #0
 80034bc:	d10a      	bne.n	80034d4 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80034be:	6806      	ldr	r6, [r0, #0]
BaseType_t xReturn = pdFALSE;
 80034c0:	0010      	movs	r0, r2
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80034c2:	2e00      	cmp	r6, #0
 80034c4:	d103      	bne.n	80034ce <prvCopyDataToQueue+0x1e>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80034c6:	6860      	ldr	r0, [r4, #4]
 80034c8:	f000 fd82 	bl	8003fd0 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 80034cc:	6066      	str	r6, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80034ce:	3501      	adds	r5, #1
 80034d0:	63a5      	str	r5, [r4, #56]	; 0x38
}
 80034d2:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80034d4:	2e00      	cmp	r6, #0
 80034d6:	d10d      	bne.n	80034f4 <prvCopyDataToQueue+0x44>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80034d8:	6880      	ldr	r0, [r0, #8]
 80034da:	f001 fa3b 	bl	8004954 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80034de:	68a3      	ldr	r3, [r4, #8]
 80034e0:	6c22      	ldr	r2, [r4, #64]	; 0x40
BaseType_t xReturn = pdFALSE;
 80034e2:	0030      	movs	r0, r6
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80034e4:	189b      	adds	r3, r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80034e6:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80034e8:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d3ef      	bcc.n	80034ce <prvCopyDataToQueue+0x1e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80034ee:	6823      	ldr	r3, [r4, #0]
 80034f0:	60a3      	str	r3, [r4, #8]
 80034f2:	e7ec      	b.n	80034ce <prvCopyDataToQueue+0x1e>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034f4:	68c0      	ldr	r0, [r0, #12]
 80034f6:	f001 fa2d 	bl	8004954 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80034fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80034fc:	68e2      	ldr	r2, [r4, #12]
 80034fe:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003500:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003502:	18d2      	adds	r2, r2, r3
 8003504:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003506:	428a      	cmp	r2, r1
 8003508:	d202      	bcs.n	8003510 <prvCopyDataToQueue+0x60>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800350a:	6862      	ldr	r2, [r4, #4]
 800350c:	18d3      	adds	r3, r2, r3
 800350e:	60e3      	str	r3, [r4, #12]
BaseType_t xReturn = pdFALSE;
 8003510:	2000      	movs	r0, #0
		if( xPosition == queueOVERWRITE )
 8003512:	2e02      	cmp	r6, #2
 8003514:	d1db      	bne.n	80034ce <prvCopyDataToQueue+0x1e>
				--uxMessagesWaiting;
 8003516:	002b      	movs	r3, r5
 8003518:	1e5a      	subs	r2, r3, #1
 800351a:	4193      	sbcs	r3, r2
 800351c:	1aed      	subs	r5, r5, r3
 800351e:	e7d6      	b.n	80034ce <prvCopyDataToQueue+0x1e>

08003520 <prvUnlockQueue>:
{
 8003520:	b570      	push	{r4, r5, r6, lr}
 8003522:	0005      	movs	r5, r0
		int8_t cTxLock = pxQueue->cTxLock;
 8003524:	002e      	movs	r6, r5
 8003526:	3645      	adds	r6, #69	; 0x45
	taskENTER_CRITICAL();
 8003528:	f7ff fe94 	bl	8003254 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800352c:	7834      	ldrb	r4, [r6, #0]
 800352e:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003530:	2c00      	cmp	r4, #0
 8003532:	dc10      	bgt.n	8003556 <prvUnlockQueue+0x36>
		pxQueue->cTxLock = queueUNLOCKED;
 8003534:	23ff      	movs	r3, #255	; 0xff
 8003536:	7033      	strb	r3, [r6, #0]
		int8_t cRxLock = pxQueue->cRxLock;
 8003538:	002e      	movs	r6, r5
 800353a:	3644      	adds	r6, #68	; 0x44
	taskEXIT_CRITICAL();
 800353c:	f7ff fe96 	bl	800326c <vPortExitCritical>
	taskENTER_CRITICAL();
 8003540:	f7ff fe88 	bl	8003254 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8003544:	7834      	ldrb	r4, [r6, #0]
 8003546:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003548:	2c00      	cmp	r4, #0
 800354a:	dc11      	bgt.n	8003570 <prvUnlockQueue+0x50>
		pxQueue->cRxLock = queueUNLOCKED;
 800354c:	23ff      	movs	r3, #255	; 0xff
 800354e:	7033      	strb	r3, [r6, #0]
	taskEXIT_CRITICAL();
 8003550:	f7ff fe8c 	bl	800326c <vPortExitCritical>
}
 8003554:	bd70      	pop	{r4, r5, r6, pc}
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003556:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003558:	2b00      	cmp	r3, #0
 800355a:	d0eb      	beq.n	8003534 <prvUnlockQueue+0x14>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800355c:	0028      	movs	r0, r5
 800355e:	3024      	adds	r0, #36	; 0x24
 8003560:	f000 fc68 	bl	8003e34 <xTaskRemoveFromEventList>
 8003564:	2800      	cmp	r0, #0
 8003566:	d001      	beq.n	800356c <prvUnlockQueue+0x4c>
						vTaskMissedYield();
 8003568:	f000 fcde 	bl	8003f28 <vTaskMissedYield>
 800356c:	3c01      	subs	r4, #1
 800356e:	e7de      	b.n	800352e <prvUnlockQueue+0xe>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003570:	692b      	ldr	r3, [r5, #16]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d0ea      	beq.n	800354c <prvUnlockQueue+0x2c>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003576:	0028      	movs	r0, r5
 8003578:	3010      	adds	r0, #16
 800357a:	f000 fc5b 	bl	8003e34 <xTaskRemoveFromEventList>
 800357e:	2800      	cmp	r0, #0
 8003580:	d001      	beq.n	8003586 <prvUnlockQueue+0x66>
					vTaskMissedYield();
 8003582:	f000 fcd1 	bl	8003f28 <vTaskMissedYield>
 8003586:	3c01      	subs	r4, #1
 8003588:	e7dd      	b.n	8003546 <prvUnlockQueue+0x26>

0800358a <xQueueGenericReset>:
{
 800358a:	b570      	push	{r4, r5, r6, lr}
 800358c:	0004      	movs	r4, r0
 800358e:	000d      	movs	r5, r1
	configASSERT( pxQueue );
 8003590:	2800      	cmp	r0, #0
 8003592:	d101      	bne.n	8003598 <xQueueGenericReset+0xe>
 8003594:	b672      	cpsid	i
 8003596:	e7fe      	b.n	8003596 <xQueueGenericReset+0xc>
	taskENTER_CRITICAL();
 8003598:	f7ff fe5c 	bl	8003254 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800359c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800359e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80035a0:	6822      	ldr	r2, [r4, #0]
 80035a2:	434b      	muls	r3, r1
 80035a4:	18d0      	adds	r0, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80035a6:	1a5b      	subs	r3, r3, r1
 80035a8:	18d3      	adds	r3, r2, r3
 80035aa:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80035ac:	0023      	movs	r3, r4
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80035ae:	6060      	str	r0, [r4, #4]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80035b0:	60a2      	str	r2, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80035b2:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 80035b4:	22ff      	movs	r2, #255	; 0xff
 80035b6:	3344      	adds	r3, #68	; 0x44
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80035b8:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 80035ba:	701a      	strb	r2, [r3, #0]
		pxQueue->cTxLock = queueUNLOCKED;
 80035bc:	705a      	strb	r2, [r3, #1]
		if( xNewQueue == pdFALSE )
 80035be:	4285      	cmp	r5, r0
 80035c0:	d10e      	bne.n	80035e0 <xQueueGenericReset+0x56>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035c2:	6923      	ldr	r3, [r4, #16]
 80035c4:	4283      	cmp	r3, r0
 80035c6:	d007      	beq.n	80035d8 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035c8:	0020      	movs	r0, r4
 80035ca:	3010      	adds	r0, #16
 80035cc:	f000 fc32 	bl	8003e34 <xTaskRemoveFromEventList>
 80035d0:	2800      	cmp	r0, #0
 80035d2:	d001      	beq.n	80035d8 <xQueueGenericReset+0x4e>
					queueYIELD_IF_USING_PREEMPTION();
 80035d4:	f7ff fe32 	bl	800323c <vPortYield>
	taskEXIT_CRITICAL();
 80035d8:	f7ff fe48 	bl	800326c <vPortExitCritical>
}
 80035dc:	2001      	movs	r0, #1
 80035de:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80035e0:	0020      	movs	r0, r4
 80035e2:	3010      	adds	r0, #16
 80035e4:	f7ff fd75 	bl	80030d2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80035e8:	0020      	movs	r0, r4
 80035ea:	3024      	adds	r0, #36	; 0x24
 80035ec:	f7ff fd71 	bl	80030d2 <vListInitialise>
 80035f0:	e7f2      	b.n	80035d8 <xQueueGenericReset+0x4e>

080035f2 <xQueueGenericCreate>:
	{
 80035f2:	b570      	push	{r4, r5, r6, lr}
 80035f4:	0006      	movs	r6, r0
 80035f6:	000d      	movs	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80035f8:	2800      	cmp	r0, #0
 80035fa:	d101      	bne.n	8003600 <xQueueGenericCreate+0xe>
 80035fc:	b672      	cpsid	i
 80035fe:	e7fe      	b.n	80035fe <xQueueGenericCreate+0xc>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003600:	0008      	movs	r0, r1
 8003602:	4370      	muls	r0, r6
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003604:	3048      	adds	r0, #72	; 0x48
 8003606:	f7ff fea3 	bl	8003350 <pvPortMalloc>
 800360a:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
 800360c:	d008      	beq.n	8003620 <xQueueGenericCreate+0x2e>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800360e:	2d00      	cmp	r5, #0
 8003610:	d108      	bne.n	8003624 <xQueueGenericCreate+0x32>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003612:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8003614:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003616:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003618:	2101      	movs	r1, #1
 800361a:	0020      	movs	r0, r4
 800361c:	f7ff ffb5 	bl	800358a <xQueueGenericReset>
	}
 8003620:	0020      	movs	r0, r4
 8003622:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003624:	0003      	movs	r3, r0
 8003626:	3348      	adds	r3, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003628:	6003      	str	r3, [r0, #0]
 800362a:	e7f3      	b.n	8003614 <xQueueGenericCreate+0x22>

0800362c <xQueueGenericSend>:
{
 800362c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800362e:	b085      	sub	sp, #20
 8003630:	0004      	movs	r4, r0
 8003632:	9100      	str	r1, [sp, #0]
 8003634:	9201      	str	r2, [sp, #4]
 8003636:	001d      	movs	r5, r3
	configASSERT( pxQueue );
 8003638:	2800      	cmp	r0, #0
 800363a:	d101      	bne.n	8003640 <xQueueGenericSend+0x14>
 800363c:	b672      	cpsid	i
 800363e:	e7fe      	b.n	800363e <xQueueGenericSend+0x12>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003640:	9b00      	ldr	r3, [sp, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d000      	beq.n	8003648 <xQueueGenericSend+0x1c>
 8003646:	e06f      	b.n	8003728 <xQueueGenericSend+0xfc>
 8003648:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800364a:	2b00      	cmp	r3, #0
 800364c:	d100      	bne.n	8003650 <xQueueGenericSend+0x24>
 800364e:	e06b      	b.n	8003728 <xQueueGenericSend+0xfc>
 8003650:	b672      	cpsid	i
 8003652:	e7fe      	b.n	8003652 <xQueueGenericSend+0x26>
				if( xTicksToWait == ( TickType_t ) 0 )
 8003654:	9e01      	ldr	r6, [sp, #4]
 8003656:	2e00      	cmp	r6, #0
 8003658:	d103      	bne.n	8003662 <xQueueGenericSend+0x36>
					taskEXIT_CRITICAL();
 800365a:	f7ff fe07 	bl	800326c <vPortExitCritical>
			return errQUEUE_FULL;
 800365e:	2000      	movs	r0, #0
 8003660:	e054      	b.n	800370c <xQueueGenericSend+0xe0>
				else if( xEntryTimeSet == pdFALSE )
 8003662:	2f00      	cmp	r7, #0
 8003664:	d102      	bne.n	800366c <xQueueGenericSend+0x40>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003666:	a802      	add	r0, sp, #8
 8003668:	f000 fc20 	bl	8003eac <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800366c:	f7ff fdfe 	bl	800326c <vPortExitCritical>
		vTaskSuspendAll();
 8003670:	f000 fa8a 	bl	8003b88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003674:	f7ff fdee 	bl	8003254 <vPortEnterCritical>
 8003678:	0022      	movs	r2, r4
 800367a:	3244      	adds	r2, #68	; 0x44
 800367c:	7813      	ldrb	r3, [r2, #0]
 800367e:	b25b      	sxtb	r3, r3
 8003680:	3301      	adds	r3, #1
 8003682:	d101      	bne.n	8003688 <xQueueGenericSend+0x5c>
 8003684:	2300      	movs	r3, #0
 8003686:	7013      	strb	r3, [r2, #0]
 8003688:	0022      	movs	r2, r4
 800368a:	3245      	adds	r2, #69	; 0x45
 800368c:	7813      	ldrb	r3, [r2, #0]
 800368e:	b25b      	sxtb	r3, r3
 8003690:	3301      	adds	r3, #1
 8003692:	d101      	bne.n	8003698 <xQueueGenericSend+0x6c>
 8003694:	2300      	movs	r3, #0
 8003696:	7013      	strb	r3, [r2, #0]
 8003698:	f7ff fde8 	bl	800326c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800369c:	a901      	add	r1, sp, #4
 800369e:	a802      	add	r0, sp, #8
 80036a0:	f000 fc10 	bl	8003ec4 <xTaskCheckForTimeOut>
 80036a4:	2800      	cmp	r0, #0
 80036a6:	d139      	bne.n	800371c <xQueueGenericSend+0xf0>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80036a8:	f7ff fdd4 	bl	8003254 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80036ac:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 80036ae:	6be6      	ldr	r6, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80036b0:	f7ff fddc 	bl	800326c <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80036b4:	42b7      	cmp	r7, r6
 80036b6:	d12b      	bne.n	8003710 <xQueueGenericSend+0xe4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80036b8:	0020      	movs	r0, r4
 80036ba:	9901      	ldr	r1, [sp, #4]
 80036bc:	3010      	adds	r0, #16
 80036be:	f000 fba7 	bl	8003e10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80036c2:	0020      	movs	r0, r4
 80036c4:	f7ff ff2c 	bl	8003520 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80036c8:	f000 faea 	bl	8003ca0 <xTaskResumeAll>
 80036cc:	2800      	cmp	r0, #0
 80036ce:	d101      	bne.n	80036d4 <xQueueGenericSend+0xa8>
					portYIELD_WITHIN_API();
 80036d0:	f7ff fdb4 	bl	800323c <vPortYield>
 80036d4:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
 80036d6:	f7ff fdbd 	bl	8003254 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80036da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80036dc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80036de:	4293      	cmp	r3, r2
 80036e0:	d301      	bcc.n	80036e6 <xQueueGenericSend+0xba>
 80036e2:	2d02      	cmp	r5, #2
 80036e4:	d1b6      	bne.n	8003654 <xQueueGenericSend+0x28>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80036e6:	002a      	movs	r2, r5
 80036e8:	9900      	ldr	r1, [sp, #0]
 80036ea:	0020      	movs	r0, r4
 80036ec:	f7ff fee0 	bl	80034b0 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d003      	beq.n	80036fe <xQueueGenericSend+0xd2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036f6:	0020      	movs	r0, r4
 80036f8:	3024      	adds	r0, #36	; 0x24
 80036fa:	f000 fb9b 	bl	8003e34 <xTaskRemoveFromEventList>
 80036fe:	2800      	cmp	r0, #0
 8003700:	d001      	beq.n	8003706 <xQueueGenericSend+0xda>
							queueYIELD_IF_USING_PREEMPTION();
 8003702:	f7ff fd9b 	bl	800323c <vPortYield>
				taskEXIT_CRITICAL();
 8003706:	f7ff fdb1 	bl	800326c <vPortExitCritical>
				return pdPASS;
 800370a:	2001      	movs	r0, #1
}
 800370c:	b005      	add	sp, #20
 800370e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
 8003710:	0020      	movs	r0, r4
 8003712:	f7ff ff05 	bl	8003520 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003716:	f000 fac3 	bl	8003ca0 <xTaskResumeAll>
 800371a:	e7db      	b.n	80036d4 <xQueueGenericSend+0xa8>
			prvUnlockQueue( pxQueue );
 800371c:	0020      	movs	r0, r4
 800371e:	f7ff feff 	bl	8003520 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003722:	f000 fabd 	bl	8003ca0 <xTaskResumeAll>
 8003726:	e79a      	b.n	800365e <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003728:	2d02      	cmp	r5, #2
 800372a:	d102      	bne.n	8003732 <xQueueGenericSend+0x106>
 800372c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800372e:	2b01      	cmp	r3, #1
 8003730:	d109      	bne.n	8003746 <xQueueGenericSend+0x11a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003732:	f000 fbff 	bl	8003f34 <xTaskGetSchedulerState>
 8003736:	2700      	movs	r7, #0
 8003738:	2800      	cmp	r0, #0
 800373a:	d1cc      	bne.n	80036d6 <xQueueGenericSend+0xaa>
 800373c:	9f01      	ldr	r7, [sp, #4]
 800373e:	2f00      	cmp	r7, #0
 8003740:	d0c9      	beq.n	80036d6 <xQueueGenericSend+0xaa>
 8003742:	b672      	cpsid	i
 8003744:	e7fe      	b.n	8003744 <xQueueGenericSend+0x118>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003746:	b672      	cpsid	i
 8003748:	e7fe      	b.n	8003748 <xQueueGenericSend+0x11c>

0800374a <xQueueCreateMutex>:
	{
 800374a:	b510      	push	{r4, lr}
 800374c:	0002      	movs	r2, r0
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800374e:	2100      	movs	r1, #0
 8003750:	2001      	movs	r0, #1
 8003752:	f7ff ff4e 	bl	80035f2 <xQueueGenericCreate>
 8003756:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
 8003758:	d007      	beq.n	800376a <xQueueCreateMutex+0x20>
			pxNewQueue->pxMutexHolder = NULL;
 800375a:	2100      	movs	r1, #0
 800375c:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800375e:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8003760:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003762:	000b      	movs	r3, r1
 8003764:	000a      	movs	r2, r1
 8003766:	f7ff ff61 	bl	800362c <xQueueGenericSend>
	}
 800376a:	0020      	movs	r0, r4
 800376c:	bd10      	pop	{r4, pc}

0800376e <xQueueSemaphoreTake>:
{
 800376e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003770:	b085      	sub	sp, #20
 8003772:	1e04      	subs	r4, r0, #0
 8003774:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8003776:	d101      	bne.n	800377c <xQueueSemaphoreTake+0xe>
 8003778:	b672      	cpsid	i
 800377a:	e7fe      	b.n	800377a <xQueueSemaphoreTake+0xc>
	configASSERT( pxQueue->uxItemSize == 0 );
 800377c:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800377e:	2d00      	cmp	r5, #0
 8003780:	d001      	beq.n	8003786 <xQueueSemaphoreTake+0x18>
 8003782:	b672      	cpsid	i
 8003784:	e7fe      	b.n	8003784 <xQueueSemaphoreTake+0x16>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003786:	f000 fbd5 	bl	8003f34 <xTaskGetSchedulerState>
 800378a:	2800      	cmp	r0, #0
 800378c:	d103      	bne.n	8003796 <xQueueSemaphoreTake+0x28>
 800378e:	9d01      	ldr	r5, [sp, #4]
 8003790:	2d00      	cmp	r5, #0
 8003792:	d000      	beq.n	8003796 <xQueueSemaphoreTake+0x28>
 8003794:	e08f      	b.n	80038b6 <xQueueSemaphoreTake+0x148>
 8003796:	002e      	movs	r6, r5
 8003798:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
 800379a:	f7ff fd5b 	bl	8003254 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800379e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d018      	beq.n	80037d6 <xQueueSemaphoreTake+0x68>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80037a4:	3b01      	subs	r3, #1
 80037a6:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80037a8:	6823      	ldr	r3, [r4, #0]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d102      	bne.n	80037b4 <xQueueSemaphoreTake+0x46>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80037ae:	f000 fc81 	bl	80040b4 <pvTaskIncrementMutexHeldCount>
 80037b2:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037b4:	6923      	ldr	r3, [r4, #16]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d007      	beq.n	80037ca <xQueueSemaphoreTake+0x5c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037ba:	0020      	movs	r0, r4
 80037bc:	3010      	adds	r0, #16
 80037be:	f000 fb39 	bl	8003e34 <xTaskRemoveFromEventList>
 80037c2:	2800      	cmp	r0, #0
 80037c4:	d001      	beq.n	80037ca <xQueueSemaphoreTake+0x5c>
						queueYIELD_IF_USING_PREEMPTION();
 80037c6:	f7ff fd39 	bl	800323c <vPortYield>
				taskEXIT_CRITICAL();
 80037ca:	f7ff fd4f 	bl	800326c <vPortExitCritical>
				return pdPASS;
 80037ce:	2501      	movs	r5, #1
}
 80037d0:	0028      	movs	r0, r5
 80037d2:	b005      	add	sp, #20
 80037d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if( xTicksToWait == ( TickType_t ) 0 )
 80037d6:	9b01      	ldr	r3, [sp, #4]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d106      	bne.n	80037ea <xQueueSemaphoreTake+0x7c>
						configASSERT( xInheritanceOccurred == pdFALSE );
 80037dc:	2d00      	cmp	r5, #0
 80037de:	d001      	beq.n	80037e4 <xQueueSemaphoreTake+0x76>
 80037e0:	b672      	cpsid	i
 80037e2:	e7fe      	b.n	80037e2 <xQueueSemaphoreTake+0x74>
					taskEXIT_CRITICAL();
 80037e4:	f7ff fd42 	bl	800326c <vPortExitCritical>
					return errQUEUE_EMPTY;
 80037e8:	e7f2      	b.n	80037d0 <xQueueSemaphoreTake+0x62>
				else if( xEntryTimeSet == pdFALSE )
 80037ea:	2e00      	cmp	r6, #0
 80037ec:	d102      	bne.n	80037f4 <xQueueSemaphoreTake+0x86>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80037ee:	a802      	add	r0, sp, #8
 80037f0:	f000 fb5c 	bl	8003eac <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80037f4:	f7ff fd3a 	bl	800326c <vPortExitCritical>
		vTaskSuspendAll();
 80037f8:	f000 f9c6 	bl	8003b88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80037fc:	f7ff fd2a 	bl	8003254 <vPortEnterCritical>
 8003800:	0022      	movs	r2, r4
 8003802:	3244      	adds	r2, #68	; 0x44
 8003804:	7813      	ldrb	r3, [r2, #0]
 8003806:	b25b      	sxtb	r3, r3
 8003808:	3301      	adds	r3, #1
 800380a:	d101      	bne.n	8003810 <xQueueSemaphoreTake+0xa2>
 800380c:	2300      	movs	r3, #0
 800380e:	7013      	strb	r3, [r2, #0]
 8003810:	0022      	movs	r2, r4
 8003812:	3245      	adds	r2, #69	; 0x45
 8003814:	7813      	ldrb	r3, [r2, #0]
 8003816:	b25b      	sxtb	r3, r3
 8003818:	3301      	adds	r3, #1
 800381a:	d101      	bne.n	8003820 <xQueueSemaphoreTake+0xb2>
 800381c:	2300      	movs	r3, #0
 800381e:	7013      	strb	r3, [r2, #0]
 8003820:	f7ff fd24 	bl	800326c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003824:	a901      	add	r1, sp, #4
 8003826:	a802      	add	r0, sp, #8
 8003828:	f000 fb4c 	bl	8003ec4 <xTaskCheckForTimeOut>
 800382c:	2800      	cmp	r0, #0
 800382e:	d125      	bne.n	800387c <xQueueSemaphoreTake+0x10e>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003830:	0020      	movs	r0, r4
 8003832:	f7ff fe33 	bl	800349c <prvIsQueueEmpty>
 8003836:	2800      	cmp	r0, #0
 8003838:	d01a      	beq.n	8003870 <xQueueSemaphoreTake+0x102>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800383a:	6823      	ldr	r3, [r4, #0]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d107      	bne.n	8003850 <xQueueSemaphoreTake+0xe2>
						taskENTER_CRITICAL();
 8003840:	f7ff fd08 	bl	8003254 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8003844:	6860      	ldr	r0, [r4, #4]
 8003846:	f000 fb85 	bl	8003f54 <xTaskPriorityInherit>
 800384a:	0005      	movs	r5, r0
						taskEXIT_CRITICAL();
 800384c:	f7ff fd0e 	bl	800326c <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003850:	0020      	movs	r0, r4
 8003852:	9901      	ldr	r1, [sp, #4]
 8003854:	3024      	adds	r0, #36	; 0x24
 8003856:	f000 fadb 	bl	8003e10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800385a:	0020      	movs	r0, r4
 800385c:	f7ff fe60 	bl	8003520 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003860:	f000 fa1e 	bl	8003ca0 <xTaskResumeAll>
 8003864:	2800      	cmp	r0, #0
 8003866:	d101      	bne.n	800386c <xQueueSemaphoreTake+0xfe>
					portYIELD_WITHIN_API();
 8003868:	f7ff fce8 	bl	800323c <vPortYield>
 800386c:	003e      	movs	r6, r7
 800386e:	e794      	b.n	800379a <xQueueSemaphoreTake+0x2c>
				prvUnlockQueue( pxQueue );
 8003870:	0020      	movs	r0, r4
 8003872:	f7ff fe55 	bl	8003520 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003876:	f000 fa13 	bl	8003ca0 <xTaskResumeAll>
 800387a:	e7f7      	b.n	800386c <xQueueSemaphoreTake+0xfe>
			prvUnlockQueue( pxQueue );
 800387c:	0020      	movs	r0, r4
 800387e:	f7ff fe4f 	bl	8003520 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003882:	f000 fa0d 	bl	8003ca0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003886:	0020      	movs	r0, r4
 8003888:	f7ff fe08 	bl	800349c <prvIsQueueEmpty>
 800388c:	2800      	cmp	r0, #0
 800388e:	d0ed      	beq.n	800386c <xQueueSemaphoreTake+0xfe>
					if( xInheritanceOccurred != pdFALSE )
 8003890:	2d00      	cmp	r5, #0
 8003892:	d09d      	beq.n	80037d0 <xQueueSemaphoreTake+0x62>
						taskENTER_CRITICAL();
 8003894:	f7ff fcde 	bl	8003254 <vPortEnterCritical>
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003898:	2100      	movs	r1, #0
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800389a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800389c:	428b      	cmp	r3, r1
 800389e:	d003      	beq.n	80038a8 <xQueueSemaphoreTake+0x13a>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80038a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80038a2:	3107      	adds	r1, #7
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	1ac9      	subs	r1, r1, r3
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80038a8:	6860      	ldr	r0, [r4, #4]
 80038aa:	f000 fbc7 	bl	800403c <vTaskPriorityDisinheritAfterTimeout>
				return errQUEUE_EMPTY;
 80038ae:	2500      	movs	r5, #0
						taskEXIT_CRITICAL();
 80038b0:	f7ff fcdc 	bl	800326c <vPortExitCritical>
 80038b4:	e78c      	b.n	80037d0 <xQueueSemaphoreTake+0x62>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80038b6:	b672      	cpsid	i
 80038b8:	e7fe      	b.n	80038b8 <xQueueSemaphoreTake+0x14a>
	...

080038bc <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038bc:	4a07      	ldr	r2, [pc, #28]	; (80038dc <prvResetNextTaskUnblockTime+0x20>)
 80038be:	6813      	ldr	r3, [r2, #0]
 80038c0:	6819      	ldr	r1, [r3, #0]
 80038c2:	4b07      	ldr	r3, [pc, #28]	; (80038e0 <prvResetNextTaskUnblockTime+0x24>)
 80038c4:	2900      	cmp	r1, #0
 80038c6:	d103      	bne.n	80038d0 <prvResetNextTaskUnblockTime+0x14>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80038c8:	2201      	movs	r2, #1
 80038ca:	4252      	negs	r2, r2
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80038cc:	601a      	str	r2, [r3, #0]
	}
}
 80038ce:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80038d0:	6812      	ldr	r2, [r2, #0]
 80038d2:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80038d4:	68d2      	ldr	r2, [r2, #12]
 80038d6:	6852      	ldr	r2, [r2, #4]
 80038d8:	e7f8      	b.n	80038cc <prvResetNextTaskUnblockTime+0x10>
 80038da:	46c0      	nop			; (mov r8, r8)
 80038dc:	20000c48 	.word	0x20000c48
 80038e0:	20000d20 	.word	0x20000d20

080038e4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80038e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038e6:	0004      	movs	r4, r0
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80038e8:	4b14      	ldr	r3, [pc, #80]	; (800393c <prvAddCurrentTaskToDelayedList+0x58>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038ea:	4d15      	ldr	r5, [pc, #84]	; (8003940 <prvAddCurrentTaskToDelayedList+0x5c>)
const TickType_t xConstTickCount = xTickCount;
 80038ec:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038ee:	6828      	ldr	r0, [r5, #0]
{
 80038f0:	000f      	movs	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038f2:	3004      	adds	r0, #4
 80038f4:	f7ff fc1e 	bl	8003134 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80038f8:	1c63      	adds	r3, r4, #1
 80038fa:	d107      	bne.n	800390c <prvAddCurrentTaskToDelayedList+0x28>
 80038fc:	2f00      	cmp	r7, #0
 80038fe:	d005      	beq.n	800390c <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003900:	6829      	ldr	r1, [r5, #0]
 8003902:	4810      	ldr	r0, [pc, #64]	; (8003944 <prvAddCurrentTaskToDelayedList+0x60>)
 8003904:	3104      	adds	r1, #4
 8003906:	f7ff fbf2 	bl	80030ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800390a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800390c:	682b      	ldr	r3, [r5, #0]
			xTimeToWake = xConstTickCount + xTicksToWait;
 800390e:	1934      	adds	r4, r6, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003910:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003912:	42a6      	cmp	r6, r4
 8003914:	d906      	bls.n	8003924 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003916:	4b0c      	ldr	r3, [pc, #48]	; (8003948 <prvAddCurrentTaskToDelayedList+0x64>)
 8003918:	6818      	ldr	r0, [r3, #0]
 800391a:	6829      	ldr	r1, [r5, #0]
 800391c:	3104      	adds	r1, #4
 800391e:	f7ff fbf2 	bl	8003106 <vListInsert>
 8003922:	e7f2      	b.n	800390a <prvAddCurrentTaskToDelayedList+0x26>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003924:	4b09      	ldr	r3, [pc, #36]	; (800394c <prvAddCurrentTaskToDelayedList+0x68>)
 8003926:	6818      	ldr	r0, [r3, #0]
 8003928:	6829      	ldr	r1, [r5, #0]
 800392a:	3104      	adds	r1, #4
 800392c:	f7ff fbeb 	bl	8003106 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003930:	4b07      	ldr	r3, [pc, #28]	; (8003950 <prvAddCurrentTaskToDelayedList+0x6c>)
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	4294      	cmp	r4, r2
 8003936:	d2e8      	bcs.n	800390a <prvAddCurrentTaskToDelayedList+0x26>
					xNextTaskUnblockTime = xTimeToWake;
 8003938:	601c      	str	r4, [r3, #0]
}
 800393a:	e7e6      	b.n	800390a <prvAddCurrentTaskToDelayedList+0x26>
 800393c:	20000d68 	.word	0x20000d68
 8003940:	20000c44 	.word	0x20000c44
 8003944:	20000d40 	.word	0x20000d40
 8003948:	20000c4c 	.word	0x20000c4c
 800394c:	20000c48 	.word	0x20000c48
 8003950:	20000d20 	.word	0x20000d20

08003954 <prvIdleTask>:
{
 8003954:	b570      	push	{r4, r5, r6, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003956:	4c11      	ldr	r4, [pc, #68]	; (800399c <prvIdleTask+0x48>)
 8003958:	6823      	ldr	r3, [r4, #0]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d106      	bne.n	800396c <prvIdleTask+0x18>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800395e:	4b10      	ldr	r3, [pc, #64]	; (80039a0 <prvIdleTask+0x4c>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d9f7      	bls.n	8003956 <prvIdleTask+0x2>
				taskYIELD();
 8003966:	f7ff fc69 	bl	800323c <vPortYield>
 800396a:	e7f4      	b.n	8003956 <prvIdleTask+0x2>
			taskENTER_CRITICAL();
 800396c:	f7ff fc72 	bl	8003254 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003970:	4b0c      	ldr	r3, [pc, #48]	; (80039a4 <prvIdleTask+0x50>)
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003976:	1d28      	adds	r0, r5, #4
 8003978:	f7ff fbdc 	bl	8003134 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800397c:	4a0a      	ldr	r2, [pc, #40]	; (80039a8 <prvIdleTask+0x54>)
 800397e:	6813      	ldr	r3, [r2, #0]
 8003980:	3b01      	subs	r3, #1
 8003982:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003984:	6823      	ldr	r3, [r4, #0]
 8003986:	3b01      	subs	r3, #1
 8003988:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800398a:	f7ff fc6f 	bl	800326c <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 800398e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8003990:	f7ff fd60 	bl	8003454 <vPortFree>
			vPortFree( pxTCB );
 8003994:	0028      	movs	r0, r5
 8003996:	f7ff fd5d 	bl	8003454 <vPortFree>
 800399a:	e7dc      	b.n	8003956 <prvIdleTask+0x2>
 800399c:	20000ce0 	.word	0x20000ce0
 80039a0:	20000c50 	.word	0x20000c50
 80039a4:	20000d54 	.word	0x20000d54
 80039a8:	20000cdc 	.word	0x20000cdc

080039ac <xTaskCreate>:
	{
 80039ac:	b5f0      	push	{r4, r5, r6, r7, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039ae:	0095      	lsls	r5, r2, #2
	{
 80039b0:	b085      	sub	sp, #20
 80039b2:	9002      	str	r0, [sp, #8]
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039b4:	0028      	movs	r0, r5
	{
 80039b6:	000f      	movs	r7, r1
 80039b8:	9303      	str	r3, [sp, #12]
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039ba:	f7ff fcc9 	bl	8003350 <pvPortMalloc>
 80039be:	1e06      	subs	r6, r0, #0
			if( pxStack != NULL )
 80039c0:	d100      	bne.n	80039c4 <xTaskCreate+0x18>
 80039c2:	e08e      	b.n	8003ae2 <xTaskCreate+0x136>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80039c4:	2054      	movs	r0, #84	; 0x54
 80039c6:	f7ff fcc3 	bl	8003350 <pvPortMalloc>
 80039ca:	1e04      	subs	r4, r0, #0
				if( pxNewTCB != NULL )
 80039cc:	d100      	bne.n	80039d0 <xTaskCreate+0x24>
 80039ce:	e085      	b.n	8003adc <xTaskCreate+0x130>
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80039d0:	2307      	movs	r3, #7
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80039d2:	3d04      	subs	r5, #4
					pxNewTCB->pxStack = pxStack;
 80039d4:	6306      	str	r6, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80039d6:	1976      	adds	r6, r6, r5
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80039d8:	439e      	bics	r6, r3
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039da:	2300      	movs	r3, #0
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80039dc:	9600      	str	r6, [sp, #0]
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80039de:	001a      	movs	r2, r3
 80039e0:	5cf9      	ldrb	r1, [r7, r3]
 80039e2:	3234      	adds	r2, #52	; 0x34
 80039e4:	54a1      	strb	r1, [r4, r2]
		if( pcName[ x ] == 0x00 )
 80039e6:	5cfa      	ldrb	r2, [r7, r3]
 80039e8:	2a00      	cmp	r2, #0
 80039ea:	d002      	beq.n	80039f2 <xTaskCreate+0x46>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039ec:	3301      	adds	r3, #1
 80039ee:	2b10      	cmp	r3, #16
 80039f0:	d1f5      	bne.n	80039de <xTaskCreate+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80039f2:	0023      	movs	r3, r4
 80039f4:	2500      	movs	r5, #0
 80039f6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80039f8:	3343      	adds	r3, #67	; 0x43
 80039fa:	701d      	strb	r5, [r3, #0]
 80039fc:	2e06      	cmp	r6, #6
 80039fe:	d900      	bls.n	8003a02 <xTaskCreate+0x56>
 8003a00:	2606      	movs	r6, #6
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003a02:	1d23      	adds	r3, r4, #4
 8003a04:	0018      	movs	r0, r3
	pxNewTCB->uxPriority = uxPriority;
 8003a06:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8003a08:	6466      	str	r6, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003a0a:	64a5      	str	r5, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003a0c:	9301      	str	r3, [sp, #4]
 8003a0e:	f7ff fb6b 	bl	80030e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003a12:	0020      	movs	r0, r4
 8003a14:	3018      	adds	r0, #24
 8003a16:	f7ff fb67 	bl	80030e8 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a1a:	2307      	movs	r3, #7
 8003a1c:	1b9e      	subs	r6, r3, r6
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003a1e:	0023      	movs	r3, r4
 8003a20:	3350      	adds	r3, #80	; 0x50
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003a22:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a24:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003a26:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8003a28:	64e5      	str	r5, [r4, #76]	; 0x4c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003a2a:	9a03      	ldr	r2, [sp, #12]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003a2c:	701d      	strb	r5, [r3, #0]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003a2e:	9902      	ldr	r1, [sp, #8]
 8003a30:	9800      	ldr	r0, [sp, #0]
 8003a32:	f7ff fbbf 	bl	80031b4 <pxPortInitialiseStack>
	if( ( void * ) pxCreatedTask != NULL )
 8003a36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003a38:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d000      	beq.n	8003a40 <xTaskCreate+0x94>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003a3e:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
 8003a40:	f7ff fc08 	bl	8003254 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8003a44:	4b2e      	ldr	r3, [pc, #184]	; (8003b00 <xTaskCreate+0x154>)
		if( pxCurrentTCB == NULL )
 8003a46:	4d2f      	ldr	r5, [pc, #188]	; (8003b04 <xTaskCreate+0x158>)
		uxCurrentNumberOfTasks++;
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	3201      	adds	r2, #1
 8003a4c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8003a4e:	682a      	ldr	r2, [r5, #0]
 8003a50:	2a00      	cmp	r2, #0
 8003a52:	d149      	bne.n	8003ae8 <xTaskCreate+0x13c>
			pxCurrentTCB = pxNewTCB;
 8003a54:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d11d      	bne.n	8003a98 <xTaskCreate+0xec>
 8003a5c:	4e2a      	ldr	r6, [pc, #168]	; (8003b08 <xTaskCreate+0x15c>)
 8003a5e:	0037      	movs	r7, r6
 8003a60:	378c      	adds	r7, #140	; 0x8c
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003a62:	0030      	movs	r0, r6
 8003a64:	3614      	adds	r6, #20
 8003a66:	f7ff fb34 	bl	80030d2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a6a:	42b7      	cmp	r7, r6
 8003a6c:	d1f9      	bne.n	8003a62 <xTaskCreate+0xb6>
	vListInitialise( &xDelayedTaskList1 );
 8003a6e:	4e27      	ldr	r6, [pc, #156]	; (8003b0c <xTaskCreate+0x160>)
 8003a70:	0030      	movs	r0, r6
 8003a72:	f7ff fb2e 	bl	80030d2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003a76:	4f26      	ldr	r7, [pc, #152]	; (8003b10 <xTaskCreate+0x164>)
 8003a78:	0038      	movs	r0, r7
 8003a7a:	f7ff fb2a 	bl	80030d2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003a7e:	4825      	ldr	r0, [pc, #148]	; (8003b14 <xTaskCreate+0x168>)
 8003a80:	f7ff fb27 	bl	80030d2 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8003a84:	4824      	ldr	r0, [pc, #144]	; (8003b18 <xTaskCreate+0x16c>)
 8003a86:	f7ff fb24 	bl	80030d2 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8003a8a:	4824      	ldr	r0, [pc, #144]	; (8003b1c <xTaskCreate+0x170>)
 8003a8c:	f7ff fb21 	bl	80030d2 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8003a90:	4b23      	ldr	r3, [pc, #140]	; (8003b20 <xTaskCreate+0x174>)
 8003a92:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a94:	4b23      	ldr	r3, [pc, #140]	; (8003b24 <xTaskCreate+0x178>)
 8003a96:	601f      	str	r7, [r3, #0]
		uxTaskNumber++;
 8003a98:	4a23      	ldr	r2, [pc, #140]	; (8003b28 <xTaskCreate+0x17c>)
 8003a9a:	6813      	ldr	r3, [r2, #0]
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8003aa0:	4a22      	ldr	r2, [pc, #136]	; (8003b2c <xTaskCreate+0x180>)
 8003aa2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003aa4:	6811      	ldr	r1, [r2, #0]
 8003aa6:	428b      	cmp	r3, r1
 8003aa8:	d900      	bls.n	8003aac <xTaskCreate+0x100>
 8003aaa:	6013      	str	r3, [r2, #0]
 8003aac:	2014      	movs	r0, #20
 8003aae:	4358      	muls	r0, r3
 8003ab0:	4b15      	ldr	r3, [pc, #84]	; (8003b08 <xTaskCreate+0x15c>)
 8003ab2:	9901      	ldr	r1, [sp, #4]
 8003ab4:	1818      	adds	r0, r3, r0
 8003ab6:	f7ff fb1a 	bl	80030ee <vListInsertEnd>
	taskEXIT_CRITICAL();
 8003aba:	f7ff fbd7 	bl	800326c <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8003abe:	4b1c      	ldr	r3, [pc, #112]	; (8003b30 <xTaskCreate+0x184>)
			xReturn = pdPASS;
 8003ac0:	2601      	movs	r6, #1
	if( xSchedulerRunning != pdFALSE )
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d006      	beq.n	8003ad6 <xTaskCreate+0x12a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003ac8:	682b      	ldr	r3, [r5, #0]
 8003aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003acc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d201      	bcs.n	8003ad6 <xTaskCreate+0x12a>
			taskYIELD_IF_USING_PREEMPTION();
 8003ad2:	f7ff fbb3 	bl	800323c <vPortYield>
	}
 8003ad6:	0030      	movs	r0, r6
 8003ad8:	b005      	add	sp, #20
 8003ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vPortFree( pxStack );
 8003adc:	0030      	movs	r0, r6
 8003ade:	f7ff fcb9 	bl	8003454 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003ae2:	2601      	movs	r6, #1
 8003ae4:	4276      	negs	r6, r6
 8003ae6:	e7f6      	b.n	8003ad6 <xTaskCreate+0x12a>
			if( xSchedulerRunning == pdFALSE )
 8003ae8:	4b11      	ldr	r3, [pc, #68]	; (8003b30 <xTaskCreate+0x184>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1d3      	bne.n	8003a98 <xTaskCreate+0xec>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003af0:	682b      	ldr	r3, [r5, #0]
 8003af2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d8ce      	bhi.n	8003a98 <xTaskCreate+0xec>
					pxCurrentTCB = pxNewTCB;
 8003afa:	602c      	str	r4, [r5, #0]
 8003afc:	e7cc      	b.n	8003a98 <xTaskCreate+0xec>
 8003afe:	46c0      	nop			; (mov r8, r8)
 8003b00:	20000cdc 	.word	0x20000cdc
 8003b04:	20000c44 	.word	0x20000c44
 8003b08:	20000c50 	.word	0x20000c50
 8003b0c:	20000cf4 	.word	0x20000cf4
 8003b10:	20000d08 	.word	0x20000d08
 8003b14:	20000d28 	.word	0x20000d28
 8003b18:	20000d54 	.word	0x20000d54
 8003b1c:	20000d40 	.word	0x20000d40
 8003b20:	20000c48 	.word	0x20000c48
 8003b24:	20000c4c 	.word	0x20000c4c
 8003b28:	20000cec 	.word	0x20000cec
 8003b2c:	20000cf0 	.word	0x20000cf0
 8003b30:	20000d3c 	.word	0x20000d3c

08003b34 <vTaskStartScheduler>:
{
 8003b34:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8003b36:	2400      	movs	r4, #0
 8003b38:	4b0d      	ldr	r3, [pc, #52]	; (8003b70 <vTaskStartScheduler+0x3c>)
 8003b3a:	9400      	str	r4, [sp, #0]
 8003b3c:	9301      	str	r3, [sp, #4]
 8003b3e:	2280      	movs	r2, #128	; 0x80
 8003b40:	0023      	movs	r3, r4
 8003b42:	490c      	ldr	r1, [pc, #48]	; (8003b74 <vTaskStartScheduler+0x40>)
 8003b44:	480c      	ldr	r0, [pc, #48]	; (8003b78 <vTaskStartScheduler+0x44>)
 8003b46:	f7ff ff31 	bl	80039ac <xTaskCreate>
	if( xReturn == pdPASS )
 8003b4a:	2801      	cmp	r0, #1
 8003b4c:	d10b      	bne.n	8003b66 <vTaskStartScheduler+0x32>
		portDISABLE_INTERRUPTS();
 8003b4e:	b672      	cpsid	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8003b50:	2201      	movs	r2, #1
 8003b52:	4b0a      	ldr	r3, [pc, #40]	; (8003b7c <vTaskStartScheduler+0x48>)
 8003b54:	4252      	negs	r2, r2
 8003b56:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003b58:	4b09      	ldr	r3, [pc, #36]	; (8003b80 <vTaskStartScheduler+0x4c>)
 8003b5a:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003b5c:	4b09      	ldr	r3, [pc, #36]	; (8003b84 <vTaskStartScheduler+0x50>)
 8003b5e:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8003b60:	f7ff fb3a 	bl	80031d8 <xPortStartScheduler>
}
 8003b64:	bd13      	pop	{r0, r1, r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003b66:	1c43      	adds	r3, r0, #1
 8003b68:	d1fc      	bne.n	8003b64 <vTaskStartScheduler+0x30>
 8003b6a:	b672      	cpsid	i
 8003b6c:	e7fe      	b.n	8003b6c <vTaskStartScheduler+0x38>
 8003b6e:	46c0      	nop			; (mov r8, r8)
 8003b70:	20000d1c 	.word	0x20000d1c
 8003b74:	080049c9 	.word	0x080049c9
 8003b78:	08003955 	.word	0x08003955
 8003b7c:	20000d20 	.word	0x20000d20
 8003b80:	20000d3c 	.word	0x20000d3c
 8003b84:	20000d68 	.word	0x20000d68

08003b88 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003b88:	4a02      	ldr	r2, [pc, #8]	; (8003b94 <vTaskSuspendAll+0xc>)
 8003b8a:	6813      	ldr	r3, [r2, #0]
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	6013      	str	r3, [r2, #0]
}
 8003b90:	4770      	bx	lr
 8003b92:	46c0      	nop			; (mov r8, r8)
 8003b94:	20000ce8 	.word	0x20000ce8

08003b98 <xTaskGetTickCount>:
 8003b98:	4b01      	ldr	r3, [pc, #4]	; (8003ba0 <xTaskGetTickCount+0x8>)
 8003b9a:	6818      	ldr	r0, [r3, #0]
 8003b9c:	4770      	bx	lr
 8003b9e:	46c0      	nop			; (mov r8, r8)
 8003ba0:	20000d68 	.word	0x20000d68

08003ba4 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ba4:	4b33      	ldr	r3, [pc, #204]	; (8003c74 <xTaskIncrementTick+0xd0>)
{
 8003ba6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d135      	bne.n	8003c1a <xTaskIncrementTick+0x76>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003bae:	4b32      	ldr	r3, [pc, #200]	; (8003c78 <xTaskIncrementTick+0xd4>)
 8003bb0:	681c      	ldr	r4, [r3, #0]
 8003bb2:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8003bb4:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003bb6:	2c00      	cmp	r4, #0
 8003bb8:	d111      	bne.n	8003bde <xTaskIncrementTick+0x3a>
			taskSWITCH_DELAYED_LISTS();
 8003bba:	4b30      	ldr	r3, [pc, #192]	; (8003c7c <xTaskIncrementTick+0xd8>)
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	6812      	ldr	r2, [r2, #0]
 8003bc0:	2a00      	cmp	r2, #0
 8003bc2:	d001      	beq.n	8003bc8 <xTaskIncrementTick+0x24>
 8003bc4:	b672      	cpsid	i
 8003bc6:	e7fe      	b.n	8003bc6 <xTaskIncrementTick+0x22>
 8003bc8:	4a2d      	ldr	r2, [pc, #180]	; (8003c80 <xTaskIncrementTick+0xdc>)
 8003bca:	6819      	ldr	r1, [r3, #0]
 8003bcc:	6810      	ldr	r0, [r2, #0]
 8003bce:	6018      	str	r0, [r3, #0]
 8003bd0:	6011      	str	r1, [r2, #0]
 8003bd2:	4a2c      	ldr	r2, [pc, #176]	; (8003c84 <xTaskIncrementTick+0xe0>)
 8003bd4:	6813      	ldr	r3, [r2, #0]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	6013      	str	r3, [r2, #0]
 8003bda:	f7ff fe6f 	bl	80038bc <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003bde:	4f2a      	ldr	r7, [pc, #168]	; (8003c88 <xTaskIncrementTick+0xe4>)
BaseType_t xSwitchRequired = pdFALSE;
 8003be0:	2600      	movs	r6, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	429c      	cmp	r4, r3
 8003be6:	d307      	bcc.n	8003bf8 <xTaskIncrementTick+0x54>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003be8:	4b24      	ldr	r3, [pc, #144]	; (8003c7c <xTaskIncrementTick+0xd8>)
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	6812      	ldr	r2, [r2, #0]
 8003bee:	2a00      	cmp	r2, #0
 8003bf0:	d119      	bne.n	8003c26 <xTaskIncrementTick+0x82>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	425b      	negs	r3, r3
 8003bf6:	603b      	str	r3, [r7, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003bf8:	4b24      	ldr	r3, [pc, #144]	; (8003c8c <xTaskIncrementTick+0xe8>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bfe:	2314      	movs	r3, #20
 8003c00:	4353      	muls	r3, r2
 8003c02:	4a23      	ldr	r2, [pc, #140]	; (8003c90 <xTaskIncrementTick+0xec>)
 8003c04:	58d3      	ldr	r3, [r2, r3]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d900      	bls.n	8003c0c <xTaskIncrementTick+0x68>
				xSwitchRequired = pdTRUE;
 8003c0a:	2601      	movs	r6, #1
		if( xYieldPending != pdFALSE )
 8003c0c:	4b21      	ldr	r3, [pc, #132]	; (8003c94 <xTaskIncrementTick+0xf0>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d000      	beq.n	8003c16 <xTaskIncrementTick+0x72>
			xSwitchRequired = pdTRUE;
 8003c14:	2601      	movs	r6, #1
}
 8003c16:	0030      	movs	r0, r6
 8003c18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		++uxPendedTicks;
 8003c1a:	4a1f      	ldr	r2, [pc, #124]	; (8003c98 <xTaskIncrementTick+0xf4>)
BaseType_t xSwitchRequired = pdFALSE;
 8003c1c:	2600      	movs	r6, #0
		++uxPendedTicks;
 8003c1e:	6813      	ldr	r3, [r2, #0]
 8003c20:	3301      	adds	r3, #1
 8003c22:	6013      	str	r3, [r2, #0]
 8003c24:	e7f2      	b.n	8003c0c <xTaskIncrementTick+0x68>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	68dd      	ldr	r5, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003c2c:	686b      	ldr	r3, [r5, #4]
					if( xConstTickCount < xItemValue )
 8003c2e:	429c      	cmp	r4, r3
 8003c30:	d3e1      	bcc.n	8003bf6 <xTaskIncrementTick+0x52>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c32:	1d2b      	adds	r3, r5, #4
 8003c34:	0018      	movs	r0, r3
 8003c36:	9301      	str	r3, [sp, #4]
 8003c38:	f7ff fa7c 	bl	8003134 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c3c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <xTaskIncrementTick+0xa6>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c42:	0028      	movs	r0, r5
 8003c44:	3018      	adds	r0, #24
 8003c46:	f7ff fa75 	bl	8003134 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c4a:	4b14      	ldr	r3, [pc, #80]	; (8003c9c <xTaskIncrementTick+0xf8>)
 8003c4c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	4290      	cmp	r0, r2
 8003c52:	d900      	bls.n	8003c56 <xTaskIncrementTick+0xb2>
 8003c54:	6018      	str	r0, [r3, #0]
 8003c56:	2314      	movs	r3, #20
 8003c58:	4358      	muls	r0, r3
 8003c5a:	4b0d      	ldr	r3, [pc, #52]	; (8003c90 <xTaskIncrementTick+0xec>)
 8003c5c:	1d29      	adds	r1, r5, #4
 8003c5e:	1818      	adds	r0, r3, r0
 8003c60:	f7ff fa45 	bl	80030ee <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c64:	4b09      	ldr	r3, [pc, #36]	; (8003c8c <xTaskIncrementTick+0xe8>)
 8003c66:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d3bb      	bcc.n	8003be8 <xTaskIncrementTick+0x44>
							xSwitchRequired = pdTRUE;
 8003c70:	2601      	movs	r6, #1
 8003c72:	e7b9      	b.n	8003be8 <xTaskIncrementTick+0x44>
 8003c74:	20000ce8 	.word	0x20000ce8
 8003c78:	20000d68 	.word	0x20000d68
 8003c7c:	20000c48 	.word	0x20000c48
 8003c80:	20000c4c 	.word	0x20000c4c
 8003c84:	20000d24 	.word	0x20000d24
 8003c88:	20000d20 	.word	0x20000d20
 8003c8c:	20000c44 	.word	0x20000c44
 8003c90:	20000c50 	.word	0x20000c50
 8003c94:	20000d6c 	.word	0x20000d6c
 8003c98:	20000ce4 	.word	0x20000ce4
 8003c9c:	20000cf0 	.word	0x20000cf0

08003ca0 <xTaskResumeAll>:
{
 8003ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 8003ca2:	4c2b      	ldr	r4, [pc, #172]	; (8003d50 <xTaskResumeAll+0xb0>)
 8003ca4:	6823      	ldr	r3, [r4, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d101      	bne.n	8003cae <xTaskResumeAll+0xe>
 8003caa:	b672      	cpsid	i
 8003cac:	e7fe      	b.n	8003cac <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
 8003cae:	f7ff fad1 	bl	8003254 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8003cb2:	6823      	ldr	r3, [r4, #0]
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cb8:	6824      	ldr	r4, [r4, #0]
 8003cba:	2c00      	cmp	r4, #0
 8003cbc:	d004      	beq.n	8003cc8 <xTaskResumeAll+0x28>
BaseType_t xAlreadyYielded = pdFALSE;
 8003cbe:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003cc0:	f7ff fad4 	bl	800326c <vPortExitCritical>
}
 8003cc4:	0020      	movs	r0, r4
 8003cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003cc8:	4b22      	ldr	r3, [pc, #136]	; (8003d54 <xTaskResumeAll+0xb4>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d0f6      	beq.n	8003cbe <xTaskResumeAll+0x1e>
					prvAddTaskToReadyList( pxTCB );
 8003cd0:	2614      	movs	r6, #20
						xYieldPending = pdTRUE;
 8003cd2:	2701      	movs	r7, #1
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003cd4:	4b20      	ldr	r3, [pc, #128]	; (8003d58 <xTaskResumeAll+0xb8>)
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	2a00      	cmp	r2, #0
 8003cda:	d11a      	bne.n	8003d12 <xTaskResumeAll+0x72>
				if( pxTCB != NULL )
 8003cdc:	2c00      	cmp	r4, #0
 8003cde:	d001      	beq.n	8003ce4 <xTaskResumeAll+0x44>
					prvResetNextTaskUnblockTime();
 8003ce0:	f7ff fdec 	bl	80038bc <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003ce4:	4d1d      	ldr	r5, [pc, #116]	; (8003d5c <xTaskResumeAll+0xbc>)
 8003ce6:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003ce8:	2c00      	cmp	r4, #0
 8003cea:	d00a      	beq.n	8003d02 <xTaskResumeAll+0x62>
								xYieldPending = pdTRUE;
 8003cec:	2601      	movs	r6, #1
							if( xTaskIncrementTick() != pdFALSE )
 8003cee:	f7ff ff59 	bl	8003ba4 <xTaskIncrementTick>
 8003cf2:	2800      	cmp	r0, #0
 8003cf4:	d001      	beq.n	8003cfa <xTaskResumeAll+0x5a>
								xYieldPending = pdTRUE;
 8003cf6:	4b1a      	ldr	r3, [pc, #104]	; (8003d60 <xTaskResumeAll+0xc0>)
 8003cf8:	601e      	str	r6, [r3, #0]
							--uxPendedCounts;
 8003cfa:	3c01      	subs	r4, #1
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003cfc:	2c00      	cmp	r4, #0
 8003cfe:	d1f6      	bne.n	8003cee <xTaskResumeAll+0x4e>
						uxPendedTicks = 0;
 8003d00:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8003d02:	4b17      	ldr	r3, [pc, #92]	; (8003d60 <xTaskResumeAll+0xc0>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d0d9      	beq.n	8003cbe <xTaskResumeAll+0x1e>
					taskYIELD_IF_USING_PREEMPTION();
 8003d0a:	f7ff fa97 	bl	800323c <vPortYield>
						xAlreadyYielded = pdTRUE;
 8003d0e:	2401      	movs	r4, #1
 8003d10:	e7d6      	b.n	8003cc0 <xTaskResumeAll+0x20>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d16:	0020      	movs	r0, r4
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d18:	1d25      	adds	r5, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d1a:	3018      	adds	r0, #24
 8003d1c:	f7ff fa0a 	bl	8003134 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d20:	0028      	movs	r0, r5
 8003d22:	f7ff fa07 	bl	8003134 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003d26:	4b0f      	ldr	r3, [pc, #60]	; (8003d64 <xTaskResumeAll+0xc4>)
 8003d28:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	4290      	cmp	r0, r2
 8003d2e:	d900      	bls.n	8003d32 <xTaskResumeAll+0x92>
 8003d30:	6018      	str	r0, [r3, #0]
 8003d32:	4370      	muls	r0, r6
 8003d34:	4b0c      	ldr	r3, [pc, #48]	; (8003d68 <xTaskResumeAll+0xc8>)
 8003d36:	0029      	movs	r1, r5
 8003d38:	1818      	adds	r0, r3, r0
 8003d3a:	f7ff f9d8 	bl	80030ee <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d3e:	4b0b      	ldr	r3, [pc, #44]	; (8003d6c <xTaskResumeAll+0xcc>)
 8003d40:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d3c4      	bcc.n	8003cd4 <xTaskResumeAll+0x34>
						xYieldPending = pdTRUE;
 8003d4a:	4b05      	ldr	r3, [pc, #20]	; (8003d60 <xTaskResumeAll+0xc0>)
 8003d4c:	601f      	str	r7, [r3, #0]
 8003d4e:	e7c1      	b.n	8003cd4 <xTaskResumeAll+0x34>
 8003d50:	20000ce8 	.word	0x20000ce8
 8003d54:	20000cdc 	.word	0x20000cdc
 8003d58:	20000d28 	.word	0x20000d28
 8003d5c:	20000ce4 	.word	0x20000ce4
 8003d60:	20000d6c 	.word	0x20000d6c
 8003d64:	20000cf0 	.word	0x20000cf0
 8003d68:	20000c50 	.word	0x20000c50
 8003d6c:	20000c44 	.word	0x20000c44

08003d70 <vTaskDelay>:
	{
 8003d70:	b570      	push	{r4, r5, r6, lr}
 8003d72:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003d74:	d102      	bne.n	8003d7c <vTaskDelay+0xc>
			portYIELD_WITHIN_API();
 8003d76:	f7ff fa61 	bl	800323c <vPortYield>
	}
 8003d7a:	bd70      	pop	{r4, r5, r6, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8003d7c:	4b08      	ldr	r3, [pc, #32]	; (8003da0 <vTaskDelay+0x30>)
 8003d7e:	681d      	ldr	r5, [r3, #0]
 8003d80:	2d00      	cmp	r5, #0
 8003d82:	d001      	beq.n	8003d88 <vTaskDelay+0x18>
 8003d84:	b672      	cpsid	i
 8003d86:	e7fe      	b.n	8003d86 <vTaskDelay+0x16>
			vTaskSuspendAll();
 8003d88:	f7ff fefe 	bl	8003b88 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003d8c:	0029      	movs	r1, r5
 8003d8e:	0020      	movs	r0, r4
 8003d90:	f7ff fda8 	bl	80038e4 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8003d94:	f7ff ff84 	bl	8003ca0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8003d98:	2800      	cmp	r0, #0
 8003d9a:	d1ee      	bne.n	8003d7a <vTaskDelay+0xa>
 8003d9c:	e7eb      	b.n	8003d76 <vTaskDelay+0x6>
 8003d9e:	46c0      	nop			; (mov r8, r8)
 8003da0:	20000ce8 	.word	0x20000ce8

08003da4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003da4:	4b15      	ldr	r3, [pc, #84]	; (8003dfc <vTaskSwitchContext+0x58>)
{
 8003da6:	b530      	push	{r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	4b15      	ldr	r3, [pc, #84]	; (8003e00 <vTaskSwitchContext+0x5c>)
 8003dac:	2a00      	cmp	r2, #0
 8003dae:	d002      	beq.n	8003db6 <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 8003db0:	2201      	movs	r2, #1
 8003db2:	601a      	str	r2, [r3, #0]
}
 8003db4:	bd30      	pop	{r4, r5, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003db6:	2514      	movs	r5, #20
 8003db8:	4812      	ldr	r0, [pc, #72]	; (8003e04 <vTaskSwitchContext+0x60>)
		xYieldPending = pdFALSE;
 8003dba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003dbc:	6802      	ldr	r2, [r0, #0]
 8003dbe:	4912      	ldr	r1, [pc, #72]	; (8003e08 <vTaskSwitchContext+0x64>)
 8003dc0:	002b      	movs	r3, r5
 8003dc2:	4353      	muls	r3, r2
 8003dc4:	585c      	ldr	r4, [r3, r1]
 8003dc6:	2c00      	cmp	r4, #0
 8003dc8:	d012      	beq.n	8003df0 <vTaskSwitchContext+0x4c>
 8003dca:	18cc      	adds	r4, r1, r3
 8003dcc:	6865      	ldr	r5, [r4, #4]
 8003dce:	3308      	adds	r3, #8
 8003dd0:	686d      	ldr	r5, [r5, #4]
 8003dd2:	18cb      	adds	r3, r1, r3
 8003dd4:	6065      	str	r5, [r4, #4]
 8003dd6:	429d      	cmp	r5, r3
 8003dd8:	d101      	bne.n	8003dde <vTaskSwitchContext+0x3a>
 8003dda:	686b      	ldr	r3, [r5, #4]
 8003ddc:	6063      	str	r3, [r4, #4]
 8003dde:	2314      	movs	r3, #20
 8003de0:	4353      	muls	r3, r2
 8003de2:	18c9      	adds	r1, r1, r3
 8003de4:	684b      	ldr	r3, [r1, #4]
 8003de6:	68d9      	ldr	r1, [r3, #12]
 8003de8:	4b08      	ldr	r3, [pc, #32]	; (8003e0c <vTaskSwitchContext+0x68>)
 8003dea:	6019      	str	r1, [r3, #0]
 8003dec:	6002      	str	r2, [r0, #0]
}
 8003dee:	e7e1      	b.n	8003db4 <vTaskSwitchContext+0x10>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003df0:	2a00      	cmp	r2, #0
 8003df2:	d101      	bne.n	8003df8 <vTaskSwitchContext+0x54>
 8003df4:	b672      	cpsid	i
 8003df6:	e7fe      	b.n	8003df6 <vTaskSwitchContext+0x52>
 8003df8:	3a01      	subs	r2, #1
 8003dfa:	e7e1      	b.n	8003dc0 <vTaskSwitchContext+0x1c>
 8003dfc:	20000ce8 	.word	0x20000ce8
 8003e00:	20000d6c 	.word	0x20000d6c
 8003e04:	20000cf0 	.word	0x20000cf0
 8003e08:	20000c50 	.word	0x20000c50
 8003e0c:	20000c44 	.word	0x20000c44

08003e10 <vTaskPlaceOnEventList>:
{
 8003e10:	b510      	push	{r4, lr}
 8003e12:	000c      	movs	r4, r1
	configASSERT( pxEventList );
 8003e14:	2800      	cmp	r0, #0
 8003e16:	d101      	bne.n	8003e1c <vTaskPlaceOnEventList+0xc>
 8003e18:	b672      	cpsid	i
 8003e1a:	e7fe      	b.n	8003e1a <vTaskPlaceOnEventList+0xa>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e1c:	4b04      	ldr	r3, [pc, #16]	; (8003e30 <vTaskPlaceOnEventList+0x20>)
 8003e1e:	6819      	ldr	r1, [r3, #0]
 8003e20:	3118      	adds	r1, #24
 8003e22:	f7ff f970 	bl	8003106 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003e26:	2101      	movs	r1, #1
 8003e28:	0020      	movs	r0, r4
 8003e2a:	f7ff fd5b 	bl	80038e4 <prvAddCurrentTaskToDelayedList>
}
 8003e2e:	bd10      	pop	{r4, pc}
 8003e30:	20000c44 	.word	0x20000c44

08003e34 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003e34:	68c3      	ldr	r3, [r0, #12]
{
 8003e36:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003e38:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8003e3a:	2c00      	cmp	r4, #0
 8003e3c:	d101      	bne.n	8003e42 <xTaskRemoveFromEventList+0xe>
 8003e3e:	b672      	cpsid	i
 8003e40:	e7fe      	b.n	8003e40 <xTaskRemoveFromEventList+0xc>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003e42:	0025      	movs	r5, r4
 8003e44:	3518      	adds	r5, #24
 8003e46:	0028      	movs	r0, r5
 8003e48:	f7ff f974 	bl	8003134 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e4c:	4b11      	ldr	r3, [pc, #68]	; (8003e94 <xTaskRemoveFromEventList+0x60>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d11b      	bne.n	8003e8c <xTaskRemoveFromEventList+0x58>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003e54:	1d25      	adds	r5, r4, #4
 8003e56:	0028      	movs	r0, r5
 8003e58:	f7ff f96c 	bl	8003134 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003e5c:	4a0e      	ldr	r2, [pc, #56]	; (8003e98 <xTaskRemoveFromEventList+0x64>)
 8003e5e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003e60:	6811      	ldr	r1, [r2, #0]
 8003e62:	428b      	cmp	r3, r1
 8003e64:	d900      	bls.n	8003e68 <xTaskRemoveFromEventList+0x34>
 8003e66:	6013      	str	r3, [r2, #0]
 8003e68:	2014      	movs	r0, #20
 8003e6a:	0029      	movs	r1, r5
 8003e6c:	4343      	muls	r3, r0
 8003e6e:	480b      	ldr	r0, [pc, #44]	; (8003e9c <xTaskRemoveFromEventList+0x68>)
 8003e70:	18c0      	adds	r0, r0, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003e72:	f7ff f93c 	bl	80030ee <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003e76:	4b0a      	ldr	r3, [pc, #40]	; (8003ea0 <xTaskRemoveFromEventList+0x6c>)
 8003e78:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003e7a:	681b      	ldr	r3, [r3, #0]
		xReturn = pdFALSE;
 8003e7c:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d902      	bls.n	8003e8a <xTaskRemoveFromEventList+0x56>
		xYieldPending = pdTRUE;
 8003e84:	4b07      	ldr	r3, [pc, #28]	; (8003ea4 <xTaskRemoveFromEventList+0x70>)
 8003e86:	3001      	adds	r0, #1
 8003e88:	6018      	str	r0, [r3, #0]
}
 8003e8a:	bd70      	pop	{r4, r5, r6, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003e8c:	0029      	movs	r1, r5
 8003e8e:	4806      	ldr	r0, [pc, #24]	; (8003ea8 <xTaskRemoveFromEventList+0x74>)
 8003e90:	e7ef      	b.n	8003e72 <xTaskRemoveFromEventList+0x3e>
 8003e92:	46c0      	nop			; (mov r8, r8)
 8003e94:	20000ce8 	.word	0x20000ce8
 8003e98:	20000cf0 	.word	0x20000cf0
 8003e9c:	20000c50 	.word	0x20000c50
 8003ea0:	20000c44 	.word	0x20000c44
 8003ea4:	20000d6c 	.word	0x20000d6c
 8003ea8:	20000d28 	.word	0x20000d28

08003eac <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003eac:	4b03      	ldr	r3, [pc, #12]	; (8003ebc <vTaskInternalSetTimeOutState+0x10>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003eb2:	4b03      	ldr	r3, [pc, #12]	; (8003ec0 <vTaskInternalSetTimeOutState+0x14>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	6043      	str	r3, [r0, #4]
}
 8003eb8:	4770      	bx	lr
 8003eba:	46c0      	nop			; (mov r8, r8)
 8003ebc:	20000d24 	.word	0x20000d24
 8003ec0:	20000d68 	.word	0x20000d68

08003ec4 <xTaskCheckForTimeOut>:
{
 8003ec4:	b570      	push	{r4, r5, r6, lr}
 8003ec6:	0005      	movs	r5, r0
 8003ec8:	000c      	movs	r4, r1
	configASSERT( pxTimeOut );
 8003eca:	2800      	cmp	r0, #0
 8003ecc:	d101      	bne.n	8003ed2 <xTaskCheckForTimeOut+0xe>
 8003ece:	b672      	cpsid	i
 8003ed0:	e7fe      	b.n	8003ed0 <xTaskCheckForTimeOut+0xc>
	configASSERT( pxTicksToWait );
 8003ed2:	2900      	cmp	r1, #0
 8003ed4:	d101      	bne.n	8003eda <xTaskCheckForTimeOut+0x16>
 8003ed6:	b672      	cpsid	i
 8003ed8:	e7fe      	b.n	8003ed8 <xTaskCheckForTimeOut+0x14>
	taskENTER_CRITICAL();
 8003eda:	f7ff f9bb 	bl	8003254 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8003ede:	4b10      	ldr	r3, [pc, #64]	; (8003f20 <xTaskCheckForTimeOut+0x5c>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003ee0:	6869      	ldr	r1, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
 8003ee2:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8003ee4:	6823      	ldr	r3, [r4, #0]
				xReturn = pdFALSE;
 8003ee6:	2600      	movs	r6, #0
			if( *pxTicksToWait == portMAX_DELAY )
 8003ee8:	1c58      	adds	r0, r3, #1
 8003eea:	d010      	beq.n	8003f0e <xTaskCheckForTimeOut+0x4a>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003eec:	480d      	ldr	r0, [pc, #52]	; (8003f24 <xTaskCheckForTimeOut+0x60>)
 8003eee:	682e      	ldr	r6, [r5, #0]
 8003ef0:	6800      	ldr	r0, [r0, #0]
 8003ef2:	4286      	cmp	r6, r0
 8003ef4:	d002      	beq.n	8003efc <xTaskCheckForTimeOut+0x38>
			xReturn = pdTRUE;
 8003ef6:	2601      	movs	r6, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003ef8:	428a      	cmp	r2, r1
 8003efa:	d208      	bcs.n	8003f0e <xTaskCheckForTimeOut+0x4a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003efc:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d209      	bcs.n	8003f16 <xTaskCheckForTimeOut+0x52>
			*pxTicksToWait -= xElapsedTime;
 8003f02:	1a9b      	subs	r3, r3, r2
 8003f04:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003f06:	0028      	movs	r0, r5
 8003f08:	f7ff ffd0 	bl	8003eac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003f0c:	2600      	movs	r6, #0
	taskEXIT_CRITICAL();
 8003f0e:	f7ff f9ad 	bl	800326c <vPortExitCritical>
}
 8003f12:	0030      	movs	r0, r6
 8003f14:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8003f16:	2300      	movs	r3, #0
			xReturn = pdTRUE;
 8003f18:	2601      	movs	r6, #1
			*pxTicksToWait = 0;
 8003f1a:	6023      	str	r3, [r4, #0]
 8003f1c:	e7f7      	b.n	8003f0e <xTaskCheckForTimeOut+0x4a>
 8003f1e:	46c0      	nop			; (mov r8, r8)
 8003f20:	20000d68 	.word	0x20000d68
 8003f24:	20000d24 	.word	0x20000d24

08003f28 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8003f28:	2201      	movs	r2, #1
 8003f2a:	4b01      	ldr	r3, [pc, #4]	; (8003f30 <vTaskMissedYield+0x8>)
 8003f2c:	601a      	str	r2, [r3, #0]
}
 8003f2e:	4770      	bx	lr
 8003f30:	20000d6c 	.word	0x20000d6c

08003f34 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8003f34:	4b05      	ldr	r3, [pc, #20]	; (8003f4c <xTaskGetSchedulerState+0x18>)
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003f36:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d004      	beq.n	8003f48 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f3e:	4b04      	ldr	r3, [pc, #16]	; (8003f50 <xTaskGetSchedulerState+0x1c>)
 8003f40:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 8003f42:	4243      	negs	r3, r0
 8003f44:	4158      	adcs	r0, r3
 8003f46:	0040      	lsls	r0, r0, #1
	}
 8003f48:	4770      	bx	lr
 8003f4a:	46c0      	nop			; (mov r8, r8)
 8003f4c:	20000d3c 	.word	0x20000d3c
 8003f50:	20000ce8 	.word	0x20000ce8

08003f54 <xTaskPriorityInherit>:
	{
 8003f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f56:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 8003f58:	d02e      	beq.n	8003fb8 <xTaskPriorityInherit+0x64>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003f5a:	4d1a      	ldr	r5, [pc, #104]	; (8003fc4 <xTaskPriorityInherit+0x70>)
 8003f5c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8003f5e:	682b      	ldr	r3, [r5, #0]
 8003f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f62:	4299      	cmp	r1, r3
 8003f64:	d222      	bcs.n	8003fac <xTaskPriorityInherit+0x58>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003f66:	6983      	ldr	r3, [r0, #24]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	db04      	blt.n	8003f76 <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f6c:	2207      	movs	r2, #7
 8003f6e:	682b      	ldr	r3, [r5, #0]
 8003f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f72:	1ad2      	subs	r2, r2, r3
 8003f74:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003f76:	2314      	movs	r3, #20
 8003f78:	434b      	muls	r3, r1
 8003f7a:	4f13      	ldr	r7, [pc, #76]	; (8003fc8 <xTaskPriorityInherit+0x74>)
 8003f7c:	6962      	ldr	r2, [r4, #20]
 8003f7e:	18fb      	adds	r3, r7, r3
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d11a      	bne.n	8003fba <xTaskPriorityInherit+0x66>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f84:	1d26      	adds	r6, r4, #4
 8003f86:	0030      	movs	r0, r6
 8003f88:	f7ff f8d4 	bl	8003134 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003f8c:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003f8e:	4a0f      	ldr	r2, [pc, #60]	; (8003fcc <xTaskPriorityInherit+0x78>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003f92:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003f94:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003f96:	428b      	cmp	r3, r1
 8003f98:	d900      	bls.n	8003f9c <xTaskPriorityInherit+0x48>
 8003f9a:	6013      	str	r3, [r2, #0]
 8003f9c:	2014      	movs	r0, #20
 8003f9e:	4358      	muls	r0, r3
 8003fa0:	0031      	movs	r1, r6
 8003fa2:	1838      	adds	r0, r7, r0
 8003fa4:	f7ff f8a3 	bl	80030ee <vListInsertEnd>
				xReturn = pdTRUE;
 8003fa8:	2001      	movs	r0, #1
 8003faa:	e005      	b.n	8003fb8 <xTaskPriorityInherit+0x64>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003fac:	682b      	ldr	r3, [r5, #0]
 8003fae:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8003fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb2:	4298      	cmp	r0, r3
 8003fb4:	4180      	sbcs	r0, r0
 8003fb6:	4240      	negs	r0, r0
	}
 8003fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003fba:	682b      	ldr	r3, [r5, #0]
 8003fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fbe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003fc0:	e7f2      	b.n	8003fa8 <xTaskPriorityInherit+0x54>
 8003fc2:	46c0      	nop			; (mov r8, r8)
 8003fc4:	20000c44 	.word	0x20000c44
 8003fc8:	20000c50 	.word	0x20000c50
 8003fcc:	20000cf0 	.word	0x20000cf0

08003fd0 <xTaskPriorityDisinherit>:
	{
 8003fd0:	b570      	push	{r4, r5, r6, lr}
 8003fd2:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 8003fd4:	d101      	bne.n	8003fda <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8003fd6:	2000      	movs	r0, #0
	}
 8003fd8:	bd70      	pop	{r4, r5, r6, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8003fda:	4b15      	ldr	r3, [pc, #84]	; (8004030 <xTaskPriorityDisinherit+0x60>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4298      	cmp	r0, r3
 8003fe0:	d001      	beq.n	8003fe6 <xTaskPriorityDisinherit+0x16>
 8003fe2:	b672      	cpsid	i
 8003fe4:	e7fe      	b.n	8003fe4 <xTaskPriorityDisinherit+0x14>
			configASSERT( pxTCB->uxMutexesHeld );
 8003fe6:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d101      	bne.n	8003ff0 <xTaskPriorityDisinherit+0x20>
 8003fec:	b672      	cpsid	i
 8003fee:	e7fe      	b.n	8003fee <xTaskPriorityDisinherit+0x1e>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003ff0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8003ff2:	6c41      	ldr	r1, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003ff8:	428a      	cmp	r2, r1
 8003ffa:	d0ec      	beq.n	8003fd6 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1ea      	bne.n	8003fd6 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004000:	1d05      	adds	r5, r0, #4
 8004002:	0028      	movs	r0, r5
 8004004:	f7ff f896 	bl	8003134 <uxListRemove>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004008:	2307      	movs	r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800400a:	6c60      	ldr	r0, [r4, #68]	; 0x44
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800400c:	1a1b      	subs	r3, r3, r0
 800400e:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8004010:	4b08      	ldr	r3, [pc, #32]	; (8004034 <xTaskPriorityDisinherit+0x64>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004012:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	4290      	cmp	r0, r2
 8004018:	d900      	bls.n	800401c <xTaskPriorityDisinherit+0x4c>
 800401a:	6018      	str	r0, [r3, #0]
 800401c:	2314      	movs	r3, #20
 800401e:	4343      	muls	r3, r0
 8004020:	4805      	ldr	r0, [pc, #20]	; (8004038 <xTaskPriorityDisinherit+0x68>)
 8004022:	0029      	movs	r1, r5
 8004024:	18c0      	adds	r0, r0, r3
 8004026:	f7ff f862 	bl	80030ee <vListInsertEnd>
					xReturn = pdTRUE;
 800402a:	2001      	movs	r0, #1
		return xReturn;
 800402c:	e7d4      	b.n	8003fd8 <xTaskPriorityDisinherit+0x8>
 800402e:	46c0      	nop			; (mov r8, r8)
 8004030:	20000c44 	.word	0x20000c44
 8004034:	20000cf0 	.word	0x20000cf0
 8004038:	20000c50 	.word	0x20000c50

0800403c <vTaskPriorityDisinheritAfterTimeout>:
	{
 800403c:	b570      	push	{r4, r5, r6, lr}
 800403e:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 8004040:	d031      	beq.n	80040a6 <vTaskPriorityDisinheritAfterTimeout+0x6a>
			configASSERT( pxTCB->uxMutexesHeld );
 8004042:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8004044:	2b00      	cmp	r3, #0
 8004046:	d101      	bne.n	800404c <vTaskPriorityDisinheritAfterTimeout+0x10>
 8004048:	b672      	cpsid	i
 800404a:	e7fe      	b.n	800404a <vTaskPriorityDisinheritAfterTimeout+0xe>
 800404c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800404e:	428a      	cmp	r2, r1
 8004050:	d200      	bcs.n	8004054 <vTaskPriorityDisinheritAfterTimeout+0x18>
 8004052:	000a      	movs	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004054:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004056:	4290      	cmp	r0, r2
 8004058:	d025      	beq.n	80040a6 <vTaskPriorityDisinheritAfterTimeout+0x6a>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800405a:	2b01      	cmp	r3, #1
 800405c:	d123      	bne.n	80040a6 <vTaskPriorityDisinheritAfterTimeout+0x6a>
					configASSERT( pxTCB != pxCurrentTCB );
 800405e:	4b12      	ldr	r3, [pc, #72]	; (80040a8 <vTaskPriorityDisinheritAfterTimeout+0x6c>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	429c      	cmp	r4, r3
 8004064:	d101      	bne.n	800406a <vTaskPriorityDisinheritAfterTimeout+0x2e>
 8004066:	b672      	cpsid	i
 8004068:	e7fe      	b.n	8004068 <vTaskPriorityDisinheritAfterTimeout+0x2c>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800406a:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
 800406c:	62e2      	str	r2, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800406e:	2b00      	cmp	r3, #0
 8004070:	db02      	blt.n	8004078 <vTaskPriorityDisinheritAfterTimeout+0x3c>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004072:	2107      	movs	r1, #7
 8004074:	1a8a      	subs	r2, r1, r2
 8004076:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004078:	2314      	movs	r3, #20
 800407a:	4343      	muls	r3, r0
 800407c:	4e0b      	ldr	r6, [pc, #44]	; (80040ac <vTaskPriorityDisinheritAfterTimeout+0x70>)
 800407e:	6962      	ldr	r2, [r4, #20]
 8004080:	18f3      	adds	r3, r6, r3
 8004082:	429a      	cmp	r2, r3
 8004084:	d10f      	bne.n	80040a6 <vTaskPriorityDisinheritAfterTimeout+0x6a>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004086:	1d25      	adds	r5, r4, #4
 8004088:	0028      	movs	r0, r5
 800408a:	f7ff f853 	bl	8003134 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800408e:	4a08      	ldr	r2, [pc, #32]	; (80040b0 <vTaskPriorityDisinheritAfterTimeout+0x74>)
 8004090:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004092:	6811      	ldr	r1, [r2, #0]
 8004094:	428b      	cmp	r3, r1
 8004096:	d900      	bls.n	800409a <vTaskPriorityDisinheritAfterTimeout+0x5e>
 8004098:	6013      	str	r3, [r2, #0]
 800409a:	2014      	movs	r0, #20
 800409c:	4358      	muls	r0, r3
 800409e:	0029      	movs	r1, r5
 80040a0:	1830      	adds	r0, r6, r0
 80040a2:	f7ff f824 	bl	80030ee <vListInsertEnd>
	}
 80040a6:	bd70      	pop	{r4, r5, r6, pc}
 80040a8:	20000c44 	.word	0x20000c44
 80040ac:	20000c50 	.word	0x20000c50
 80040b0:	20000cf0 	.word	0x20000cf0

080040b4 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80040b4:	4b04      	ldr	r3, [pc, #16]	; (80040c8 <pvTaskIncrementMutexHeldCount+0x14>)
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	2a00      	cmp	r2, #0
 80040ba:	d003      	beq.n	80040c4 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 80040bc:	6819      	ldr	r1, [r3, #0]
 80040be:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 80040c0:	3201      	adds	r2, #1
 80040c2:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 80040c4:	6818      	ldr	r0, [r3, #0]
	}
 80040c6:	4770      	bx	lr
 80040c8:	20000c44 	.word	0x20000c44

080040cc <I2C_Transfer>:
/**
 * @brief Performs an I2C transfer
 * @param pData Pointer to location of data to transfer
 * @param size Size of data to be transferred
 */
void I2C_Transfer(uint8_t *pData, uint16_t size) {
 80040cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040ce:	9101      	str	r1, [sp, #4]

	if ( xSemaphoreTake( xTxMutex_Regulator, cmdMAX_MUTEX_WAIT ) == pdPASS) {
 80040d0:	2196      	movs	r1, #150	; 0x96
 80040d2:	4d18      	ldr	r5, [pc, #96]	; (8004134 <I2C_Transfer+0x68>)
void I2C_Transfer(uint8_t *pData, uint16_t size) {
 80040d4:	9000      	str	r0, [sp, #0]
	if ( xSemaphoreTake( xTxMutex_Regulator, cmdMAX_MUTEX_WAIT ) == pdPASS) {
 80040d6:	0049      	lsls	r1, r1, #1
 80040d8:	6828      	ldr	r0, [r5, #0]
 80040da:	f7ff fb48 	bl	800376e <xQueueSemaphoreTake>
 80040de:	2801      	cmp	r0, #1
 80040e0:	d127      	bne.n	8004132 <I2C_Transfer+0x66>
		do
		{
			TickType_t xtimeout_start = xTaskGetTickCount();
			while (HAL_I2C_Master_Transmit_DMA(&hi2c1, (uint16_t)BQ26703A_I2C_ADDRESS, pData, size) != HAL_OK) {
				if (((xTaskGetTickCount()-xtimeout_start)/portTICK_PERIOD_MS) > I2C_TIMEOUT) {
 80040e2:	26fa      	movs	r6, #250	; 0xfa
 80040e4:	0076      	lsls	r6, r6, #1
			TickType_t xtimeout_start = xTaskGetTickCount();
 80040e6:	f7ff fd57 	bl	8003b98 <xTaskGetTickCount>
 80040ea:	0007      	movs	r7, r0
			while (HAL_I2C_Master_Transmit_DMA(&hi2c1, (uint16_t)BQ26703A_I2C_ADDRESS, pData, size) != HAL_OK) {
 80040ec:	4c12      	ldr	r4, [pc, #72]	; (8004138 <I2C_Transfer+0x6c>)
 80040ee:	9b01      	ldr	r3, [sp, #4]
 80040f0:	9a00      	ldr	r2, [sp, #0]
 80040f2:	21d6      	movs	r1, #214	; 0xd6
 80040f4:	0020      	movs	r0, r4
 80040f6:	f7fc fdef 	bl	8000cd8 <HAL_I2C_Master_Transmit_DMA>
 80040fa:	2800      	cmp	r0, #0
 80040fc:	d004      	beq.n	8004108 <I2C_Transfer+0x3c>
				if (((xTaskGetTickCount()-xtimeout_start)/portTICK_PERIOD_MS) > I2C_TIMEOUT) {
 80040fe:	f7ff fd4b 	bl	8003b98 <xTaskGetTickCount>
 8004102:	1bc0      	subs	r0, r0, r7
 8004104:	42b0      	cmp	r0, r6
 8004106:	d9f1      	bls.n	80040ec <I2C_Transfer+0x20>
					//Set_Error_State(REGULATOR_COMMUNICATION_ERROR);
					break;
				}
			}
		    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8004108:	0020      	movs	r0, r4
 800410a:	f7fd fbfd 	bl	8001908 <HAL_I2C_GetState>
 800410e:	2820      	cmp	r0, #32
 8004110:	d004      	beq.n	800411c <I2C_Transfer+0x50>
				if (((xTaskGetTickCount()-xtimeout_start)/portTICK_PERIOD_MS) > I2C_TIMEOUT) {
 8004112:	f7ff fd41 	bl	8003b98 <xTaskGetTickCount>
 8004116:	1bc0      	subs	r0, r0, r7
 8004118:	42b0      	cmp	r0, r6
 800411a:	d9f5      	bls.n	8004108 <I2C_Transfer+0x3c>
					//Set_Error_State(REGULATOR_COMMUNICATION_ERROR);
					break;
				}
		    }
		}
		while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800411c:	0020      	movs	r0, r4
 800411e:	f7fd fbf7 	bl	8001910 <HAL_I2C_GetError>
 8004122:	2804      	cmp	r0, #4
 8004124:	d0df      	beq.n	80040e6 <I2C_Transfer+0x1a>
		xSemaphoreGive(xTxMutex_Regulator);
 8004126:	2300      	movs	r3, #0
 8004128:	6828      	ldr	r0, [r5, #0]
 800412a:	001a      	movs	r2, r3
 800412c:	0019      	movs	r1, r3
 800412e:	f7ff fa7d 	bl	800362c <xQueueGenericSend>
	}
}
 8004132:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004134:	20000f2c 	.word	0x20000f2c
 8004138:	20000df8 	.word	0x20000df8

0800413c <I2C_Receive>:
/**
 * @brief Performs an I2C transfer
 * @param pData Pointer to location to store received data
 * @param size Size of data to be received
 */
void I2C_Receive(uint8_t *pData, uint16_t size) {
 800413c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800413e:	9101      	str	r1, [sp, #4]
	if ( xSemaphoreTake( xTxMutex_Regulator, cmdMAX_MUTEX_WAIT ) == pdPASS) {
 8004140:	2196      	movs	r1, #150	; 0x96
 8004142:	4d18      	ldr	r5, [pc, #96]	; (80041a4 <I2C_Receive+0x68>)
void I2C_Receive(uint8_t *pData, uint16_t size) {
 8004144:	9000      	str	r0, [sp, #0]
	if ( xSemaphoreTake( xTxMutex_Regulator, cmdMAX_MUTEX_WAIT ) == pdPASS) {
 8004146:	0049      	lsls	r1, r1, #1
 8004148:	6828      	ldr	r0, [r5, #0]
 800414a:	f7ff fb10 	bl	800376e <xQueueSemaphoreTake>
 800414e:	2801      	cmp	r0, #1
 8004150:	d127      	bne.n	80041a2 <I2C_Receive+0x66>
		do
		{
			TickType_t xtimeout_start = xTaskGetTickCount();
			while (HAL_I2C_Master_Receive_DMA(&hi2c1, (uint16_t)BQ26703A_I2C_ADDRESS, pData, size) != HAL_OK) {
				if (((xTaskGetTickCount()-xtimeout_start)/portTICK_PERIOD_MS) > I2C_TIMEOUT) {
 8004152:	26fa      	movs	r6, #250	; 0xfa
 8004154:	0076      	lsls	r6, r6, #1
			TickType_t xtimeout_start = xTaskGetTickCount();
 8004156:	f7ff fd1f 	bl	8003b98 <xTaskGetTickCount>
 800415a:	0007      	movs	r7, r0
			while (HAL_I2C_Master_Receive_DMA(&hi2c1, (uint16_t)BQ26703A_I2C_ADDRESS, pData, size) != HAL_OK) {
 800415c:	4c12      	ldr	r4, [pc, #72]	; (80041a8 <I2C_Receive+0x6c>)
 800415e:	9b01      	ldr	r3, [sp, #4]
 8004160:	9a00      	ldr	r2, [sp, #0]
 8004162:	21d6      	movs	r1, #214	; 0xd6
 8004164:	0020      	movs	r0, r4
 8004166:	f7fc fe53 	bl	8000e10 <HAL_I2C_Master_Receive_DMA>
 800416a:	2800      	cmp	r0, #0
 800416c:	d004      	beq.n	8004178 <I2C_Receive+0x3c>
				if (((xTaskGetTickCount()-xtimeout_start)/portTICK_PERIOD_MS) > I2C_TIMEOUT) {
 800416e:	f7ff fd13 	bl	8003b98 <xTaskGetTickCount>
 8004172:	1bc0      	subs	r0, r0, r7
 8004174:	42b0      	cmp	r0, r6
 8004176:	d9f1      	bls.n	800415c <I2C_Receive+0x20>
					//Set_Error_State(REGULATOR_COMMUNICATION_ERROR);
					break;
				}
			}
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8004178:	0020      	movs	r0, r4
 800417a:	f7fd fbc5 	bl	8001908 <HAL_I2C_GetState>
 800417e:	2820      	cmp	r0, #32
 8004180:	d004      	beq.n	800418c <I2C_Receive+0x50>
				if (((xTaskGetTickCount()-xtimeout_start)/portTICK_PERIOD_MS) > I2C_TIMEOUT) {
 8004182:	f7ff fd09 	bl	8003b98 <xTaskGetTickCount>
 8004186:	1bc0      	subs	r0, r0, r7
 8004188:	42b0      	cmp	r0, r6
 800418a:	d9f5      	bls.n	8004178 <I2C_Receive+0x3c>
					//Set_Error_State(REGULATOR_COMMUNICATION_ERROR);
					break;
				}
			}
		}
		while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800418c:	0020      	movs	r0, r4
 800418e:	f7fd fbbf 	bl	8001910 <HAL_I2C_GetError>
 8004192:	2804      	cmp	r0, #4
 8004194:	d0df      	beq.n	8004156 <I2C_Receive+0x1a>
		xSemaphoreGive(xTxMutex_Regulator);
 8004196:	2300      	movs	r3, #0
 8004198:	6828      	ldr	r0, [r5, #0]
 800419a:	001a      	movs	r2, r3
 800419c:	0019      	movs	r1, r3
 800419e:	f7ff fa45 	bl	800362c <xQueueGenericSend>
	}
}
 80041a2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80041a4:	20000f2c 	.word	0x20000f2c
 80041a8:	20000df8 	.word	0x20000df8

080041ac <I2C_Write_Register>:

/**
 * @brief Automatically performs two I2C writes to write a register on the regulator
 * @param pData Pointer to data to be transferred
 */
void I2C_Write_Register(uint8_t addr_to_write, uint8_t *pData) {
 80041ac:	b507      	push	{r0, r1, r2, lr}
	uint8_t data[2];
	data[0] = addr_to_write;
 80041ae:	ab01      	add	r3, sp, #4
	data[1] = *pData;
 80041b0:	780a      	ldrb	r2, [r1, #0]
	data[0] = addr_to_write;
 80041b2:	7018      	strb	r0, [r3, #0]
	I2C_Transfer(data, 2);
 80041b4:	2102      	movs	r1, #2
 80041b6:	0018      	movs	r0, r3
	data[1] = *pData;
 80041b8:	705a      	strb	r2, [r3, #1]
	I2C_Transfer(data, 2);
 80041ba:	f7ff ff87 	bl	80040cc <I2C_Transfer>
}
 80041be:	bd07      	pop	{r0, r1, r2, pc}

080041c0 <I2C_Write_Two_Byte_Register>:
/**
 * @brief Automatically performs three I2C writes to write a two byte register on the regulator
 * @param lsb_data Pointer to least significant byte of data to be transferred
 * @param msb_data Pointer to most significant byte of data to be transferred
 */
void I2C_Write_Two_Byte_Register(uint8_t addr_to_write, uint8_t lsb_data, uint8_t msb_data) {
 80041c0:	b507      	push	{r0, r1, r2, lr}

	uint8_t data[3];
	data[0] = addr_to_write;
 80041c2:	ab01      	add	r3, sp, #4
 80041c4:	7018      	strb	r0, [r3, #0]
	data[1] = lsb_data;
 80041c6:	7059      	strb	r1, [r3, #1]
	data[2] = msb_data;

	I2C_Transfer(data, 3);
 80041c8:	0018      	movs	r0, r3
 80041ca:	2103      	movs	r1, #3
	data[2] = msb_data;
 80041cc:	709a      	strb	r2, [r3, #2]
	I2C_Transfer(data, 3);
 80041ce:	f7ff ff7d 	bl	80040cc <I2C_Transfer>
}
 80041d2:	bd07      	pop	{r0, r1, r2, pc}

080041d4 <I2C_Read_Register>:

/**
 * @brief Automatically performs one I2C write and an I2C read to get the value of a register
 * @param pData Pointer to where to store data
 */
void I2C_Read_Register(uint8_t addr_to_read, uint8_t *pData, uint16_t size) {
 80041d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80041d6:	466b      	mov	r3, sp
 80041d8:	0015      	movs	r5, r2
 80041da:	000c      	movs	r4, r1
 80041dc:	71d8      	strb	r0, [r3, #7]
 80041de:	3307      	adds	r3, #7
		I2C_Transfer((uint8_t *)&addr_to_read, 1);
 80041e0:	0018      	movs	r0, r3
 80041e2:	2101      	movs	r1, #1
 80041e4:	f7ff ff72 	bl	80040cc <I2C_Transfer>
		I2C_Receive(pData, size);
 80041e8:	0029      	movs	r1, r5
 80041ea:	0020      	movs	r0, r4
 80041ec:	f7ff ffa6 	bl	800413c <I2C_Receive>
}
 80041f0:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

080041f2 <Query_Regulator_Connection>:

/**
 * @brief Checks if the regulator is connected over I2C
 * @retval uint8_t CONNECTED or NOT_CONNECTED
 */
uint8_t Query_Regulator_Connection() {
 80041f2:	b507      	push	{r0, r1, r2, lr}
	/* Get the manufacturer id */
	uint8_t manufacturer_id;
	I2C_Read_Register(MANUFACTURER_ID_ADDR, (uint8_t *) &manufacturer_id, 1);
 80041f4:	466b      	mov	r3, sp
 80041f6:	2201      	movs	r2, #1
 80041f8:	1d99      	adds	r1, r3, #6
 80041fa:	202e      	movs	r0, #46	; 0x2e
 80041fc:	f7ff ffea 	bl	80041d4 <I2C_Read_Register>

	/* Get the device id */
	uint8_t device_id;
	I2C_Read_Register(DEVICE_ID_ADDR, (uint8_t *) &device_id, 1);
 8004200:	466b      	mov	r3, sp
 8004202:	202f      	movs	r0, #47	; 0x2f
 8004204:	2201      	movs	r2, #1
 8004206:	1dd9      	adds	r1, r3, #7
 8004208:	f7ff ffe4 	bl	80041d4 <I2C_Read_Register>
	else {
		//Set_Error_State(REGULATOR_COMMUNICATION_ERROR);
		//return NOT_CONNECTED;
	}
	return 1;
}
 800420c:	2001      	movs	r0, #1
 800420e:	bd0e      	pop	{r1, r2, r3, pc}

08004210 <Read_Charge_Status>:
}

/**
 * @brief Reads ChargeStatus register and sets status
 */
void Read_Charge_Status() {
 8004210:	b513      	push	{r0, r1, r4, lr}
	uint8_t data[2];
	I2C_Read_Register(CHARGE_STATUS_ADDR, data, 2);
 8004212:	ac01      	add	r4, sp, #4
 8004214:	2202      	movs	r2, #2
 8004216:	0021      	movs	r1, r4
 8004218:	2020      	movs	r0, #32
 800421a:	f7ff ffdb 	bl	80041d4 <I2C_Read_Register>

	if (data[1] & CHARGING_ENABLED_MASK) {
 800421e:	2204      	movs	r2, #4
 8004220:	7863      	ldrb	r3, [r4, #1]
 8004222:	4013      	ands	r3, r2
 8004224:	4a02      	ldr	r2, [pc, #8]	; (8004230 <Read_Charge_Status+0x20>)
 8004226:	d000      	beq.n	800422a <Read_Charge_Status+0x1a>
		regulator.charging_status = 1;
 8004228:	2301      	movs	r3, #1
	}
	else {
		regulator.charging_status = 0;
 800422a:	7053      	strb	r3, [r2, #1]
	}
}
 800422c:	bd13      	pop	{r0, r1, r4, pc}
 800422e:	46c0      	nop			; (mov r8, r8)
 8004230:	20000d78 	.word	0x20000d78

08004234 <Regulator_Set_ADC_Option>:

/**
 * @brief Sets the Regulators ADC settings
 */
void Regulator_Set_ADC_Option() {
 8004234:	b507      	push	{r0, r1, r2, lr}

	uint8_t ADC_lsb_3A = ADC_ENABLED_BITMASK;
 8004236:	466b      	mov	r3, sp
 8004238:	1dd9      	adds	r1, r3, #7
 800423a:	2357      	movs	r3, #87	; 0x57

	I2C_Write_Register(ADC_OPTION_ADDR, (uint8_t *) &ADC_lsb_3A);
 800423c:	203a      	movs	r0, #58	; 0x3a
	uint8_t ADC_lsb_3A = ADC_ENABLED_BITMASK;
 800423e:	700b      	strb	r3, [r1, #0]
	I2C_Write_Register(ADC_OPTION_ADDR, (uint8_t *) &ADC_lsb_3A);
 8004240:	f7ff ffb4 	bl	80041ac <I2C_Write_Register>
}
 8004244:	bd07      	pop	{r0, r1, r2, pc}
	...

08004248 <Regulator_Read_ADC>:

/**
 * @brief Initiates and reads a single ADC conversion on the regulator
 */
void Regulator_Read_ADC() {
 8004248:	b573      	push	{r0, r1, r4, r5, r6, lr}
	TickType_t xDelay = 80 / portTICK_PERIOD_MS;

	uint8_t ADC_msb_3B = ADC_START_CONVERSION_MASK;
 800424a:	466b      	mov	r3, sp
 800424c:	1d9c      	adds	r4, r3, #6
 800424e:	2360      	movs	r3, #96	; 0x60

	I2C_Write_Register((ADC_OPTION_ADDR+1), (uint8_t *) &ADC_msb_3B);
 8004250:	0021      	movs	r1, r4
 8004252:	203b      	movs	r0, #59	; 0x3b
	uint8_t ADC_msb_3B = ADC_START_CONVERSION_MASK;
 8004254:	7023      	strb	r3, [r4, #0]

	/* Wait for the conversion to finish */
	while (ADC_msb_3B & (1<<6)) {
 8004256:	2540      	movs	r5, #64	; 0x40
	I2C_Write_Register((ADC_OPTION_ADDR+1), (uint8_t *) &ADC_msb_3B);
 8004258:	f7ff ffa8 	bl	80041ac <I2C_Write_Register>
	while (ADC_msb_3B & (1<<6)) {
 800425c:	7823      	ldrb	r3, [r4, #0]
 800425e:	402b      	ands	r3, r5
 8004260:	d135      	bne.n	80042ce <Regulator_Read_ADC+0x86>
		vTaskDelay(xDelay);
		I2C_Read_Register((ADC_OPTION_ADDR+1), (uint8_t *) &ADC_msb_3B, 1);
	}

	uint8_t temp = 0;
 8004262:	466a      	mov	r2, sp

	I2C_Read_Register(VBAT_ADC_ADDR, (uint8_t *) &temp, 1);
	regulator.vbat_voltage = (temp * VBAT_ADC_SCALE) + VBAT_ADC_OFFSET;
 8004264:	25c8      	movs	r5, #200	; 0xc8
	uint8_t temp = 0;
 8004266:	1dd4      	adds	r4, r2, #7
 8004268:	71d3      	strb	r3, [r2, #7]
	I2C_Read_Register(VBAT_ADC_ADDR, (uint8_t *) &temp, 1);
 800426a:	0021      	movs	r1, r4
 800426c:	2201      	movs	r2, #1
 800426e:	202c      	movs	r0, #44	; 0x2c
 8004270:	f7ff ffb0 	bl	80041d4 <I2C_Read_Register>
	regulator.vbat_voltage = (temp * VBAT_ADC_SCALE) + VBAT_ADC_OFFSET;
 8004274:	7823      	ldrb	r3, [r4, #0]
 8004276:	016d      	lsls	r5, r5, #5
 8004278:	436b      	muls	r3, r5
 800427a:	4a19      	ldr	r2, [pc, #100]	; (80042e0 <Regulator_Read_ADC+0x98>)
 800427c:	4e19      	ldr	r6, [pc, #100]	; (80042e4 <Regulator_Read_ADC+0x9c>)
 800427e:	189b      	adds	r3, r3, r2

	I2C_Read_Register(VSYS_ADC_ADDR, (uint8_t *) &temp, 1);
 8004280:	0021      	movs	r1, r4
 8004282:	2201      	movs	r2, #1
 8004284:	202d      	movs	r0, #45	; 0x2d
	regulator.vbat_voltage = (temp * VBAT_ADC_SCALE) + VBAT_ADC_OFFSET;
 8004286:	60f3      	str	r3, [r6, #12]
	I2C_Read_Register(VSYS_ADC_ADDR, (uint8_t *) &temp, 1);
 8004288:	f7ff ffa4 	bl	80041d4 <I2C_Read_Register>
	regulator.vsys_voltage = (temp * VSYS_ADC_SCALE) + VSYS_ADC_OFFSET;
 800428c:	7823      	ldrb	r3, [r4, #0]
 800428e:	4a14      	ldr	r2, [pc, #80]	; (80042e0 <Regulator_Read_ADC+0x98>)
 8004290:	436b      	muls	r3, r5

	I2C_Read_Register(ICHG_ADC_ADDR, (uint8_t *) &temp, 1);
 8004292:	0021      	movs	r1, r4
	regulator.vsys_voltage = (temp * VSYS_ADC_SCALE) + VSYS_ADC_OFFSET;
 8004294:	189b      	adds	r3, r3, r2
	I2C_Read_Register(ICHG_ADC_ADDR, (uint8_t *) &temp, 1);
 8004296:	2029      	movs	r0, #41	; 0x29
 8004298:	2201      	movs	r2, #1
	regulator.vsys_voltage = (temp * VSYS_ADC_SCALE) + VSYS_ADC_OFFSET;
 800429a:	6133      	str	r3, [r6, #16]
	I2C_Read_Register(ICHG_ADC_ADDR, (uint8_t *) &temp, 1);
 800429c:	f7ff ff9a 	bl	80041d4 <I2C_Read_Register>
	regulator.charge_current = temp * ICHG_ADC_SCALE;
 80042a0:	7823      	ldrb	r3, [r4, #0]

	I2C_Read_Register(IIN_ADC_ADDR, (uint8_t *) &temp, 1);
 80042a2:	0021      	movs	r1, r4
	regulator.charge_current = temp * ICHG_ADC_SCALE;
 80042a4:	436b      	muls	r3, r5
	I2C_Read_Register(IIN_ADC_ADDR, (uint8_t *) &temp, 1);
 80042a6:	2201      	movs	r2, #1
 80042a8:	202b      	movs	r0, #43	; 0x2b
	regulator.charge_current = temp * ICHG_ADC_SCALE;
 80042aa:	6173      	str	r3, [r6, #20]
	I2C_Read_Register(IIN_ADC_ADDR, (uint8_t *) &temp, 1);
 80042ac:	f7ff ff92 	bl	80041d4 <I2C_Read_Register>
	regulator.input_current = temp * IIN_ADC_SCALE;
 80042b0:	7822      	ldrb	r2, [r4, #0]
 80042b2:	4b0d      	ldr	r3, [pc, #52]	; (80042e8 <Regulator_Read_ADC+0xa0>)

	I2C_Read_Register(VBUS_ADC_ADDR, (uint8_t *) &temp, 1);
 80042b4:	0021      	movs	r1, r4
	regulator.input_current = temp * IIN_ADC_SCALE;
 80042b6:	4353      	muls	r3, r2
	I2C_Read_Register(VBUS_ADC_ADDR, (uint8_t *) &temp, 1);
 80042b8:	2027      	movs	r0, #39	; 0x27
 80042ba:	2201      	movs	r2, #1
	regulator.input_current = temp * IIN_ADC_SCALE;
 80042bc:	61b3      	str	r3, [r6, #24]
	I2C_Read_Register(VBUS_ADC_ADDR, (uint8_t *) &temp, 1);
 80042be:	f7ff ff89 	bl	80041d4 <I2C_Read_Register>
	regulator.vbus_voltage = (temp * VBUS_ADC_SCALE) + VBUS_ADC_OFFSET;
 80042c2:	7823      	ldrb	r3, [r4, #0]
 80042c4:	435d      	muls	r5, r3
 80042c6:	4b09      	ldr	r3, [pc, #36]	; (80042ec <Regulator_Read_ADC+0xa4>)
 80042c8:	18ed      	adds	r5, r5, r3
 80042ca:	60b5      	str	r5, [r6, #8]
}
 80042cc:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
		vTaskDelay(xDelay);
 80042ce:	2050      	movs	r0, #80	; 0x50
 80042d0:	f7ff fd4e 	bl	8003d70 <vTaskDelay>
		I2C_Read_Register((ADC_OPTION_ADDR+1), (uint8_t *) &ADC_msb_3B, 1);
 80042d4:	2201      	movs	r2, #1
 80042d6:	0021      	movs	r1, r4
 80042d8:	203b      	movs	r0, #59	; 0x3b
 80042da:	f7ff ff7b 	bl	80041d4 <I2C_Read_Register>
 80042de:	e7bd      	b.n	800425c <Regulator_Read_ADC+0x14>
 80042e0:	00046500 	.word	0x00046500
 80042e4:	20000d78 	.word	0x20000d78
 80042e8:	00001388 	.word	0x00001388
 80042ec:	0004e200 	.word	0x0004e200

080042f0 <Regulator_HI_Z>:

/**
 * @brief Enables or disables high impedance mode on the output of the regulator
 * @param hi_z_en 1 puts the output of the regulator in hiz mode. 0 takes the regulator out of hi_z and allows charging
 */
void Regulator_HI_Z(uint8_t hi_z_en) {
 80042f0:	b510      	push	{r4, lr}
	if (hi_z_en == 1) {
		HAL_GPIO_WritePin(ILIM_HIZ_GPIO_Port, ILIM_HIZ_Pin, GPIO_PIN_RESET);
 80042f2:	2200      	movs	r2, #0
	if (hi_z_en == 1) {
 80042f4:	2801      	cmp	r0, #1
 80042f6:	d000      	beq.n	80042fa <Regulator_HI_Z+0xa>
	}
	else {
		HAL_GPIO_WritePin(ILIM_HIZ_GPIO_Port, ILIM_HIZ_Pin, GPIO_PIN_SET);
 80042f8:	2201      	movs	r2, #1
 80042fa:	2180      	movs	r1, #128	; 0x80
 80042fc:	4802      	ldr	r0, [pc, #8]	; (8004308 <Regulator_HI_Z+0x18>)
 80042fe:	0109      	lsls	r1, r1, #4
 8004300:	f7fc fc06 	bl	8000b10 <HAL_GPIO_WritePin>
	}
}
 8004304:	bd10      	pop	{r4, pc}
 8004306:	46c0      	nop			; (mov r8, r8)
 8004308:	50000400 	.word	0x50000400

0800430c <Regulator_Set_Charge_Option_0>:
}

/**
 * @brief Sets Charge Option 0 Based on #defines in header
 */
void Regulator_Set_Charge_Option_0() {
 800430c:	b510      	push	{r4, lr}

	uint8_t charge_option_0_register_1_value = 0b00100110;
	uint8_t charge_option_0_register_2_value = 0b00001110;

	I2C_Write_Two_Byte_Register(CHARGE_OPTION_0_ADDR, charge_option_0_register_2_value, charge_option_0_register_1_value);
 800430e:	2226      	movs	r2, #38	; 0x26
 8004310:	210e      	movs	r1, #14
 8004312:	2000      	movs	r0, #0
 8004314:	f7ff ff54 	bl	80041c0 <I2C_Write_Two_Byte_Register>

	return;
}
 8004318:	bd10      	pop	{r4, pc}
	...

0800431c <Set_Charge_Current>:

/**
 * @brief Sets the charging current limit. From 64mA to 8.128A in 64mA steps. Maps from 0 - 128. 7 bit value.
 * @param charge_current_limit Charge current limit in mA
 */
void Set_Charge_Current(uint32_t charge_current_limit) {
 800431c:	4b08      	ldr	r3, [pc, #32]	; (8004340 <Set_Charge_Current+0x24>)
 800431e:	b510      	push	{r4, lr}
 8004320:	4298      	cmp	r0, r3
 8004322:	d900      	bls.n	8004326 <Set_Charge_Current+0xa>
 8004324:	0018      	movs	r0, r3

	if (charge_current_limit > MAX_CHARGE_CURRENT_MA) {
		charge_current_limit = MAX_CHARGE_CURRENT_MA;
	}

	regulator.max_charge_current_ma = charge_current_limit;
 8004326:	4b07      	ldr	r3, [pc, #28]	; (8004344 <Set_Charge_Current+0x28>)
 8004328:	61d8      	str	r0, [r3, #28]

	if (charge_current_limit != 0){
 800432a:	2800      	cmp	r0, #0
 800432c:	d000      	beq.n	8004330 <Set_Charge_Current+0x14>
		charge_current = charge_current_limit/64;
 800432e:	0980      	lsrs	r0, r0, #6
	//0-128 which remaps from 64mA-8.128A. 7 bit value.
	uint8_t charge_current_register_1_value = 0;
	uint8_t charge_current_register_2_value = 0;

	if ((charge_current >= 0) || (charge_current <= 128)) {
		charge_current_register_1_value = (charge_current >> 2);
 8004330:	0882      	lsrs	r2, r0, #2
		charge_current_register_2_value = (charge_current << 6);
 8004332:	0180      	lsls	r0, r0, #6
	}

	I2C_Write_Two_Byte_Register(CHARGE_CURRENT_ADDR, charge_current_register_2_value, charge_current_register_1_value);
 8004334:	b2c1      	uxtb	r1, r0
 8004336:	b2d2      	uxtb	r2, r2
 8004338:	2002      	movs	r0, #2
 800433a:	f7ff ff41 	bl	80041c0 <I2C_Write_Two_Byte_Register>

	return;
}
 800433e:	bd10      	pop	{r4, pc}
 8004340:	00001770 	.word	0x00001770
 8004344:	20000d78 	.word	0x20000d78

08004348 <Set_Charge_Voltage>:

/**
 * @brief Sets the charging voltage based on the number of cells. 1 - 4.192V, 2 - 8.400V, 3 - 12.592V, 4 - 16.800V
 * @param number_of_cells number of cells connected
 */
void Set_Charge_Voltage(uint8_t number_of_cells) {
 8004348:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800434a:	466b      	mov	r3, sp
	uint8_t max_charge_register_2_value = 0;

	uint8_t	minimum_system_voltage_value = MIN_VOLT_ADD_1024_MV;

	if ((number_of_cells > 0) || (number_of_cells < 5)) {
		switch (number_of_cells) {
 800434c:	3801      	subs	r0, #1
 800434e:	1dd9      	adds	r1, r3, #7
 8004350:	2803      	cmp	r0, #3
 8004352:	d803      	bhi.n	800435c <Set_Charge_Voltage+0x14>
 8004354:	f7fb fed8 	bl	8000108 <__gnu_thumb1_case_uqi>
 8004358:	1e19140f 	.word	0x1e19140f
				max_charge_register_2_value = MAX_VOLT_ADD_128_MV | MAX_VOLT_ADD_32_MV;
				minimum_system_voltage_value = MIN_VOLT_ADD_8192_MV | MIN_VOLT_ADD_2048_MV | MIN_VOLT_ADD_1024_MV;
				break;
			default:
				max_charge_register_1_value = 0;
				max_charge_register_2_value = 0;
 800435c:	2400      	movs	r4, #0
	uint8_t	minimum_system_voltage_value = MIN_VOLT_ADD_1024_MV;
 800435e:	2304      	movs	r3, #4
				max_charge_register_1_value = 0;
 8004360:	0025      	movs	r5, r4
	uint8_t	minimum_system_voltage_value = MIN_VOLT_ADD_1024_MV;
 8004362:	700b      	strb	r3, [r1, #0]
				minimum_system_voltage_value = MIN_VOLT_ADD_1024_MV;
				break;
			}
	}

	I2C_Write_Register(MINIMUM_SYSTEM_VOLTAGE_ADDR, (uint8_t *) &minimum_system_voltage_value);
 8004364:	200d      	movs	r0, #13
 8004366:	f7ff ff21 	bl	80041ac <I2C_Write_Register>

	I2C_Write_Two_Byte_Register(MAX_CHARGE_VOLTAGE_ADDR, max_charge_register_2_value, max_charge_register_1_value);
 800436a:	002a      	movs	r2, r5
 800436c:	0021      	movs	r1, r4
 800436e:	2004      	movs	r0, #4
 8004370:	f7ff ff26 	bl	80041c0 <I2C_Write_Two_Byte_Register>

	return;
}
 8004374:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
				minimum_system_voltage_value = MIN_VOLT_ADD_2048_MV | MIN_VOLT_ADD_512_MV | MIN_VOLT_ADD_256_MV;
 8004376:	230b      	movs	r3, #11
				max_charge_register_2_value = MAX_VOLT_ADD_64_MV | MAX_VOLT_ADD_32_MV;
 8004378:	2460      	movs	r4, #96	; 0x60
				minimum_system_voltage_value = MIN_VOLT_ADD_2048_MV | MIN_VOLT_ADD_512_MV | MIN_VOLT_ADD_256_MV;
 800437a:	700b      	strb	r3, [r1, #0]
				max_charge_register_1_value = MAX_VOLT_ADD_4096_MV;
 800437c:	2510      	movs	r5, #16
				break;
 800437e:	e7f1      	b.n	8004364 <Set_Charge_Voltage+0x1c>
				minimum_system_voltage_value = MIN_VOLT_ADD_4096_MV | MIN_VOLT_ADD_1024_MV | MIN_VOLT_ADD_512_MV;
 8004380:	2316      	movs	r3, #22
				max_charge_register_2_value = MAX_VOLT_ADD_128_MV | MAX_VOLT_ADD_64_MV | MAX_VOLT_ADD_16_MV;
 8004382:	24d0      	movs	r4, #208	; 0xd0
				minimum_system_voltage_value = MIN_VOLT_ADD_4096_MV | MIN_VOLT_ADD_1024_MV | MIN_VOLT_ADD_512_MV;
 8004384:	700b      	strb	r3, [r1, #0]
				max_charge_register_1_value = MAX_VOLT_ADD_8192_MV;
 8004386:	2520      	movs	r5, #32
				break;
 8004388:	e7ec      	b.n	8004364 <Set_Charge_Voltage+0x1c>
				minimum_system_voltage_value = MIN_VOLT_ADD_8192_MV |  MIN_VOLT_ADD_256_MV;
 800438a:	2321      	movs	r3, #33	; 0x21
				max_charge_register_2_value = MAX_VOLT_ADD_32_MV | MAX_VOLT_ADD_16_MV;
 800438c:	2430      	movs	r4, #48	; 0x30
				minimum_system_voltage_value = MIN_VOLT_ADD_8192_MV |  MIN_VOLT_ADD_256_MV;
 800438e:	700b      	strb	r3, [r1, #0]
				max_charge_register_1_value = MAX_VOLT_ADD_8192_MV | MAX_VOLT_ADD_4096_MV | MAX_VOLT_ADD_256_MV;
 8004390:	2531      	movs	r5, #49	; 0x31
				break;
 8004392:	e7e7      	b.n	8004364 <Set_Charge_Voltage+0x1c>
				minimum_system_voltage_value = MIN_VOLT_ADD_8192_MV | MIN_VOLT_ADD_2048_MV | MIN_VOLT_ADD_1024_MV;
 8004394:	232c      	movs	r3, #44	; 0x2c
				max_charge_register_2_value = MAX_VOLT_ADD_128_MV | MAX_VOLT_ADD_32_MV;
 8004396:	24a0      	movs	r4, #160	; 0xa0
				minimum_system_voltage_value = MIN_VOLT_ADD_8192_MV | MIN_VOLT_ADD_2048_MV | MIN_VOLT_ADD_1024_MV;
 8004398:	700b      	strb	r3, [r1, #0]
				max_charge_register_1_value = MAX_VOLT_ADD_16384_MV | MAX_VOLT_ADD_256_MV;
 800439a:	2541      	movs	r5, #65	; 0x41
				break;
 800439c:	e7e2      	b.n	8004364 <Set_Charge_Voltage+0x1c>
	...

080043a0 <Control_Charger_Output>:

/**
 * @brief Determines if charger output should be on and sets voltage and current parameters as needed
 */
void Control_Charger_Output() {
 80043a0:	b510      	push	{r4, lr}

	Set_Charge_Voltage(4);
 80043a2:	2004      	movs	r0, #4
 80043a4:	f7ff ffd0 	bl	8004348 <Set_Charge_Voltage>

	//uint32_t charging_current_ma = ((Calculate_Max_Charge_Power()) / (float)(Get_Battery_Voltage() / BATTERY_ADC_MULTIPLIER));

	uint32_t charging_current_ma = 3000;

	Set_Charge_Current(charging_current_ma);
 80043a8:	4803      	ldr	r0, [pc, #12]	; (80043b8 <Control_Charger_Output+0x18>)
 80043aa:	f7ff ffb7 	bl	800431c <Set_Charge_Current>

	Regulator_HI_Z(0);
 80043ae:	2000      	movs	r0, #0
 80043b0:	f7ff ff9e 	bl	80042f0 <Regulator_HI_Z>
}
 80043b4:	bd10      	pop	{r4, pc}
 80043b6:	46c0      	nop			; (mov r8, r8)
 80043b8:	00000bb8 	.word	0x00000bb8

080043bc <vRegulator>:
		HAL_GPIO_WritePin(ILIM_HIZ_GPIO_Port, ILIM_HIZ_Pin, GPIO_PIN_RESET);
 80043bc:	2180      	movs	r1, #128	; 0x80

/**
 * @brief Main regulator task
 */
void vRegulator(void const *pvParameters) {
 80043be:	b510      	push	{r4, lr}
		HAL_GPIO_WritePin(ILIM_HIZ_GPIO_Port, ILIM_HIZ_Pin, GPIO_PIN_RESET);
 80043c0:	2200      	movs	r2, #0
 80043c2:	0109      	lsls	r1, r1, #4
 80043c4:	480c      	ldr	r0, [pc, #48]	; (80043f8 <vRegulator+0x3c>)
 80043c6:	f7fc fba3 	bl	8000b10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_OTG_GPIO_Port, EN_OTG_Pin, GPIO_PIN_RESET);
 80043ca:	2200      	movs	r2, #0
 80043cc:	2101      	movs	r1, #1
 80043ce:	480a      	ldr	r0, [pc, #40]	; (80043f8 <vRegulator+0x3c>)
 80043d0:	f7fc fb9e 	bl	8000b10 <HAL_GPIO_WritePin>

	/* Disable OTG mode */
	Regulator_OTG_EN(0);

	/* Check if the regulator is connected */
	regulator.connected = Query_Regulator_Connection();
 80043d4:	f7ff ff0d 	bl	80041f2 <Query_Regulator_Connection>
 80043d8:	4b08      	ldr	r3, [pc, #32]	; (80043fc <vRegulator+0x40>)
 80043da:	7018      	strb	r0, [r3, #0]

	/* Set Charge Option 0 */
	Regulator_Set_Charge_Option_0();
 80043dc:	f7ff ff96 	bl	800430c <Regulator_Set_Charge_Option_0>

	/* Setup the ADC on the Regulator */
	Regulator_Set_ADC_Option();
 80043e0:	f7ff ff28 	bl	8004234 <Regulator_Set_ADC_Option>

	for (;;) {

		Read_Charge_Status();
 80043e4:	f7ff ff14 	bl	8004210 <Read_Charge_Status>

		Regulator_Read_ADC();
 80043e8:	f7ff ff2e 	bl	8004248 <Regulator_Read_ADC>

		Control_Charger_Output();
 80043ec:	f7ff ffd8 	bl	80043a0 <Control_Charger_Output>

		vTaskDelay(xDelay);
 80043f0:	20fa      	movs	r0, #250	; 0xfa
 80043f2:	f7ff fcbd 	bl	8003d70 <vTaskDelay>
 80043f6:	e7f5      	b.n	80043e4 <vRegulator+0x28>
 80043f8:	50000400 	.word	0x50000400
 80043fc:	20000d78 	.word	0x20000d78

08004400 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8004400:	b510      	push	{r4, lr}

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8004402:	2001      	movs	r0, #1
 8004404:	f7fe fe5d 	bl	80030c2 <osDelay>
 8004408:	e7fb      	b.n	8004402 <StartDefaultTask+0x2>

0800440a <SystemClock_Config>:
{
 800440a:	b530      	push	{r4, r5, lr}
 800440c:	b0a1      	sub	sp, #132	; 0x84
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800440e:	2238      	movs	r2, #56	; 0x38
 8004410:	2100      	movs	r1, #0
 8004412:	a812      	add	r0, sp, #72	; 0x48
 8004414:	f000 faa7 	bl	8004966 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004418:	2210      	movs	r2, #16
 800441a:	2100      	movs	r1, #0
 800441c:	a801      	add	r0, sp, #4
 800441e:	f000 faa2 	bl	8004966 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004422:	2234      	movs	r2, #52	; 0x34
 8004424:	2100      	movs	r1, #0
 8004426:	a805      	add	r0, sp, #20
 8004428:	f000 fa9d 	bl	8004966 <memset>
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800442c:	2080      	movs	r0, #128	; 0x80
 800442e:	0080      	lsls	r0, r0, #2
 8004430:	f7fd faba 	bl	80019a8 <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004434:	2380      	movs	r3, #128	; 0x80
 8004436:	005b      	lsls	r3, r3, #1
 8004438:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800443a:	3bc0      	subs	r3, #192	; 0xc0
 800443c:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLN = 8;
 800443e:	3b38      	subs	r3, #56	; 0x38
 8004440:	931c      	str	r3, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004442:	2380      	movs	r3, #128	; 0x80
 8004444:	029b      	lsls	r3, r3, #10
 8004446:	931d      	str	r3, [sp, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004448:	2380      	movs	r3, #128	; 0x80
 800444a:	049b      	lsls	r3, r3, #18
 800444c:	931e      	str	r3, [sp, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800444e:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8004450:	2400      	movs	r4, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004452:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004454:	059b      	lsls	r3, r3, #22
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004456:	a812      	add	r0, sp, #72	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004458:	931f      	str	r3, [sp, #124]	; 0x7c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800445a:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800445c:	9416      	str	r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800445e:	9519      	str	r5, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004460:	951a      	str	r5, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8004462:	941b      	str	r4, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004464:	f7fd faca 	bl	80019fc <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004468:	2307      	movs	r3, #7
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800446a:	0029      	movs	r1, r5
 800446c:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800446e:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004470:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004472:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004474:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004476:	f7fd fd31 	bl	8001edc <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1;
 800447a:	2360      	movs	r3, #96	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800447c:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1;
 800447e:	9305      	str	r3, [sp, #20]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8004480:	9408      	str	r4, [sp, #32]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004482:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004484:	f7fd fe06 	bl	8002094 <HAL_RCCEx_PeriphCLKConfig>
}
 8004488:	b021      	add	sp, #132	; 0x84
 800448a:	bd30      	pop	{r4, r5, pc}

0800448c <main>:
{
 800448c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800448e:	b093      	sub	sp, #76	; 0x4c
  HAL_Init();
 8004490:	f7fc f8ce 	bl	8000630 <HAL_Init>
  SystemClock_Config();
 8004494:	f7ff ffb9 	bl	800440a <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004498:	2104      	movs	r1, #4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800449a:	2701      	movs	r7, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800449c:	2402      	movs	r4, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800449e:	4d5d      	ldr	r5, [pc, #372]	; (8004614 <main+0x188>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044a0:	ae0d      	add	r6, sp, #52	; 0x34
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80044a2:	6b6a      	ldr	r2, [r5, #52]	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044a4:	0030      	movs	r0, r6
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80044a6:	430a      	orrs	r2, r1
 80044a8:	636a      	str	r2, [r5, #52]	; 0x34
 80044aa:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80044ac:	400b      	ands	r3, r1
 80044ae:	9301      	str	r3, [sp, #4]
 80044b0:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80044b2:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80044b4:	311c      	adds	r1, #28
 80044b6:	430a      	orrs	r2, r1
 80044b8:	636a      	str	r2, [r5, #52]	; 0x34
 80044ba:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044bc:	2214      	movs	r2, #20
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80044be:	400b      	ands	r3, r1
 80044c0:	9302      	str	r3, [sp, #8]
 80044c2:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80044c4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044c6:	2100      	movs	r1, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80044c8:	433b      	orrs	r3, r7
 80044ca:	636b      	str	r3, [r5, #52]	; 0x34
 80044cc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80044ce:	403b      	ands	r3, r7
 80044d0:	9303      	str	r3, [sp, #12]
 80044d2:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80044d4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80044d6:	4323      	orrs	r3, r4
 80044d8:	636b      	str	r3, [r5, #52]	; 0x34
 80044da:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80044dc:	4023      	ands	r3, r4
 80044de:	9304      	str	r3, [sp, #16]
 80044e0:	9b04      	ldr	r3, [sp, #16]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044e2:	f000 fa40 	bl	8004966 <memset>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80044e6:	2108      	movs	r1, #8
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80044e8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOB, EN_OTG_Pin|ILIM_HIZ_Pin, GPIO_PIN_RESET);
 80044ea:	484b      	ldr	r0, [pc, #300]	; (8004618 <main+0x18c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80044ec:	433b      	orrs	r3, r7
 80044ee:	636b      	str	r3, [r5, #52]	; 0x34
 80044f0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80044f2:	403b      	ands	r3, r7
 80044f4:	9305      	str	r3, [sp, #20]
 80044f6:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80044f8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80044fa:	4323      	orrs	r3, r4
 80044fc:	636b      	str	r3, [r5, #52]	; 0x34
 80044fe:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8004500:	401c      	ands	r4, r3
 8004502:	9406      	str	r4, [sp, #24]
 8004504:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004506:	6b6a      	ldr	r2, [r5, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOB, EN_OTG_Pin|ILIM_HIZ_Pin, GPIO_PIN_RESET);
 8004508:	4c44      	ldr	r4, [pc, #272]	; (800461c <main+0x190>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800450a:	430a      	orrs	r2, r1
 800450c:	636a      	str	r2, [r5, #52]	; 0x34
 800450e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOB, EN_OTG_Pin|ILIM_HIZ_Pin, GPIO_PIN_RESET);
 8004510:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004512:	400b      	ands	r3, r1
 8004514:	9307      	str	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOB, EN_OTG_Pin|ILIM_HIZ_Pin, GPIO_PIN_RESET);
 8004516:	0021      	movs	r1, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004518:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOB, EN_OTG_Pin|ILIM_HIZ_Pin, GPIO_PIN_RESET);
 800451a:	f7fc faf9 	bl	8000b10 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = EN_OTG_Pin|ILIM_HIZ_Pin;
 800451e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004520:	2400      	movs	r4, #0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004522:	0031      	movs	r1, r6
 8004524:	483c      	ldr	r0, [pc, #240]	; (8004618 <main+0x18c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004526:	6077      	str	r7, [r6, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004528:	60b4      	str	r4, [r6, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800452a:	60f4      	str	r4, [r6, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800452c:	f7fc fa48 	bl	80009c0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PROTCHOT_Pin|CHRG_OK_Pin;
 8004530:	4b3b      	ldr	r3, [pc, #236]	; (8004620 <main+0x194>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004532:	0031      	movs	r1, r6
 8004534:	4838      	ldr	r0, [pc, #224]	; (8004618 <main+0x18c>)
  GPIO_InitStruct.Pin = PROTCHOT_Pin|CHRG_OK_Pin;
 8004536:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004538:	6074      	str	r4, [r6, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800453a:	60b4      	str	r4, [r6, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800453c:	f7fc fa40 	bl	80009c0 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004540:	6bab      	ldr	r3, [r5, #56]	; 0x38
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMAMUX1_OVR_IRQn, 0, 0);
 8004542:	0022      	movs	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004544:	433b      	orrs	r3, r7
 8004546:	63ab      	str	r3, [r5, #56]	; 0x38
 8004548:	6bab      	ldr	r3, [r5, #56]	; 0x38
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMAMUX1_OVR_IRQn, 0, 0);
 800454a:	0021      	movs	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 800454c:	403b      	ands	r3, r7
 800454e:	9300      	str	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMAMUX1_OVR_IRQn, 0, 0);
 8004550:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004552:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMAMUX1_OVR_IRQn, 0, 0);
 8004554:	f7fc f892 	bl	800067c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMAMUX1_OVR_IRQn);
 8004558:	200b      	movs	r0, #11
 800455a:	f7fc f8bf 	bl	80006dc <HAL_NVIC_EnableIRQ>
  hi2c1.Instance = I2C1;
 800455e:	4d31      	ldr	r5, [pc, #196]	; (8004624 <main+0x198>)
 8004560:	4b31      	ldr	r3, [pc, #196]	; (8004628 <main+0x19c>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004562:	0028      	movs	r0, r5
  hi2c1.Instance = I2C1;
 8004564:	602b      	str	r3, [r5, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8004566:	4b31      	ldr	r3, [pc, #196]	; (800462c <main+0x1a0>)
  hi2c1.Init.OwnAddress1 = 0;
 8004568:	60ac      	str	r4, [r5, #8]
  hi2c1.Init.Timing = 0x10707DBC;
 800456a:	606b      	str	r3, [r5, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800456c:	60ef      	str	r7, [r5, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800456e:	612c      	str	r4, [r5, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004570:	616c      	str	r4, [r5, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004572:	61ac      	str	r4, [r5, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004574:	61ec      	str	r4, [r5, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004576:	622c      	str	r4, [r5, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004578:	f7fc fb58 	bl	8000c2c <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800457c:	0021      	movs	r1, r4
 800457e:	0028      	movs	r0, r5
 8004580:	f7fd f9c8 	bl	8001914 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004584:	0021      	movs	r1, r4
 8004586:	0028      	movs	r0, r5
 8004588:	f7fd f9ea 	bl	8001960 <HAL_I2CEx_ConfigDigitalFilter>
  hlpuart1.Instance = LPUART1;
 800458c:	4d28      	ldr	r5, [pc, #160]	; (8004630 <main+0x1a4>)
 800458e:	4b29      	ldr	r3, [pc, #164]	; (8004634 <main+0x1a8>)
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8004590:	0028      	movs	r0, r5
  hlpuart1.Instance = LPUART1;
 8004592:	602b      	str	r3, [r5, #0]
  hlpuart1.Init.BaudRate = 209700;
 8004594:	4b28      	ldr	r3, [pc, #160]	; (8004638 <main+0x1ac>)
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8004596:	60ec      	str	r4, [r5, #12]
  hlpuart1.Init.BaudRate = 209700;
 8004598:	606b      	str	r3, [r5, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 800459a:	2380      	movs	r3, #128	; 0x80
 800459c:	055b      	lsls	r3, r3, #21
 800459e:	60ab      	str	r3, [r5, #8]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80045a0:	230c      	movs	r3, #12
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80045a2:	612c      	str	r4, [r5, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80045a4:	616b      	str	r3, [r5, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045a6:	61ac      	str	r4, [r5, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80045a8:	622c      	str	r4, [r5, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80045aa:	626c      	str	r4, [r5, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80045ac:	62ac      	str	r4, [r5, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80045ae:	666c      	str	r4, [r5, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80045b0:	f7fe fc96 	bl	8002ee0 <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80045b4:	0021      	movs	r1, r4
 80045b6:	0028      	movs	r0, r5
 80045b8:	f7fe fd20 	bl	8002ffc <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80045bc:	0021      	movs	r1, r4
 80045be:	0028      	movs	r0, r5
 80045c0:	f7fe fd3e 	bl	8003040 <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80045c4:	0028      	movs	r0, r5
 80045c6:	f7fe fcfd 	bl	8002fc4 <HAL_UARTEx_DisableFifoMode>
	xTxMutex_Regulator = xSemaphoreCreateMutex();
 80045ca:	0038      	movs	r0, r7
 80045cc:	f7ff f8bd 	bl	800374a <xQueueCreateMutex>
 80045d0:	4b1a      	ldr	r3, [pc, #104]	; (800463c <main+0x1b0>)
 80045d2:	6018      	str	r0, [r3, #0]
	configASSERT(xTxMutex_Regulator);
 80045d4:	42a0      	cmp	r0, r4
 80045d6:	d101      	bne.n	80045dc <main+0x150>
 80045d8:	b672      	cpsid	i
 80045da:	e7fe      	b.n	80045da <main+0x14e>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80045dc:	a808      	add	r0, sp, #32
 80045de:	0003      	movs	r3, r0
 80045e0:	4a17      	ldr	r2, [pc, #92]	; (8004640 <main+0x1b4>)
 80045e2:	caa2      	ldmia	r2!, {r1, r5, r7}
 80045e4:	c3a2      	stmia	r3!, {r1, r5, r7}
 80045e6:	ca22      	ldmia	r2!, {r1, r5}
 80045e8:	c322      	stmia	r3!, {r1, r5}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80045ea:	0021      	movs	r1, r4
 80045ec:	f7fe fd51 	bl	8003092 <osThreadCreate>
	osThreadDef(regulator, vRegulator, REGULATOR_TASK_PRIORITY, 0, vRegulator_STACK_SIZE);
 80045f0:	0032      	movs	r2, r6
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80045f2:	4b14      	ldr	r3, [pc, #80]	; (8004644 <main+0x1b8>)
	osThreadDef(regulator, vRegulator, REGULATOR_TASK_PRIORITY, 0, vRegulator_STACK_SIZE);
 80045f4:	4d12      	ldr	r5, [pc, #72]	; (8004640 <main+0x1b4>)
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80045f6:	6018      	str	r0, [r3, #0]
	osThreadDef(regulator, vRegulator, REGULATOR_TASK_PRIORITY, 0, vRegulator_STACK_SIZE);
 80045f8:	3514      	adds	r5, #20
 80045fa:	cd0b      	ldmia	r5!, {r0, r1, r3}
 80045fc:	c20b      	stmia	r2!, {r0, r1, r3}
	regulatorTaskHandle = osThreadCreate(osThread(regulator), NULL);
 80045fe:	0030      	movs	r0, r6
	osThreadDef(regulator, vRegulator, REGULATOR_TASK_PRIORITY, 0, vRegulator_STACK_SIZE);
 8004600:	cd0a      	ldmia	r5!, {r1, r3}
 8004602:	c20a      	stmia	r2!, {r1, r3}
	regulatorTaskHandle = osThreadCreate(osThread(regulator), NULL);
 8004604:	0021      	movs	r1, r4
 8004606:	f7fe fd44 	bl	8003092 <osThreadCreate>
 800460a:	4b0f      	ldr	r3, [pc, #60]	; (8004648 <main+0x1bc>)
 800460c:	6018      	str	r0, [r3, #0]
  osKernelStart();
 800460e:	f7fe fd3b 	bl	8003088 <osKernelStart>
 8004612:	e7fe      	b.n	8004612 <main+0x186>
 8004614:	40021000 	.word	0x40021000
 8004618:	50000400 	.word	0x50000400
 800461c:	00000801 	.word	0x00000801
 8004620:	00001002 	.word	0x00001002
 8004624:	20000df8 	.word	0x20000df8
 8004628:	40005400 	.word	0x40005400
 800462c:	10707dbc 	.word	0x10707dbc
 8004630:	20000e44 	.word	0x20000e44
 8004634:	40008000 	.word	0x40008000
 8004638:	00033324 	.word	0x00033324
 800463c:	20000f2c 	.word	0x20000f2c
 8004640:	08004990 	.word	0x08004990
 8004644:	20000d98 	.word	0x20000d98
 8004648:	20000d74 	.word	0x20000d74

0800464c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800464c:	2380      	movs	r3, #128	; 0x80
 800464e:	6802      	ldr	r2, [r0, #0]
{
 8004650:	b510      	push	{r4, lr}
  if (htim->Instance == TIM2) {
 8004652:	05db      	lsls	r3, r3, #23
 8004654:	429a      	cmp	r2, r3
 8004656:	d101      	bne.n	800465c <HAL_TIM_PeriodElapsedCallback+0x10>
    HAL_IncTick();
 8004658:	f7fb fffe 	bl	8000658 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800465c:	bd10      	pop	{r4, pc}

0800465e <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800465e:	4770      	bx	lr

08004660 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004660:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004662:	2001      	movs	r0, #1
 8004664:	4b0b      	ldr	r3, [pc, #44]	; (8004694 <HAL_MspInit+0x34>)
 8004666:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004668:	4301      	orrs	r1, r0
 800466a:	6419      	str	r1, [r3, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();
 800466c:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800466e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();
 8004670:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004672:	4002      	ands	r2, r0
 8004674:	9200      	str	r2, [sp, #0]
 8004676:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004678:	6bda      	ldr	r2, [r3, #60]	; 0x3c

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 800467a:	3803      	subs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 800467c:	430a      	orrs	r2, r1
 800467e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8004682:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8004684:	400b      	ands	r3, r1
 8004686:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8004688:	2103      	movs	r1, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 800468a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 800468c:	f7fb fff6 	bl	800067c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004690:	bd07      	pop	{r0, r1, r2, pc}
 8004692:	46c0      	nop			; (mov r8, r8)
 8004694:	40021000 	.word	0x40021000

08004698 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004698:	b530      	push	{r4, r5, lr}
 800469a:	0005      	movs	r5, r0
 800469c:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800469e:	2214      	movs	r2, #20
 80046a0:	2100      	movs	r1, #0
 80046a2:	a803      	add	r0, sp, #12
 80046a4:	f000 f95f 	bl	8004966 <memset>
  if(hi2c->Instance==I2C1)
 80046a8:	4b2f      	ldr	r3, [pc, #188]	; (8004768 <HAL_I2C_MspInit+0xd0>)
 80046aa:	682a      	ldr	r2, [r5, #0]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d158      	bne.n	8004762 <HAL_I2C_MspInit+0xca>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046b0:	2102      	movs	r1, #2
 80046b2:	4c2e      	ldr	r4, [pc, #184]	; (800476c <HAL_I2C_MspInit+0xd4>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046b4:	482e      	ldr	r0, [pc, #184]	; (8004770 <HAL_I2C_MspInit+0xd8>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046b6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80046b8:	430a      	orrs	r2, r1
 80046ba:	6362      	str	r2, [r4, #52]	; 0x34
 80046bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80046be:	400b      	ands	r3, r1
 80046c0:	9301      	str	r3, [sp, #4]
 80046c2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80046c4:	23c0      	movs	r3, #192	; 0xc0
 80046c6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80046c8:	3bae      	subs	r3, #174	; 0xae
 80046ca:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80046cc:	3b11      	subs	r3, #17
 80046ce:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046d0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80046d2:	3305      	adds	r3, #5
 80046d4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046d6:	f7fc f973 	bl	80009c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80046da:	2180      	movs	r1, #128	; 0x80
 80046dc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80046de:	0389      	lsls	r1, r1, #14
 80046e0:	430a      	orrs	r2, r1
 80046e2:	63e2      	str	r2, [r4, #60]	; 0x3c
 80046e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  
    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel4;
 80046e6:	4c23      	ldr	r4, [pc, #140]	; (8004774 <HAL_I2C_MspInit+0xdc>)
    __HAL_RCC_I2C1_CLK_ENABLE();
 80046e8:	400b      	ands	r3, r1
 80046ea:	9302      	str	r3, [sp, #8]
 80046ec:	9b02      	ldr	r3, [sp, #8]
    hdma_i2c1_tx.Instance = DMA1_Channel4;
 80046ee:	4b22      	ldr	r3, [pc, #136]	; (8004778 <HAL_I2C_MspInit+0xe0>)
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80046f0:	2280      	movs	r2, #128	; 0x80
    hdma_i2c1_tx.Instance = DMA1_Channel4;
 80046f2:	6023      	str	r3, [r4, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 80046f4:	230b      	movs	r3, #11
 80046f6:	6063      	str	r3, [r4, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80046f8:	3305      	adds	r3, #5
 80046fa:	60a3      	str	r3, [r4, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80046fc:	2300      	movs	r3, #0
 80046fe:	60e3      	str	r3, [r4, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004700:	6163      	str	r3, [r4, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004702:	61a3      	str	r3, [r4, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8004704:	61e3      	str	r3, [r4, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004706:	2380      	movs	r3, #128	; 0x80
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8004708:	0020      	movs	r0, r4
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800470a:	019b      	lsls	r3, r3, #6
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800470c:	6122      	str	r2, [r4, #16]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800470e:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8004710:	f7fc f828 	bl	8000764 <HAL_DMA_Init>
 8004714:	2800      	cmp	r0, #0
 8004716:	d001      	beq.n	800471c <HAL_I2C_MspInit+0x84>
    {
      Error_Handler();
 8004718:	f7ff ffa1 	bl	800465e <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel5;
 800471c:	4b17      	ldr	r3, [pc, #92]	; (800477c <HAL_I2C_MspInit+0xe4>)
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800471e:	63ac      	str	r4, [r5, #56]	; 0x38
 8004720:	62a5      	str	r5, [r4, #40]	; 0x28
    hdma_i2c1_rx.Instance = DMA1_Channel5;
 8004722:	4c17      	ldr	r4, [pc, #92]	; (8004780 <HAL_I2C_MspInit+0xe8>)
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004724:	2280      	movs	r2, #128	; 0x80
    hdma_i2c1_rx.Instance = DMA1_Channel5;
 8004726:	6023      	str	r3, [r4, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8004728:	230a      	movs	r3, #10
 800472a:	6063      	str	r3, [r4, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800472c:	2300      	movs	r3, #0
 800472e:	60a3      	str	r3, [r4, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004730:	60e3      	str	r3, [r4, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004732:	6163      	str	r3, [r4, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004734:	61a3      	str	r3, [r4, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8004736:	61e3      	str	r3, [r4, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004738:	2380      	movs	r3, #128	; 0x80
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800473a:	0020      	movs	r0, r4
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800473c:	019b      	lsls	r3, r3, #6
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800473e:	6122      	str	r2, [r4, #16]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004740:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8004742:	f7fc f80f 	bl	8000764 <HAL_DMA_Init>
 8004746:	2800      	cmp	r0, #0
 8004748:	d001      	beq.n	800474e <HAL_I2C_MspInit+0xb6>
    {
      Error_Handler();
 800474a:	f7ff ff88 	bl	800465e <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 3, 0);
 800474e:	2017      	movs	r0, #23
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8004750:	63ec      	str	r4, [r5, #60]	; 0x3c
    HAL_NVIC_SetPriority(I2C1_IRQn, 3, 0);
 8004752:	2200      	movs	r2, #0
 8004754:	2103      	movs	r1, #3
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8004756:	62a5      	str	r5, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(I2C1_IRQn, 3, 0);
 8004758:	f7fb ff90 	bl	800067c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800475c:	2017      	movs	r0, #23
 800475e:	f7fb ffbd 	bl	80006dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004762:	b009      	add	sp, #36	; 0x24
 8004764:	bd30      	pop	{r4, r5, pc}
 8004766:	46c0      	nop			; (mov r8, r8)
 8004768:	40005400 	.word	0x40005400
 800476c:	40021000 	.word	0x40021000
 8004770:	50000400 	.word	0x50000400
 8004774:	20000d9c 	.word	0x20000d9c
 8004778:	40020044 	.word	0x40020044
 800477c:	40020058 	.word	0x40020058
 8004780:	20000ed0 	.word	0x20000ed0

08004784 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004784:	b510      	push	{r4, lr}
 8004786:	0004      	movs	r4, r0
 8004788:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800478a:	2214      	movs	r2, #20
 800478c:	2100      	movs	r1, #0
 800478e:	a803      	add	r0, sp, #12
 8004790:	f000 f8e9 	bl	8004966 <memset>
  if(huart->Instance==LPUART1)
 8004794:	4b11      	ldr	r3, [pc, #68]	; (80047dc <HAL_UART_MspInit+0x58>)
 8004796:	6822      	ldr	r2, [r4, #0]
 8004798:	429a      	cmp	r2, r3
 800479a:	d11c      	bne.n	80047d6 <HAL_UART_MspInit+0x52>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800479c:	2080      	movs	r0, #128	; 0x80
 800479e:	4b10      	ldr	r3, [pc, #64]	; (80047e0 <HAL_UART_MspInit+0x5c>)
 80047a0:	0340      	lsls	r0, r0, #13
 80047a2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80047a4:	4301      	orrs	r1, r0
 80047a6:	63d9      	str	r1, [r3, #60]	; 0x3c
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047a8:	2101      	movs	r1, #1
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80047aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047ac:	4002      	ands	r2, r0
 80047ae:	9201      	str	r2, [sp, #4]
 80047b0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047b4:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047b6:	430a      	orrs	r2, r1
 80047b8:	635a      	str	r2, [r3, #52]	; 0x34
 80047ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047bc:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047be:	400b      	ands	r3, r1
 80047c0:	9302      	str	r3, [sp, #8]
 80047c2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80047c4:	230c      	movs	r3, #12
 80047c6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047c8:	3b0a      	subs	r3, #10
 80047ca:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047cc:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 80047ce:	3304      	adds	r3, #4
 80047d0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047d2:	f7fc f8f5 	bl	80009c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80047d6:	b008      	add	sp, #32
 80047d8:	bd10      	pop	{r4, pc}
 80047da:	46c0      	nop			; (mov r8, r8)
 80047dc:	40008000 	.word	0x40008000
 80047e0:	40021000 	.word	0x40021000

080047e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80047e4:	b530      	push	{r4, r5, lr}
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80047e6:	2501      	movs	r5, #1
{
 80047e8:	b087      	sub	sp, #28
 80047ea:	0001      	movs	r1, r0
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 80047ec:	2200      	movs	r2, #0
 80047ee:	200f      	movs	r0, #15
 80047f0:	f7fb ff44 	bl	800067c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 80047f4:	200f      	movs	r0, #15
 80047f6:	f7fb ff71 	bl	80006dc <HAL_NVIC_EnableIRQ>
  __HAL_RCC_TIM2_CLK_ENABLE();
 80047fa:	4b14      	ldr	r3, [pc, #80]	; (800484c <HAL_InitTick+0x68>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80047fc:	4669      	mov	r1, sp
  __HAL_RCC_TIM2_CLK_ENABLE();
 80047fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004800:	a802      	add	r0, sp, #8
  __HAL_RCC_TIM2_CLK_ENABLE();
 8004802:	432a      	orrs	r2, r5
 8004804:	63da      	str	r2, [r3, #60]	; 0x3c
 8004806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004808:	402b      	ands	r3, r5
 800480a:	9301      	str	r3, [sp, #4]
 800480c:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800480e:	f7fd fc27 	bl	8002060 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004812:	f7fd fc11 	bl	8002038 <HAL_RCC_GetPCLK1Freq>
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8004816:	2380      	movs	r3, #128	; 0x80
 8004818:	4c0d      	ldr	r4, [pc, #52]	; (8004850 <HAL_InitTick+0x6c>)
 800481a:	05db      	lsls	r3, r3, #23
 800481c:	6023      	str	r3, [r4, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 800481e:	4b0d      	ldr	r3, [pc, #52]	; (8004854 <HAL_InitTick+0x70>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8004820:	490d      	ldr	r1, [pc, #52]	; (8004858 <HAL_InitTick+0x74>)
  htim2.Init.Period = (1000000 / 1000) - 1;
 8004822:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8004824:	f7fb fc84 	bl	8000130 <__udivsi3>
  htim2.Init.Prescaler = uwPrescalerValue;
  htim2.Init.ClockDivision = 0;
 8004828:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800482a:	3801      	subs	r0, #1
  htim2.Init.Prescaler = uwPrescalerValue;
 800482c:	6060      	str	r0, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800482e:	0020      	movs	r0, r4
  htim2.Init.ClockDivision = 0;
 8004830:	6123      	str	r3, [r4, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004832:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8004834:	f7fd fe4e 	bl	80024d4 <HAL_TIM_Base_Init>
 8004838:	0003      	movs	r3, r0
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
  }
  
  /* Return function status */
  return HAL_ERROR;
 800483a:	0028      	movs	r0, r5
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800483c:	2b00      	cmp	r3, #0
 800483e:	d102      	bne.n	8004846 <HAL_InitTick+0x62>
    return HAL_TIM_Base_Start_IT(&htim2);
 8004840:	0020      	movs	r0, r4
 8004842:	f7fd fd2b 	bl	800229c <HAL_TIM_Base_Start_IT>
}
 8004846:	b007      	add	sp, #28
 8004848:	bd30      	pop	{r4, r5, pc}
 800484a:	46c0      	nop			; (mov r8, r8)
 800484c:	40021000 	.word	0x40021000
 8004850:	20000f30 	.word	0x20000f30
 8004854:	000003e7 	.word	0x000003e7
 8004858:	000f4240 	.word	0x000f4240

0800485c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800485c:	4770      	bx	lr

0800485e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800485e:	e7fe      	b.n	800485e <HardFault_Handler>

08004860 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6, channel 7 and DMAMUX1 interrupts.
  */
void DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler(void)
{
 8004860:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8004862:	4803      	ldr	r0, [pc, #12]	; (8004870 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x10>)
 8004864:	f7fc f858 	bl	8000918 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004868:	4802      	ldr	r0, [pc, #8]	; (8004874 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x14>)
 800486a:	f7fc f855 	bl	8000918 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */
}
 800486e:	bd10      	pop	{r4, pc}
 8004870:	20000d9c 	.word	0x20000d9c
 8004874:	20000ed0 	.word	0x20000ed0

08004878 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004878:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800487a:	4802      	ldr	r0, [pc, #8]	; (8004884 <TIM2_IRQHandler+0xc>)
 800487c:	f7fd fd26 	bl	80022cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004880:	bd10      	pop	{r4, pc}
 8004882:	46c0      	nop			; (mov r8, r8)
 8004884:	20000f30 	.word	0x20000f30

08004888 <I2C1_IRQHandler>:
void I2C1_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8004888:	4806      	ldr	r0, [pc, #24]	; (80048a4 <I2C1_IRQHandler+0x1c>)
{
 800488a:	b510      	push	{r4, lr}
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 800488c:	6803      	ldr	r3, [r0, #0]
 800488e:	699a      	ldr	r2, [r3, #24]
 8004890:	23e0      	movs	r3, #224	; 0xe0
 8004892:	00db      	lsls	r3, r3, #3
 8004894:	421a      	tst	r2, r3
 8004896:	d002      	beq.n	800489e <I2C1_IRQHandler+0x16>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8004898:	f7fc fff6 	bl	8001888 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800489c:	bd10      	pop	{r4, pc}
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800489e:	f7fc fb55 	bl	8000f4c <HAL_I2C_EV_IRQHandler>
}
 80048a2:	e7fb      	b.n	800489c <I2C1_IRQHandler+0x14>
 80048a4:	20000df8 	.word	0x20000df8

080048a8 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80048a8:	2280      	movs	r2, #128	; 0x80
 80048aa:	4b02      	ldr	r3, [pc, #8]	; (80048b4 <SystemInit+0xc>)
 80048ac:	0512      	lsls	r2, r2, #20
 80048ae:	609a      	str	r2, [r3, #8]
#endif
}
 80048b0:	4770      	bx	lr
 80048b2:	46c0      	nop			; (mov r8, r8)
 80048b4:	e000ed00 	.word	0xe000ed00

080048b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80048b8:	480d      	ldr	r0, [pc, #52]	; (80048f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80048ba:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80048bc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80048be:	e003      	b.n	80048c8 <LoopCopyDataInit>

080048c0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80048c0:	4b0c      	ldr	r3, [pc, #48]	; (80048f4 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80048c2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80048c4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80048c6:	3104      	adds	r1, #4

080048c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80048c8:	480b      	ldr	r0, [pc, #44]	; (80048f8 <LoopForever+0xa>)
  ldr r3, =_edata
 80048ca:	4b0c      	ldr	r3, [pc, #48]	; (80048fc <LoopForever+0xe>)
  adds r2, r0, r1
 80048cc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80048ce:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80048d0:	d3f6      	bcc.n	80048c0 <CopyDataInit>
  ldr r2, =_sbss
 80048d2:	4a0b      	ldr	r2, [pc, #44]	; (8004900 <LoopForever+0x12>)
  b LoopFillZerobss
 80048d4:	e002      	b.n	80048dc <LoopFillZerobss>

080048d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80048d6:	2300      	movs	r3, #0
  str  r3, [r2]
 80048d8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80048da:	3204      	adds	r2, #4

080048dc <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80048dc:	4b09      	ldr	r3, [pc, #36]	; (8004904 <LoopForever+0x16>)
  cmp r2, r3
 80048de:	429a      	cmp	r2, r3
  bcc FillZerobss
 80048e0:	d3f9      	bcc.n	80048d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80048e2:	f7ff ffe1 	bl	80048a8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80048e6:	f000 f811 	bl	800490c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80048ea:	f7ff fdcf 	bl	800448c <main>

080048ee <LoopForever>:

LoopForever:
    b LoopForever
 80048ee:	e7fe      	b.n	80048ee <LoopForever>
  ldr   r0, =_estack
 80048f0:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 80048f4:	08004a54 	.word	0x08004a54
  ldr r0, =_sdata
 80048f8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80048fc:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8004900:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8004904:	20000f70 	.word	0x20000f70

08004908 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004908:	e7fe      	b.n	8004908 <ADC1_COMP_IRQHandler>
	...

0800490c <__libc_init_array>:
 800490c:	b570      	push	{r4, r5, r6, lr}
 800490e:	2600      	movs	r6, #0
 8004910:	4d0c      	ldr	r5, [pc, #48]	; (8004944 <__libc_init_array+0x38>)
 8004912:	4c0d      	ldr	r4, [pc, #52]	; (8004948 <__libc_init_array+0x3c>)
 8004914:	1b64      	subs	r4, r4, r5
 8004916:	10a4      	asrs	r4, r4, #2
 8004918:	42a6      	cmp	r6, r4
 800491a:	d109      	bne.n	8004930 <__libc_init_array+0x24>
 800491c:	2600      	movs	r6, #0
 800491e:	f000 f82b 	bl	8004978 <_init>
 8004922:	4d0a      	ldr	r5, [pc, #40]	; (800494c <__libc_init_array+0x40>)
 8004924:	4c0a      	ldr	r4, [pc, #40]	; (8004950 <__libc_init_array+0x44>)
 8004926:	1b64      	subs	r4, r4, r5
 8004928:	10a4      	asrs	r4, r4, #2
 800492a:	42a6      	cmp	r6, r4
 800492c:	d105      	bne.n	800493a <__libc_init_array+0x2e>
 800492e:	bd70      	pop	{r4, r5, r6, pc}
 8004930:	00b3      	lsls	r3, r6, #2
 8004932:	58eb      	ldr	r3, [r5, r3]
 8004934:	4798      	blx	r3
 8004936:	3601      	adds	r6, #1
 8004938:	e7ee      	b.n	8004918 <__libc_init_array+0xc>
 800493a:	00b3      	lsls	r3, r6, #2
 800493c:	58eb      	ldr	r3, [r5, r3]
 800493e:	4798      	blx	r3
 8004940:	3601      	adds	r6, #1
 8004942:	e7f2      	b.n	800492a <__libc_init_array+0x1e>
 8004944:	08004a4c 	.word	0x08004a4c
 8004948:	08004a4c 	.word	0x08004a4c
 800494c:	08004a4c 	.word	0x08004a4c
 8004950:	08004a50 	.word	0x08004a50

08004954 <memcpy>:
 8004954:	2300      	movs	r3, #0
 8004956:	b510      	push	{r4, lr}
 8004958:	429a      	cmp	r2, r3
 800495a:	d100      	bne.n	800495e <memcpy+0xa>
 800495c:	bd10      	pop	{r4, pc}
 800495e:	5ccc      	ldrb	r4, [r1, r3]
 8004960:	54c4      	strb	r4, [r0, r3]
 8004962:	3301      	adds	r3, #1
 8004964:	e7f8      	b.n	8004958 <memcpy+0x4>

08004966 <memset>:
 8004966:	0003      	movs	r3, r0
 8004968:	1882      	adds	r2, r0, r2
 800496a:	4293      	cmp	r3, r2
 800496c:	d100      	bne.n	8004970 <memset+0xa>
 800496e:	4770      	bx	lr
 8004970:	7019      	strb	r1, [r3, #0]
 8004972:	3301      	adds	r3, #1
 8004974:	e7f9      	b.n	800496a <memset+0x4>
	...

08004978 <_init>:
 8004978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800497a:	46c0      	nop			; (mov r8, r8)
 800497c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800497e:	bc08      	pop	{r3}
 8004980:	469e      	mov	lr, r3
 8004982:	4770      	bx	lr

08004984 <_fini>:
 8004984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004986:	46c0      	nop			; (mov r8, r8)
 8004988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800498a:	bc08      	pop	{r3}
 800498c:	469e      	mov	lr, r3
 800498e:	4770      	bx	lr
